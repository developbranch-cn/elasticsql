package cn.batchfile.elasticsql.parser;
// $ANTLR 3.5.2 MySQL.g 2015-01-19 11:02:01



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings("all")
public class MySQLParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABS", "ACCESSIBLE_SYM", "ACOS", 
		"ACTION", "ADDDATE", "ADDTIME", "ADD_SYM", "AES_DECRYPT", "AES_ENCRYPT", 
		"AFTER_SYM", "AGAINST", "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALL_FIELDS", 
		"ALTER", "ANALYZE_SYM", "AND_SYM", "ANY", "ARMSCII8", "ARROW", "ASC", 
		"ASCII_SYM", "ASENSITIVE_SYM", "ASIN", "ASTERISK", "AS_SYM", "ATAN", "ATAN2", 
		"AT_SYM", "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INCREMENT", "AVG", 
		"AVG_ROW_LENGTH", "A_", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BENCHMARK", 
		"BETWEEN", "BIG5", "BIGINT", "BIN", "BINARY", "BINLOG_SYM", "BITAND", 
		"BIT_AND", "BIT_LENGTH", "BIT_NUM", "BIT_OR", "BIT_SYM", "BIT_XOR", "BLOB_SYM", 
		"BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM", "BOTH", "BTREE_SYM", "BYTE_SYM", 
		"BY_SYM", "B_", "CACHE_SYM", "CALL_SYM", "CASCADE", "CASCADED", "CASE_SYM", 
		"CAST_SYM", "CEIL", "CEILING", "CHAIN_SYM", "CHANGE", "CHANGED", "CHAR", 
		"CHARACTER_SYM", "CHARSET", "CHAR_LENGTH", "CHECKSUM_SYM", "CHECK_SYM", 
		"CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM", "COERCIBILITY", 
		"COLLATE_SYM", "COLLATION", "COLON", "COLUMNS_SYM", "COLUMN_FORMAT", "COLUMN_SYM", 
		"COMMA", "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", 
		"COMPLETION_SYM", "COMPRESS", "COMPRESSED_SYM", "CONCAT", "CONCAT_WS", 
		"CONCURRENT", "CONDITION_SYM", "CONNECTION_ID", "CONNECTION_SYM", "CONSISTENT_SYM", 
		"CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", 
		"CONV", "CONVERT_SYM", "CONVERT_TZ", "COPY_SYM", "COS", "COT", "COUNT", 
		"CP1250", "CP1251", "CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", 
		"CPU_SYM", "CRC32", "CREATE", "CROSECOND", "CROSS", "CUBE_SYM", "CURDATE", 
		"CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR_SYM", "CURTIME", "C_", "DATABASE", 
		"DATAFILE_SYM", "DATA_SYM", "DATEDIFF", "DATETIME", "DATE_ADD", "DATE_FORMAT", 
		"DATE_SUB", "DATE_SYM", "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
		"DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", "DAY_SECOND", "DAY_SYM", 
		"DEALLOCATE_SYM", "DEC8", "DECIMAL_SYM", "DECLARE_SYM", "DECODE", "DEFAULT", 
		"DEFINER", "DEGREES", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", 
		"DESC", "DES_DECRYPT", "DES_ENCRYPT", "DES_KEY_FILE", "DETERMINISTIC_SYM", 
		"DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DISTINCTROW", 
		"DIVIDE", "DOT", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", 
		"DUPLICATE_SYM", "DYNAMIC_SYM", "D_", "EACH_SYM", "ELSE_SYM", "ELSIF_SYM", 
		"ELT", "ENABLE_SYM", "ENCLOSED", "ENCODE", "ENCRYPT", "ENDS_SYM", "END_SYM", 
		"ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", 
		"EUCJPMS", "EUCKR", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", 
		"EXCLUSIVE_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXP", "EXPANSION_SYM", 
		"EXPORT_SET", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT", "E_", "FALSE_SYM", 
		"FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FIELD", "FIELDS_SYM", "FILE_SYM", 
		"FIND_IN_SET", "FIRST_SYM", "FIXED_SYM", "FLOAT_SYM", "FLOOR", "FLUSH_SYM", 
		"FORCE_SYM", "FOREIGN", "FORMAT", "FOR_SYM", "FOUND_ROWS", "FOUND_SYM", 
		"FROM", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "FULL", "FULLTEXT_SYM", 
		"FUNCTION_SYM", "F_", "GB2312", "GBK", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", 
		"GEOSTD8", "GET", "GET_FORMAT", "GET_LOCK", "GLOBAL_SYM", "GRANT", "GRANTS", 
		"GREEK", "GROUP_CONCAT", "GROUP_SYM", "GTH", "G_", "HANDLER_SYM", "HASH_SYM", 
		"HAVING", "HEBREW", "HELP_SYM", "HEX", "HEX_DIGIT", "HEX_DIGIT_FRAGMENT", 
		"HIGH_PRIORITY", "HOSTS_SYM", "HOST_SYM", "HOUR", "HOUR_MICROSECOND", 
		"HOUR_MINUTE", "HOUR_SECOND", "HP8", "H_", "ID", "IDENTIFIED_SYM", "IF", 
		"IFNULL", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INET_ATON", 
		"INET_NTOA", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INPLACE_SYM", 
		"INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INSTR", 
		"INTEGER_NUM", "INTEGER_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", 
		"IN_SYM", "IO_SYM", "IPC_SYM", "ISOLATION", "ISSUER_SYM", "IS_FREE_LOCK", 
		"IS_SYM", "IS_USED_LOCK", "ITERATE_SYM", "I_", "JOIN_SYM", "J_", "KEYBCS2", 
		"KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "KOI8R", "KOI8U", "K_", 
		"LANGUAGE", "LAST_DAY", "LAST_INSERT_ID", "LAST_SYM", "LATIN1", "LATIN1_BIN", 
		"LATIN1_GENERAL_CS", "LATIN2", "LATIN5", "LATIN7", "LBRACK", "LEADING", 
		"LEAVES", "LEAVE_SYM", "LEFT", "LENGTH", "LESS_SYM", "LET", "LEVEL_SYM", 
		"LIKE_SYM", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", 
		"LN", "LOAD", "LOAD_FILE", "LOCAL_SYM", "LOCATE", "LOCK", "LOCKS_SYM", 
		"LOG", "LOG10", "LOG2", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", 
		"LONG_SYM", "LOOP_SYM", "LOWER", "LOW_PRIORITY", "LPAD", "LPAREN", "LTH", 
		"LTRIM", "L_", "MACCE", "MACROMAN", "MAKEDATE", "MAKETIME", "MAKE_SET", 
		"MASTER_CONNECT_RETRY", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", 
		"MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_POS_WAIT", "MASTER_SERVER_ID_SYM", 
		"MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", 
		"MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MASTER_SYM", "MASTER_USER_SYM", "MATCH", "MAXVALUE_SYM", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS_SYM", "MD5", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", 
		"MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM", "MICROSECOND", "MID", "MIGRATE_SYM", 
		"MINUS", "MINUTE", "MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", 
		"MIN_SYM", "ML_COMMENT", "MOD", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", 
		"MOD_SYM", "MONTH", "MONTHNAME", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"MUTEX_SYM", "M_", "NAMES_SYM", "NAME_CONST", "NAME_SYM", "NATIONAL_SYM", 
		"NATURAL", "NCHAR_SYM", "NEGATION", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", 
		"NONE_SYM", "NOT_EQ", "NOT_SYM", "NOW", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG", 
		"NULL_SYM", "NUMERIC_SYM", "NVARCHAR_SYM", "N_", "OCT", "OFFSET_SYM", 
		"OJ_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", 
		"OPTIMIZE", "OPTION", "OPTIONALLY", "OPTIONS_SYM", "ORD", "ORDER_SYM", 
		"OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM", "O_", "PACK_KEYS_SYM", 
		"PAGE_CHECKSUM_SYM", "PAGE_SYM", "PARSER_SYM", "PARTIAL", "PARTITIONING_SYM", 
		"PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD", "PERIOD_ADD", "PERIOD_DIFF", 
		"PHASE_SYM", "PI", "PLUGINS_SYM", "PLUGIN_SYM", "PLUS", "POINT_SYM", "POLYGON", 
		"PORT_SYM", "POW", "POWER", "POWER_OP", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", 
		"PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE", "PROCESS", "PROCESSLIST_SYM", 
		"PROFILES_SYM", "PROFILE_SYM", "PURGE", "P_", "QUARTER", "QUERY_SYM", 
		"QUICK", "QUOTE", "Q_", "RADIANS", "RAND", "RANGE_SYM", "RBRACK", "READS_SYM", 
		"READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REAL_NUMBER", 
		"REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", 
		"REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM", 
		"RELEASE_LOCK", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", 
		"REPAIR", "REPEAT", "REPEATABLE_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", 
		"RESET_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNS_SYM", 
		"RETURN_SYM", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP_SYM", 
		"ROUND", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "RPAD", 
		"RPAREN", "RTREE_SYM", "RTRIM", "R_", "SAVEPOINT", "SCHEDULE_SYM", "SCHEMA", 
		"SECOND", "SECOND_MICROSECOND", "SECURITY_SYM", "SEC_TO_TIME", "SELECT", 
		"SEMI", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM", 
		"SERVER_SYM", "SESSION_SYM", "SESSION_USER", "SET_SYM", "SET_VAR", "SHARED_SYM", 
		"SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGN", 
		"SIGNED_SYM", "SIMPLE_SYM", "SIN", "SJIS", "SLAVE", "SLEEP", "SL_COMMENT", 
		"SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDEX", "SOUNDS_SYM", 
		"SOURCE_SYM", "SPACE", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", 
		"SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", 
		"SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", 
		"SQL_SYM", "SQL_THREAD", "SQRT", "SSL_SYM", "STARTING", "STARTS_SYM", 
		"START_SYM", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATUS_SYM", "STD", 
		"STDDEV", "STDDEV_POP", "STDDEV_SAMP", "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", 
		"STRCMP", "STRING_SYM", "STR_TO_DATE", "SUBJECT_SYM", "SUBPARTITIONS_SYM", 
		"SUBPARTITION_SYM", "SUBSTRING", "SUBSTRING_INDEX", "SUBTIME", "SUM", 
		"SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWE7", "SWITCHES_SYM", "SYSDATE", 
		"SYSTEM_USER", "S_", "TABLE", "TABLES", "TABLESPACE", "TABLE_CHECKSUM_SYM", 
		"TAN", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED", "TEXT_STRING", "TEXT_SYM", 
		"THAN_SYM", "THEN_SYM", "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_SYM", "TIME_TO_SEC", "TINYBLOB", "TINYINT", "TINYTEXT", 
		"TIS620", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TO_SYM", "TRAILING", 
		"TRANSACTION", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", 
		"TRUE_SYM", "TRUNCATE", "TYPES_SYM", "TYPE_SYM", "T_", "UCS2", "UJIS", 
		"UNCOMMITTED_SYM", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNDEFINED_SYM", 
		"UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNHEX", "UNICODE_SYM", 
		"UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNIX_TIMESTAMP", "UNKNOWN_SYM", 
		"UNLOCK_SYM", "UNSIGNED_SYM", "UNTIL_SYM", "UPDATE", "UPGRADE_SYM", "UPPER", 
		"USAGE", "USER", "USER_VAR", "USER_VAR_SUBFIX1", "USER_VAR_SUBFIX2", "USER_VAR_SUBFIX3", 
		"USER_VAR_SUBFIX4", "USE_FRM", "USE_SYM", "USING_SYM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "UTF16", "UTF16LE", "UTF32", "UTF8", "UUID", "U_", "VALUES", 
		"VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE", "VARYING", 
		"VAR_POP", "VAR_SAMP", "VERSION_SYM", "VERTBAR", "VIEW_SYM", "V_", "WAIT_SYM", 
		"WARNINGS", "WEEK", "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WHEN_SYM", 
		"WHERE", "WHILE_SYM", "WHITE_SPACE", "WITH", "WORK_SYM", "WRAPPER_SYM", 
		"WRITE_SYM", "W_", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "X_", "YEAR", 
		"YEARWEEK", "YEAR_MONTH", "Y_", "ZEROFILL", "Z_"
	};
	public static final int EOF=-1;
	public static final int ABS=4;
	public static final int ACCESSIBLE_SYM=5;
	public static final int ACOS=6;
	public static final int ACTION=7;
	public static final int ADDDATE=8;
	public static final int ADDTIME=9;
	public static final int ADD_SYM=10;
	public static final int AES_DECRYPT=11;
	public static final int AES_ENCRYPT=12;
	public static final int AFTER_SYM=13;
	public static final int AGAINST=14;
	public static final int AGGREGATE_SYM=15;
	public static final int ALGORITHM_SYM=16;
	public static final int ALL=17;
	public static final int ALL_FIELDS=18;
	public static final int ALTER=19;
	public static final int ANALYZE_SYM=20;
	public static final int AND_SYM=21;
	public static final int ANY=22;
	public static final int ARMSCII8=23;
	public static final int ARROW=24;
	public static final int ASC=25;
	public static final int ASCII_SYM=26;
	public static final int ASENSITIVE_SYM=27;
	public static final int ASIN=28;
	public static final int ASTERISK=29;
	public static final int AS_SYM=30;
	public static final int ATAN=31;
	public static final int ATAN2=32;
	public static final int AT_SYM=33;
	public static final int AUTHORS_SYM=34;
	public static final int AUTOEXTEND_SIZE_SYM=35;
	public static final int AUTO_INCREMENT=36;
	public static final int AVG=37;
	public static final int AVG_ROW_LENGTH=38;
	public static final int A_=39;
	public static final int BACKUP_SYM=40;
	public static final int BEFORE_SYM=41;
	public static final int BEGIN_SYM=42;
	public static final int BENCHMARK=43;
	public static final int BETWEEN=44;
	public static final int BIG5=45;
	public static final int BIGINT=46;
	public static final int BIN=47;
	public static final int BINARY=48;
	public static final int BINLOG_SYM=49;
	public static final int BITAND=50;
	public static final int BIT_AND=51;
	public static final int BIT_LENGTH=52;
	public static final int BIT_NUM=53;
	public static final int BIT_OR=54;
	public static final int BIT_SYM=55;
	public static final int BIT_XOR=56;
	public static final int BLOB_SYM=57;
	public static final int BLOCK_SYM=58;
	public static final int BOOLEAN_SYM=59;
	public static final int BOOL_SYM=60;
	public static final int BOTH=61;
	public static final int BTREE_SYM=62;
	public static final int BYTE_SYM=63;
	public static final int BY_SYM=64;
	public static final int B_=65;
	public static final int CACHE_SYM=66;
	public static final int CALL_SYM=67;
	public static final int CASCADE=68;
	public static final int CASCADED=69;
	public static final int CASE_SYM=70;
	public static final int CAST_SYM=71;
	public static final int CEIL=72;
	public static final int CEILING=73;
	public static final int CHAIN_SYM=74;
	public static final int CHANGE=75;
	public static final int CHANGED=76;
	public static final int CHAR=77;
	public static final int CHARACTER_SYM=78;
	public static final int CHARSET=79;
	public static final int CHAR_LENGTH=80;
	public static final int CHECKSUM_SYM=81;
	public static final int CHECK_SYM=82;
	public static final int CIPHER_SYM=83;
	public static final int CLIENT_SYM=84;
	public static final int CLOSE_SYM=85;
	public static final int COALESCE=86;
	public static final int CODE_SYM=87;
	public static final int COERCIBILITY=88;
	public static final int COLLATE_SYM=89;
	public static final int COLLATION=90;
	public static final int COLON=91;
	public static final int COLUMNS_SYM=92;
	public static final int COLUMN_FORMAT=93;
	public static final int COLUMN_SYM=94;
	public static final int COMMA=95;
	public static final int COMMENT_SYM=96;
	public static final int COMMITTED_SYM=97;
	public static final int COMMIT_SYM=98;
	public static final int COMPACT_SYM=99;
	public static final int COMPLETION_SYM=100;
	public static final int COMPRESS=101;
	public static final int COMPRESSED_SYM=102;
	public static final int CONCAT=103;
	public static final int CONCAT_WS=104;
	public static final int CONCURRENT=105;
	public static final int CONDITION_SYM=106;
	public static final int CONNECTION_ID=107;
	public static final int CONNECTION_SYM=108;
	public static final int CONSISTENT_SYM=109;
	public static final int CONSTRAINT=110;
	public static final int CONTAINS_SYM=111;
	public static final int CONTEXT_SYM=112;
	public static final int CONTINUE_SYM=113;
	public static final int CONTRIBUTORS_SYM=114;
	public static final int CONV=115;
	public static final int CONVERT_SYM=116;
	public static final int CONVERT_TZ=117;
	public static final int COPY_SYM=118;
	public static final int COS=119;
	public static final int COT=120;
	public static final int COUNT=121;
	public static final int CP1250=122;
	public static final int CP1251=123;
	public static final int CP1256=124;
	public static final int CP1257=125;
	public static final int CP850=126;
	public static final int CP852=127;
	public static final int CP866=128;
	public static final int CP932=129;
	public static final int CPU_SYM=130;
	public static final int CRC32=131;
	public static final int CREATE=132;
	public static final int CROSECOND=133;
	public static final int CROSS=134;
	public static final int CUBE_SYM=135;
	public static final int CURDATE=136;
	public static final int CURRENT_TIMESTAMP=137;
	public static final int CURRENT_USER=138;
	public static final int CURSOR_SYM=139;
	public static final int CURTIME=140;
	public static final int C_=141;
	public static final int DATABASE=142;
	public static final int DATAFILE_SYM=143;
	public static final int DATA_SYM=144;
	public static final int DATEDIFF=145;
	public static final int DATETIME=146;
	public static final int DATE_ADD=147;
	public static final int DATE_FORMAT=148;
	public static final int DATE_SUB=149;
	public static final int DATE_SYM=150;
	public static final int DAYNAME=151;
	public static final int DAYOFMONTH=152;
	public static final int DAYOFWEEK=153;
	public static final int DAYOFYEAR=154;
	public static final int DAY_HOUR=155;
	public static final int DAY_MICROSECOND=156;
	public static final int DAY_MINUTE=157;
	public static final int DAY_SECOND=158;
	public static final int DAY_SYM=159;
	public static final int DEALLOCATE_SYM=160;
	public static final int DEC8=161;
	public static final int DECIMAL_SYM=162;
	public static final int DECLARE_SYM=163;
	public static final int DECODE=164;
	public static final int DEFAULT=165;
	public static final int DEFINER=166;
	public static final int DEGREES=167;
	public static final int DELAYED_SYM=168;
	public static final int DELAY_KEY_WRITE_SYM=169;
	public static final int DELETE_SYM=170;
	public static final int DESC=171;
	public static final int DES_DECRYPT=172;
	public static final int DES_ENCRYPT=173;
	public static final int DES_KEY_FILE=174;
	public static final int DETERMINISTIC_SYM=175;
	public static final int DIRECTORY_SYM=176;
	public static final int DISABLE_SYM=177;
	public static final int DISCARD=178;
	public static final int DISK_SYM=179;
	public static final int DISTINCT=180;
	public static final int DISTINCTROW=181;
	public static final int DIVIDE=182;
	public static final int DOT=183;
	public static final int DOUBLE_SYM=184;
	public static final int DO_SYM=185;
	public static final int DROP=186;
	public static final int DUAL_SYM=187;
	public static final int DUMPFILE=188;
	public static final int DUPLICATE_SYM=189;
	public static final int DYNAMIC_SYM=190;
	public static final int D_=191;
	public static final int EACH_SYM=192;
	public static final int ELSE_SYM=193;
	public static final int ELSIF_SYM=194;
	public static final int ELT=195;
	public static final int ENABLE_SYM=196;
	public static final int ENCLOSED=197;
	public static final int ENCODE=198;
	public static final int ENCRYPT=199;
	public static final int ENDS_SYM=200;
	public static final int END_SYM=201;
	public static final int ENGINES_SYM=202;
	public static final int ENGINE_SYM=203;
	public static final int ENUM=204;
	public static final int EQ_SYM=205;
	public static final int ERRORS=206;
	public static final int ESCAPED=207;
	public static final int ESCAPE_SYM=208;
	public static final int EUCJPMS=209;
	public static final int EUCKR=210;
	public static final int EVENTS_SYM=211;
	public static final int EVENT_SYM=212;
	public static final int EVERY_SYM=213;
	public static final int EXCHANGE_SYM=214;
	public static final int EXCLUSIVE_SYM=215;
	public static final int EXECUTE_SYM=216;
	public static final int EXISTS=217;
	public static final int EXIT_SYM=218;
	public static final int EXP=219;
	public static final int EXPANSION_SYM=220;
	public static final int EXPORT_SET=221;
	public static final int EXTENDED_SYM=222;
	public static final int EXTENT_SIZE_SYM=223;
	public static final int EXTRACT=224;
	public static final int E_=225;
	public static final int FALSE_SYM=226;
	public static final int FAST_SYM=227;
	public static final int FAULTS_SYM=228;
	public static final int FETCH_SYM=229;
	public static final int FIELD=230;
	public static final int FIELDS_SYM=231;
	public static final int FILE_SYM=232;
	public static final int FIND_IN_SET=233;
	public static final int FIRST_SYM=234;
	public static final int FIXED_SYM=235;
	public static final int FLOAT_SYM=236;
	public static final int FLOOR=237;
	public static final int FLUSH_SYM=238;
	public static final int FORCE_SYM=239;
	public static final int FOREIGN=240;
	public static final int FORMAT=241;
	public static final int FOR_SYM=242;
	public static final int FOUND_ROWS=243;
	public static final int FOUND_SYM=244;
	public static final int FROM=245;
	public static final int FROM_BASE64=246;
	public static final int FROM_DAYS=247;
	public static final int FROM_UNIXTIME=248;
	public static final int FULL=249;
	public static final int FULLTEXT_SYM=250;
	public static final int FUNCTION_SYM=251;
	public static final int F_=252;
	public static final int GB2312=253;
	public static final int GBK=254;
	public static final int GEOMETRYCOLLECTION=255;
	public static final int GEOMETRY_SYM=256;
	public static final int GEOSTD8=257;
	public static final int GET=258;
	public static final int GET_FORMAT=259;
	public static final int GET_LOCK=260;
	public static final int GLOBAL_SYM=261;
	public static final int GRANT=262;
	public static final int GRANTS=263;
	public static final int GREEK=264;
	public static final int GROUP_CONCAT=265;
	public static final int GROUP_SYM=266;
	public static final int GTH=267;
	public static final int G_=268;
	public static final int HANDLER_SYM=269;
	public static final int HASH_SYM=270;
	public static final int HAVING=271;
	public static final int HEBREW=272;
	public static final int HELP_SYM=273;
	public static final int HEX=274;
	public static final int HEX_DIGIT=275;
	public static final int HEX_DIGIT_FRAGMENT=276;
	public static final int HIGH_PRIORITY=277;
	public static final int HOSTS_SYM=278;
	public static final int HOST_SYM=279;
	public static final int HOUR=280;
	public static final int HOUR_MICROSECOND=281;
	public static final int HOUR_MINUTE=282;
	public static final int HOUR_SECOND=283;
	public static final int HP8=284;
	public static final int H_=285;
	public static final int ID=286;
	public static final int IDENTIFIED_SYM=287;
	public static final int IF=288;
	public static final int IFNULL=289;
	public static final int IGNORE_SYM=290;
	public static final int IMPORT=291;
	public static final int INDEXES=292;
	public static final int INDEX_SYM=293;
	public static final int INET_ATON=294;
	public static final int INET_NTOA=295;
	public static final int INFILE=296;
	public static final int INITIAL_SIZE_SYM=297;
	public static final int INNER_SYM=298;
	public static final int INOUT_SYM=299;
	public static final int INPLACE_SYM=300;
	public static final int INSENSITIVE_SYM=301;
	public static final int INSERT=302;
	public static final int INSERT_METHOD=303;
	public static final int INSTALL_SYM=304;
	public static final int INSTR=305;
	public static final int INTEGER_NUM=306;
	public static final int INTEGER_SYM=307;
	public static final int INTERVAL_SYM=308;
	public static final int INTO=309;
	public static final int INT_SYM=310;
	public static final int INVOKER_SYM=311;
	public static final int IN_SYM=312;
	public static final int IO_SYM=313;
	public static final int IPC_SYM=314;
	public static final int ISOLATION=315;
	public static final int ISSUER_SYM=316;
	public static final int IS_FREE_LOCK=317;
	public static final int IS_SYM=318;
	public static final int IS_USED_LOCK=319;
	public static final int ITERATE_SYM=320;
	public static final int I_=321;
	public static final int JOIN_SYM=322;
	public static final int J_=323;
	public static final int KEYBCS2=324;
	public static final int KEYS=325;
	public static final int KEY_BLOCK_SIZE=326;
	public static final int KEY_SYM=327;
	public static final int KILL_SYM=328;
	public static final int KOI8R=329;
	public static final int KOI8U=330;
	public static final int K_=331;
	public static final int LANGUAGE=332;
	public static final int LAST_DAY=333;
	public static final int LAST_INSERT_ID=334;
	public static final int LAST_SYM=335;
	public static final int LATIN1=336;
	public static final int LATIN1_BIN=337;
	public static final int LATIN1_GENERAL_CS=338;
	public static final int LATIN2=339;
	public static final int LATIN5=340;
	public static final int LATIN7=341;
	public static final int LBRACK=342;
	public static final int LEADING=343;
	public static final int LEAVES=344;
	public static final int LEAVE_SYM=345;
	public static final int LEFT=346;
	public static final int LENGTH=347;
	public static final int LESS_SYM=348;
	public static final int LET=349;
	public static final int LEVEL_SYM=350;
	public static final int LIKE_SYM=351;
	public static final int LIMIT=352;
	public static final int LINEAR_SYM=353;
	public static final int LINES=354;
	public static final int LINESTRING=355;
	public static final int LIST_SYM=356;
	public static final int LN=357;
	public static final int LOAD=358;
	public static final int LOAD_FILE=359;
	public static final int LOCAL_SYM=360;
	public static final int LOCATE=361;
	public static final int LOCK=362;
	public static final int LOCKS_SYM=363;
	public static final int LOG=364;
	public static final int LOG10=365;
	public static final int LOG2=366;
	public static final int LOGFILE_SYM=367;
	public static final int LOGS_SYM=368;
	public static final int LONGBLOB=369;
	public static final int LONGTEXT=370;
	public static final int LONG_SYM=371;
	public static final int LOOP_SYM=372;
	public static final int LOWER=373;
	public static final int LOW_PRIORITY=374;
	public static final int LPAD=375;
	public static final int LPAREN=376;
	public static final int LTH=377;
	public static final int LTRIM=378;
	public static final int L_=379;
	public static final int MACCE=380;
	public static final int MACROMAN=381;
	public static final int MAKEDATE=382;
	public static final int MAKETIME=383;
	public static final int MAKE_SET=384;
	public static final int MASTER_CONNECT_RETRY=385;
	public static final int MASTER_HOST_SYM=386;
	public static final int MASTER_LOG_FILE_SYM=387;
	public static final int MASTER_LOG_POS_SYM=388;
	public static final int MASTER_PASSWORD_SYM=389;
	public static final int MASTER_PORT_SYM=390;
	public static final int MASTER_POS_WAIT=391;
	public static final int MASTER_SERVER_ID_SYM=392;
	public static final int MASTER_SSL_CAPATH_SYM=393;
	public static final int MASTER_SSL_CA_SYM=394;
	public static final int MASTER_SSL_CERT_SYM=395;
	public static final int MASTER_SSL_CIPHER_SYM=396;
	public static final int MASTER_SSL_KEY_SYM=397;
	public static final int MASTER_SSL_SYM=398;
	public static final int MASTER_SSL_VERIFY_SERVER_CERT=399;
	public static final int MASTER_SYM=400;
	public static final int MASTER_USER_SYM=401;
	public static final int MATCH=402;
	public static final int MAXVALUE_SYM=403;
	public static final int MAX_CONNECTIONS_PER_HOUR=404;
	public static final int MAX_QUERIES_PER_HOUR=405;
	public static final int MAX_ROWS=406;
	public static final int MAX_SIZE_SYM=407;
	public static final int MAX_SYM=408;
	public static final int MAX_UPDATES_PER_HOUR=409;
	public static final int MAX_USER_CONNECTIONS_SYM=410;
	public static final int MD5=411;
	public static final int MEDIUMBLOB=412;
	public static final int MEDIUMINT=413;
	public static final int MEDIUMTEXT=414;
	public static final int MEDIUM_SYM=415;
	public static final int MEMORY_SYM=416;
	public static final int MERGE_SYM=417;
	public static final int MICROSECOND=418;
	public static final int MID=419;
	public static final int MIGRATE_SYM=420;
	public static final int MINUS=421;
	public static final int MINUTE=422;
	public static final int MINUTE_MICROSECOND=423;
	public static final int MINUTE_SECOND=424;
	public static final int MIN_ROWS=425;
	public static final int MIN_SYM=426;
	public static final int ML_COMMENT=427;
	public static final int MOD=428;
	public static final int MODE_SYM=429;
	public static final int MODIFIES_SYM=430;
	public static final int MODIFY_SYM=431;
	public static final int MOD_SYM=432;
	public static final int MONTH=433;
	public static final int MONTHNAME=434;
	public static final int MULTILINESTRING=435;
	public static final int MULTIPOINT=436;
	public static final int MULTIPOLYGON=437;
	public static final int MUTEX_SYM=438;
	public static final int M_=439;
	public static final int NAMES_SYM=440;
	public static final int NAME_CONST=441;
	public static final int NAME_SYM=442;
	public static final int NATIONAL_SYM=443;
	public static final int NATURAL=444;
	public static final int NCHAR_SYM=445;
	public static final int NEGATION=446;
	public static final int NEW_SYM=447;
	public static final int NEXT_SYM=448;
	public static final int NODEGROUP_SYM=449;
	public static final int NONE_SYM=450;
	public static final int NOT_EQ=451;
	public static final int NOT_SYM=452;
	public static final int NOW=453;
	public static final int NO_SYM=454;
	public static final int NO_WAIT_SYM=455;
	public static final int NO_WRITE_TO_BINLOG=456;
	public static final int NULL_SYM=457;
	public static final int NUMERIC_SYM=458;
	public static final int NVARCHAR_SYM=459;
	public static final int N_=460;
	public static final int OCT=461;
	public static final int OFFSET_SYM=462;
	public static final int OJ_SYM=463;
	public static final int OLD_PASSWORD=464;
	public static final int ON=465;
	public static final int ONE_SHOT_SYM=466;
	public static final int ONE_SYM=467;
	public static final int OPEN_SYM=468;
	public static final int OPTIMIZE=469;
	public static final int OPTION=470;
	public static final int OPTIONALLY=471;
	public static final int OPTIONS_SYM=472;
	public static final int ORD=473;
	public static final int ORDER_SYM=474;
	public static final int OR_SYM=475;
	public static final int OUTER=476;
	public static final int OUTFILE=477;
	public static final int OUT_SYM=478;
	public static final int OWNER_SYM=479;
	public static final int O_=480;
	public static final int PACK_KEYS_SYM=481;
	public static final int PAGE_CHECKSUM_SYM=482;
	public static final int PAGE_SYM=483;
	public static final int PARSER_SYM=484;
	public static final int PARTIAL=485;
	public static final int PARTITIONING_SYM=486;
	public static final int PARTITIONS_SYM=487;
	public static final int PARTITION_SYM=488;
	public static final int PASSWORD=489;
	public static final int PERIOD_ADD=490;
	public static final int PERIOD_DIFF=491;
	public static final int PHASE_SYM=492;
	public static final int PI=493;
	public static final int PLUGINS_SYM=494;
	public static final int PLUGIN_SYM=495;
	public static final int PLUS=496;
	public static final int POINT_SYM=497;
	public static final int POLYGON=498;
	public static final int PORT_SYM=499;
	public static final int POW=500;
	public static final int POWER=501;
	public static final int POWER_OP=502;
	public static final int PRECISION=503;
	public static final int PREPARE_SYM=504;
	public static final int PRESERVE_SYM=505;
	public static final int PREV_SYM=506;
	public static final int PRIMARY_SYM=507;
	public static final int PRIVILEGES=508;
	public static final int PROCEDURE=509;
	public static final int PROCESS=510;
	public static final int PROCESSLIST_SYM=511;
	public static final int PROFILES_SYM=512;
	public static final int PROFILE_SYM=513;
	public static final int PURGE=514;
	public static final int P_=515;
	public static final int QUARTER=516;
	public static final int QUERY_SYM=517;
	public static final int QUICK=518;
	public static final int QUOTE=519;
	public static final int Q_=520;
	public static final int RADIANS=521;
	public static final int RAND=522;
	public static final int RANGE_SYM=523;
	public static final int RBRACK=524;
	public static final int READS_SYM=525;
	public static final int READ_ONLY_SYM=526;
	public static final int READ_SYM=527;
	public static final int READ_WRITE_SYM=528;
	public static final int REAL=529;
	public static final int REAL_NUMBER=530;
	public static final int REBUILD_SYM=531;
	public static final int RECOVER_SYM=532;
	public static final int REDOFILE_SYM=533;
	public static final int REDO_BUFFER_SIZE_SYM=534;
	public static final int REDUNDANT_SYM=535;
	public static final int REFERENCES=536;
	public static final int REGEXP=537;
	public static final int RELAY_LOG_FILE_SYM=538;
	public static final int RELAY_LOG_POS_SYM=539;
	public static final int RELEASE_LOCK=540;
	public static final int RELEASE_SYM=541;
	public static final int RELOAD=542;
	public static final int REMOVE_SYM=543;
	public static final int RENAME=544;
	public static final int REORGANIZE_SYM=545;
	public static final int REPAIR=546;
	public static final int REPEAT=547;
	public static final int REPEATABLE_SYM=548;
	public static final int REPLACE=549;
	public static final int REPLICATION=550;
	public static final int REQUIRE_SYM=551;
	public static final int RESET_SYM=552;
	public static final int RESOURCES=553;
	public static final int RESTORE_SYM=554;
	public static final int RESTRICT=555;
	public static final int RESUME_SYM=556;
	public static final int RETURNS_SYM=557;
	public static final int RETURN_SYM=558;
	public static final int REVERSE=559;
	public static final int REVOKE=560;
	public static final int RIGHT=561;
	public static final int ROLLBACK=562;
	public static final int ROLLUP_SYM=563;
	public static final int ROUND=564;
	public static final int ROUTINE_SYM=565;
	public static final int ROWS_SYM=566;
	public static final int ROW_FORMAT_SYM=567;
	public static final int ROW_SYM=568;
	public static final int RPAD=569;
	public static final int RPAREN=570;
	public static final int RTREE_SYM=571;
	public static final int RTRIM=572;
	public static final int R_=573;
	public static final int SAVEPOINT=574;
	public static final int SCHEDULE_SYM=575;
	public static final int SCHEMA=576;
	public static final int SECOND=577;
	public static final int SECOND_MICROSECOND=578;
	public static final int SECURITY_SYM=579;
	public static final int SEC_TO_TIME=580;
	public static final int SELECT=581;
	public static final int SEMI=582;
	public static final int SENSITIVE_SYM=583;
	public static final int SEPARATOR_SYM=584;
	public static final int SERIALIZABLE_SYM=585;
	public static final int SERIAL_SYM=586;
	public static final int SERVER_SYM=587;
	public static final int SESSION_SYM=588;
	public static final int SESSION_USER=589;
	public static final int SET_SYM=590;
	public static final int SET_VAR=591;
	public static final int SHARED_SYM=592;
	public static final int SHARE_SYM=593;
	public static final int SHIFT_LEFT=594;
	public static final int SHIFT_RIGHT=595;
	public static final int SHOW=596;
	public static final int SHUTDOWN=597;
	public static final int SIGN=598;
	public static final int SIGNED_SYM=599;
	public static final int SIMPLE_SYM=600;
	public static final int SIN=601;
	public static final int SJIS=602;
	public static final int SLAVE=603;
	public static final int SLEEP=604;
	public static final int SL_COMMENT=605;
	public static final int SMALLINT=606;
	public static final int SNAPSHOT_SYM=607;
	public static final int SOCKET_SYM=608;
	public static final int SONAME_SYM=609;
	public static final int SOUNDEX=610;
	public static final int SOUNDS_SYM=611;
	public static final int SOURCE_SYM=612;
	public static final int SPACE=613;
	public static final int SPATIAL_SYM=614;
	public static final int SPECIFIC_SYM=615;
	public static final int SQLEXCEPTION_SYM=616;
	public static final int SQLSTATE_SYM=617;
	public static final int SQLWARNING_SYM=618;
	public static final int SQL_BIG_RESULT=619;
	public static final int SQL_BUFFER_RESULT=620;
	public static final int SQL_CACHE_SYM=621;
	public static final int SQL_CALC_FOUND_ROWS=622;
	public static final int SQL_NO_CACHE_SYM=623;
	public static final int SQL_SMALL_RESULT=624;
	public static final int SQL_SYM=625;
	public static final int SQL_THREAD=626;
	public static final int SQRT=627;
	public static final int SSL_SYM=628;
	public static final int STARTING=629;
	public static final int STARTS_SYM=630;
	public static final int START_SYM=631;
	public static final int STATS_AUTO_RECALC=632;
	public static final int STATS_PERSISTENT=633;
	public static final int STATUS_SYM=634;
	public static final int STD=635;
	public static final int STDDEV=636;
	public static final int STDDEV_POP=637;
	public static final int STDDEV_SAMP=638;
	public static final int STOP_SYM=639;
	public static final int STORAGE_SYM=640;
	public static final int STRAIGHT_JOIN=641;
	public static final int STRCMP=642;
	public static final int STRING_SYM=643;
	public static final int STR_TO_DATE=644;
	public static final int SUBJECT_SYM=645;
	public static final int SUBPARTITIONS_SYM=646;
	public static final int SUBPARTITION_SYM=647;
	public static final int SUBSTRING=648;
	public static final int SUBSTRING_INDEX=649;
	public static final int SUBTIME=650;
	public static final int SUM=651;
	public static final int SUPER_SYM=652;
	public static final int SUSPEND_SYM=653;
	public static final int SWAPS_SYM=654;
	public static final int SWE7=655;
	public static final int SWITCHES_SYM=656;
	public static final int SYSDATE=657;
	public static final int SYSTEM_USER=658;
	public static final int S_=659;
	public static final int TABLE=660;
	public static final int TABLES=661;
	public static final int TABLESPACE=662;
	public static final int TABLE_CHECKSUM_SYM=663;
	public static final int TAN=664;
	public static final int TEMPORARY=665;
	public static final int TEMPTABLE_SYM=666;
	public static final int TERMINATED=667;
	public static final int TEXT_STRING=668;
	public static final int TEXT_SYM=669;
	public static final int THAN_SYM=670;
	public static final int THEN_SYM=671;
	public static final int TIMEDIFF=672;
	public static final int TIMESTAMP=673;
	public static final int TIMESTAMPADD=674;
	public static final int TIMESTAMPDIFF=675;
	public static final int TIME_FORMAT=676;
	public static final int TIME_SYM=677;
	public static final int TIME_TO_SEC=678;
	public static final int TINYBLOB=679;
	public static final int TINYINT=680;
	public static final int TINYTEXT=681;
	public static final int TIS620=682;
	public static final int TO_BASE64=683;
	public static final int TO_DAYS=684;
	public static final int TO_SECONDS=685;
	public static final int TO_SYM=686;
	public static final int TRAILING=687;
	public static final int TRANSACTION=688;
	public static final int TRANSACTIONAL_SYM=689;
	public static final int TRIGGERS_SYM=690;
	public static final int TRIGGER_SYM=691;
	public static final int TRIM=692;
	public static final int TRUE_SYM=693;
	public static final int TRUNCATE=694;
	public static final int TYPES_SYM=695;
	public static final int TYPE_SYM=696;
	public static final int T_=697;
	public static final int UCS2=698;
	public static final int UJIS=699;
	public static final int UNCOMMITTED_SYM=700;
	public static final int UNCOMPRESS=701;
	public static final int UNCOMPRESSED_LENGTH=702;
	public static final int UNDEFINED_SYM=703;
	public static final int UNDOFILE_SYM=704;
	public static final int UNDO_BUFFER_SIZE_SYM=705;
	public static final int UNDO_SYM=706;
	public static final int UNHEX=707;
	public static final int UNICODE_SYM=708;
	public static final int UNINSTALL_SYM=709;
	public static final int UNION_SYM=710;
	public static final int UNIQUE_SYM=711;
	public static final int UNIX_TIMESTAMP=712;
	public static final int UNKNOWN_SYM=713;
	public static final int UNLOCK_SYM=714;
	public static final int UNSIGNED_SYM=715;
	public static final int UNTIL_SYM=716;
	public static final int UPDATE=717;
	public static final int UPGRADE_SYM=718;
	public static final int UPPER=719;
	public static final int USAGE=720;
	public static final int USER=721;
	public static final int USER_VAR=722;
	public static final int USER_VAR_SUBFIX1=723;
	public static final int USER_VAR_SUBFIX2=724;
	public static final int USER_VAR_SUBFIX3=725;
	public static final int USER_VAR_SUBFIX4=726;
	public static final int USE_FRM=727;
	public static final int USE_SYM=728;
	public static final int USING_SYM=729;
	public static final int UTC_DATE=730;
	public static final int UTC_TIME=731;
	public static final int UTC_TIMESTAMP=732;
	public static final int UTF16=733;
	public static final int UTF16LE=734;
	public static final int UTF32=735;
	public static final int UTF8=736;
	public static final int UUID=737;
	public static final int U_=738;
	public static final int VALUES=739;
	public static final int VALUE_SYM=740;
	public static final int VARBINARY=741;
	public static final int VARCHAR=742;
	public static final int VARIABLES=743;
	public static final int VARIANCE=744;
	public static final int VARYING=745;
	public static final int VAR_POP=746;
	public static final int VAR_SAMP=747;
	public static final int VERSION_SYM=748;
	public static final int VERTBAR=749;
	public static final int VIEW_SYM=750;
	public static final int V_=751;
	public static final int WAIT_SYM=752;
	public static final int WARNINGS=753;
	public static final int WEEK=754;
	public static final int WEEKDAY=755;
	public static final int WEEKOFYEAR=756;
	public static final int WEIGHT_STRING=757;
	public static final int WHEN_SYM=758;
	public static final int WHERE=759;
	public static final int WHILE_SYM=760;
	public static final int WHITE_SPACE=761;
	public static final int WITH=762;
	public static final int WORK_SYM=763;
	public static final int WRAPPER_SYM=764;
	public static final int WRITE_SYM=765;
	public static final int W_=766;
	public static final int X509_SYM=767;
	public static final int XA_SYM=768;
	public static final int XML_SYM=769;
	public static final int XOR=770;
	public static final int X_=771;
	public static final int YEAR=772;
	public static final int YEARWEEK=773;
	public static final int YEAR_MONTH=774;
	public static final int Y_=775;
	public static final int ZEROFILL=776;
	public static final int Z_=777;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public MySQLParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public MySQLParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return MySQLParser.tokenNames; }
	@Override public String getGrammarFileName() { return "MySQL.g"; }





	public static class relational_op_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relational_op"
	// MySQL.g:922:1: relational_op : ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET );
	public final MySQLParser.relational_op_return relational_op() throws RecognitionException {
		MySQLParser.relational_op_return retval = new MySQLParser.relational_op_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set1=null;

		Object set1_tree=null;

		try {
			// MySQL.g:922:14: ( EQ_SYM | LTH | GTH | NOT_EQ | LET | GET )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set1=input.LT(1);
			if ( input.LA(1)==EQ_SYM||input.LA(1)==GET||input.LA(1)==GTH||input.LA(1)==LET||input.LA(1)==LTH||input.LA(1)==NOT_EQ ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relational_op"


	public static class charset_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "charset_name"
	// MySQL.g:925:1: charset_name : ( ARMSCII8 | ASCII_SYM | BIG5 | BINARY | CP1250 | CP1251 | CP1256 | CP1257 | CP850 | CP852 | CP866 | CP932 | DEC8 | EUCJPMS | EUCKR | GB2312 | GBK | GEOSTD8 | GREEK | HEBREW | HP8 | KEYBCS2 | KOI8R | KOI8U | LATIN1 | LATIN2 | LATIN5 | LATIN7 | MACCE | MACROMAN | SJIS | SWE7 | TIS620 | UCS2 | UJIS | UTF8 );
	public final MySQLParser.charset_name_return charset_name() throws RecognitionException {
		MySQLParser.charset_name_return retval = new MySQLParser.charset_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set2=null;

		Object set2_tree=null;

		try {
			// MySQL.g:925:13: ( ARMSCII8 | ASCII_SYM | BIG5 | BINARY | CP1250 | CP1251 | CP1256 | CP1257 | CP850 | CP852 | CP866 | CP932 | DEC8 | EUCJPMS | EUCKR | GB2312 | GBK | GEOSTD8 | GREEK | HEBREW | HP8 | KEYBCS2 | KOI8R | KOI8U | LATIN1 | LATIN2 | LATIN5 | LATIN7 | MACCE | MACROMAN | SJIS | SWE7 | TIS620 | UCS2 | UJIS | UTF8 )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set2=input.LT(1);
			if ( input.LA(1)==ARMSCII8||input.LA(1)==ASCII_SYM||input.LA(1)==BIG5||input.LA(1)==BINARY||(input.LA(1) >= CP1250 && input.LA(1) <= CP932)||input.LA(1)==DEC8||(input.LA(1) >= EUCJPMS && input.LA(1) <= EUCKR)||(input.LA(1) >= GB2312 && input.LA(1) <= GBK)||input.LA(1)==GEOSTD8||input.LA(1)==GREEK||input.LA(1)==HEBREW||input.LA(1)==HP8||input.LA(1)==KEYBCS2||(input.LA(1) >= KOI8R && input.LA(1) <= KOI8U)||input.LA(1)==LATIN1||(input.LA(1) >= LATIN2 && input.LA(1) <= LATIN7)||(input.LA(1) >= MACCE && input.LA(1) <= MACROMAN)||input.LA(1)==SJIS||input.LA(1)==SWE7||input.LA(1)==TIS620||(input.LA(1) >= UCS2 && input.LA(1) <= UJIS)||input.LA(1)==UTF8 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set2));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "charset_name"


	public static class cast_data_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "cast_data_type"
	// MySQL.g:963:1: cast_data_type : ( BINARY ( INTEGER_NUM )? | CHAR ( INTEGER_NUM )? | DATE_SYM | DATETIME | DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )? | SIGNED_SYM ( INTEGER_SYM )? | TIME_SYM | UNSIGNED_SYM ( INTEGER_SYM )? );
	public final MySQLParser.cast_data_type_return cast_data_type() throws RecognitionException {
		MySQLParser.cast_data_type_return retval = new MySQLParser.cast_data_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BINARY3=null;
		Token INTEGER_NUM4=null;
		Token CHAR5=null;
		Token INTEGER_NUM6=null;
		Token DATE_SYM7=null;
		Token DATETIME8=null;
		Token DECIMAL_SYM9=null;
		Token INTEGER_NUM10=null;
		Token COMMA11=null;
		Token INTEGER_NUM12=null;
		Token SIGNED_SYM13=null;
		Token INTEGER_SYM14=null;
		Token TIME_SYM15=null;
		Token UNSIGNED_SYM16=null;
		Token INTEGER_SYM17=null;

		Object BINARY3_tree=null;
		Object INTEGER_NUM4_tree=null;
		Object CHAR5_tree=null;
		Object INTEGER_NUM6_tree=null;
		Object DATE_SYM7_tree=null;
		Object DATETIME8_tree=null;
		Object DECIMAL_SYM9_tree=null;
		Object INTEGER_NUM10_tree=null;
		Object COMMA11_tree=null;
		Object INTEGER_NUM12_tree=null;
		Object SIGNED_SYM13_tree=null;
		Object INTEGER_SYM14_tree=null;
		Object TIME_SYM15_tree=null;
		Object UNSIGNED_SYM16_tree=null;
		Object INTEGER_SYM17_tree=null;

		try {
			// MySQL.g:963:15: ( BINARY ( INTEGER_NUM )? | CHAR ( INTEGER_NUM )? | DATE_SYM | DATETIME | DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )? | SIGNED_SYM ( INTEGER_SYM )? | TIME_SYM | UNSIGNED_SYM ( INTEGER_SYM )? )
			int alt7=8;
			switch ( input.LA(1) ) {
			case BINARY:
				{
				alt7=1;
				}
				break;
			case CHAR:
				{
				alt7=2;
				}
				break;
			case DATE_SYM:
				{
				alt7=3;
				}
				break;
			case DATETIME:
				{
				alt7=4;
				}
				break;
			case DECIMAL_SYM:
				{
				alt7=5;
				}
				break;
			case SIGNED_SYM:
				{
				alt7=6;
				}
				break;
			case TIME_SYM:
				{
				alt7=7;
				}
				break;
			case UNSIGNED_SYM:
				{
				alt7=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 7, 0, input);
				throw nvae;
			}
			switch (alt7) {
				case 1 :
					// MySQL.g:964:2: BINARY ( INTEGER_NUM )?
					{
					root_0 = (Object)adaptor.nil();


					BINARY3=(Token)match(input,BINARY,FOLLOW_BINARY_in_cast_data_type18582); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BINARY3_tree = (Object)adaptor.create(BINARY3);
					adaptor.addChild(root_0, BINARY3_tree);
					}

					// MySQL.g:964:9: ( INTEGER_NUM )?
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==INTEGER_NUM) ) {
						alt1=1;
					}
					switch (alt1) {
						case 1 :
							// MySQL.g:964:10: INTEGER_NUM
							{
							INTEGER_NUM4=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type18585); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM4_tree = (Object)adaptor.create(INTEGER_NUM4);
							adaptor.addChild(root_0, INTEGER_NUM4_tree);
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// MySQL.g:965:4: CHAR ( INTEGER_NUM )?
					{
					root_0 = (Object)adaptor.nil();


					CHAR5=(Token)match(input,CHAR,FOLLOW_CHAR_in_cast_data_type18593); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHAR5_tree = (Object)adaptor.create(CHAR5);
					adaptor.addChild(root_0, CHAR5_tree);
					}

					// MySQL.g:965:9: ( INTEGER_NUM )?
					int alt2=2;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==INTEGER_NUM) ) {
						alt2=1;
					}
					switch (alt2) {
						case 1 :
							// MySQL.g:965:10: INTEGER_NUM
							{
							INTEGER_NUM6=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type18596); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM6_tree = (Object)adaptor.create(INTEGER_NUM6);
							adaptor.addChild(root_0, INTEGER_NUM6_tree);
							}

							}
							break;

					}

					}
					break;
				case 3 :
					// MySQL.g:966:4: DATE_SYM
					{
					root_0 = (Object)adaptor.nil();


					DATE_SYM7=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_cast_data_type18604); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATE_SYM7_tree = (Object)adaptor.create(DATE_SYM7);
					adaptor.addChild(root_0, DATE_SYM7_tree);
					}

					}
					break;
				case 4 :
					// MySQL.g:967:4: DATETIME
					{
					root_0 = (Object)adaptor.nil();


					DATETIME8=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_cast_data_type18609); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATETIME8_tree = (Object)adaptor.create(DATETIME8);
					adaptor.addChild(root_0, DATETIME8_tree);
					}

					}
					break;
				case 5 :
					// MySQL.g:968:4: DECIMAL_SYM ( INTEGER_NUM ( COMMA INTEGER_NUM )? )?
					{
					root_0 = (Object)adaptor.nil();


					DECIMAL_SYM9=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_cast_data_type18615); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DECIMAL_SYM9_tree = (Object)adaptor.create(DECIMAL_SYM9);
					adaptor.addChild(root_0, DECIMAL_SYM9_tree);
					}

					// MySQL.g:968:16: ( INTEGER_NUM ( COMMA INTEGER_NUM )? )?
					int alt4=2;
					int LA4_0 = input.LA(1);
					if ( (LA4_0==INTEGER_NUM) ) {
						alt4=1;
					}
					switch (alt4) {
						case 1 :
							// MySQL.g:968:18: INTEGER_NUM ( COMMA INTEGER_NUM )?
							{
							INTEGER_NUM10=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type18619); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM10_tree = (Object)adaptor.create(INTEGER_NUM10);
							adaptor.addChild(root_0, INTEGER_NUM10_tree);
							}

							// MySQL.g:968:30: ( COMMA INTEGER_NUM )?
							int alt3=2;
							int LA3_0 = input.LA(1);
							if ( (LA3_0==COMMA) ) {
								alt3=1;
							}
							switch (alt3) {
								case 1 :
									// MySQL.g:968:31: COMMA INTEGER_NUM
									{
									COMMA11=(Token)match(input,COMMA,FOLLOW_COMMA_in_cast_data_type18622); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA11_tree = (Object)adaptor.create(COMMA11);
									adaptor.addChild(root_0, COMMA11_tree);
									}

									INTEGER_NUM12=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_cast_data_type18624); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTEGER_NUM12_tree = (Object)adaptor.create(INTEGER_NUM12);
									adaptor.addChild(root_0, INTEGER_NUM12_tree);
									}

									}
									break;

							}

							}
							break;

					}

					}
					break;
				case 6 :
					// MySQL.g:969:4: SIGNED_SYM ( INTEGER_SYM )?
					{
					root_0 = (Object)adaptor.nil();


					SIGNED_SYM13=(Token)match(input,SIGNED_SYM,FOLLOW_SIGNED_SYM_in_cast_data_type18634); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIGNED_SYM13_tree = (Object)adaptor.create(SIGNED_SYM13);
					adaptor.addChild(root_0, SIGNED_SYM13_tree);
					}

					// MySQL.g:969:15: ( INTEGER_SYM )?
					int alt5=2;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==INTEGER_SYM) ) {
						alt5=1;
					}
					switch (alt5) {
						case 1 :
							// MySQL.g:969:16: INTEGER_SYM
							{
							INTEGER_SYM14=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_cast_data_type18637); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_SYM14_tree = (Object)adaptor.create(INTEGER_SYM14);
							adaptor.addChild(root_0, INTEGER_SYM14_tree);
							}

							}
							break;

					}

					}
					break;
				case 7 :
					// MySQL.g:970:4: TIME_SYM
					{
					root_0 = (Object)adaptor.nil();


					TIME_SYM15=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_cast_data_type18644); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIME_SYM15_tree = (Object)adaptor.create(TIME_SYM15);
					adaptor.addChild(root_0, TIME_SYM15_tree);
					}

					}
					break;
				case 8 :
					// MySQL.g:971:4: UNSIGNED_SYM ( INTEGER_SYM )?
					{
					root_0 = (Object)adaptor.nil();


					UNSIGNED_SYM16=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_cast_data_type18649); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_SYM16_tree = (Object)adaptor.create(UNSIGNED_SYM16);
					adaptor.addChild(root_0, UNSIGNED_SYM16_tree);
					}

					// MySQL.g:971:17: ( INTEGER_SYM )?
					int alt6=2;
					int LA6_0 = input.LA(1);
					if ( (LA6_0==INTEGER_SYM) ) {
						alt6=1;
					}
					switch (alt6) {
						case 1 :
							// MySQL.g:971:18: INTEGER_SYM
							{
							INTEGER_SYM17=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_cast_data_type18652); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_SYM17_tree = (Object)adaptor.create(INTEGER_SYM17);
							adaptor.addChild(root_0, INTEGER_SYM17_tree);
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cast_data_type"


	public static class search_modifier_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "search_modifier"
	// MySQL.g:974:1: search_modifier : ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) | ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) | ( IN_SYM BOOLEAN_SYM MODE_SYM ) | ( WITH QUERY_SYM EXPANSION_SYM ) );
	public final MySQLParser.search_modifier_return search_modifier() throws RecognitionException {
		MySQLParser.search_modifier_return retval = new MySQLParser.search_modifier_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token IN_SYM18=null;
		Token NATURAL19=null;
		Token LANGUAGE20=null;
		Token MODE_SYM21=null;
		Token IN_SYM22=null;
		Token NATURAL23=null;
		Token LANGUAGE24=null;
		Token MODE_SYM25=null;
		Token WITH26=null;
		Token QUERY_SYM27=null;
		Token EXPANSION_SYM28=null;
		Token IN_SYM29=null;
		Token BOOLEAN_SYM30=null;
		Token MODE_SYM31=null;
		Token WITH32=null;
		Token QUERY_SYM33=null;
		Token EXPANSION_SYM34=null;

		Object IN_SYM18_tree=null;
		Object NATURAL19_tree=null;
		Object LANGUAGE20_tree=null;
		Object MODE_SYM21_tree=null;
		Object IN_SYM22_tree=null;
		Object NATURAL23_tree=null;
		Object LANGUAGE24_tree=null;
		Object MODE_SYM25_tree=null;
		Object WITH26_tree=null;
		Object QUERY_SYM27_tree=null;
		Object EXPANSION_SYM28_tree=null;
		Object IN_SYM29_tree=null;
		Object BOOLEAN_SYM30_tree=null;
		Object MODE_SYM31_tree=null;
		Object WITH32_tree=null;
		Object QUERY_SYM33_tree=null;
		Object EXPANSION_SYM34_tree=null;

		try {
			// MySQL.g:974:16: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) | ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) | ( IN_SYM BOOLEAN_SYM MODE_SYM ) | ( WITH QUERY_SYM EXPANSION_SYM ) )
			int alt8=4;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==IN_SYM) ) {
				int LA8_1 = input.LA(2);
				if ( (LA8_1==NATURAL) ) {
					int LA8_3 = input.LA(3);
					if ( (LA8_3==LANGUAGE) ) {
						int LA8_5 = input.LA(4);
						if ( (LA8_5==MODE_SYM) ) {
							int LA8_6 = input.LA(5);
							if ( (LA8_6==WITH) ) {
								int LA8_7 = input.LA(6);
								if ( (LA8_7==QUERY_SYM) ) {
									int LA8_9 = input.LA(7);
									if ( (LA8_9==EXPANSION_SYM) ) {
										int LA8_10 = input.LA(8);
										if ( (synpred54_MySQL()) ) {
											alt8=1;
										}
										else if ( (synpred55_MySQL()) ) {
											alt8=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 8, 10, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 8, 9, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}
								else if ( (LA8_7==CASCADED||LA8_7==CHECK_SYM||LA8_7==LOCAL_SYM||LA8_7==ROLLUP_SYM) ) {
									alt8=1;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 8, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}
							else if ( (LA8_6==EOF||LA8_6==AND_SYM||LA8_6==ASC||(LA8_6 >= ASTERISK && LA8_6 <= AS_SYM)||LA8_6==BETWEEN||LA8_6==BITAND||LA8_6==COLLATE_SYM||LA8_6==COMMA||LA8_6==CROSS||(LA8_6 >= DAY_HOUR && LA8_6 <= DAY_SYM)||LA8_6==DESC||LA8_6==DIVIDE||LA8_6==ELSE_SYM||LA8_6==END_SYM||LA8_6==EQ_SYM||LA8_6==ESCAPE_SYM||LA8_6==FOR_SYM||LA8_6==FROM||LA8_6==GET||(LA8_6 >= GROUP_SYM && LA8_6 <= GTH)||LA8_6==HAVING||(LA8_6 >= HOUR && LA8_6 <= HOUR_SECOND)||LA8_6==ID||LA8_6==INNER_SYM||LA8_6==INTEGER_NUM||LA8_6==IN_SYM||LA8_6==IS_SYM||LA8_6==JOIN_SYM||LA8_6==LEFT||LA8_6==LET||(LA8_6 >= LIKE_SYM && LA8_6 <= LIMIT)||LA8_6==LOCK||LA8_6==LTH||(LA8_6 >= MINUS && LA8_6 <= MINUTE_SECOND)||(LA8_6 >= MOD_SYM && LA8_6 <= MONTH)||LA8_6==NATURAL||(LA8_6 >= NOT_EQ && LA8_6 <= NOT_SYM)||LA8_6==ON||(LA8_6 >= ORDER_SYM && LA8_6 <= OR_SYM)||LA8_6==PARTITION_SYM||LA8_6==PLUS||LA8_6==POWER_OP||LA8_6==QUARTER||LA8_6==REGEXP||LA8_6==RIGHT||LA8_6==RPAREN||(LA8_6 >= SECOND && LA8_6 <= SECOND_MICROSECOND)||LA8_6==SEMI||LA8_6==SET_SYM||(LA8_6 >= SHIFT_LEFT && LA8_6 <= SHIFT_RIGHT)||LA8_6==SOUNDS_SYM||LA8_6==STRAIGHT_JOIN||LA8_6==THEN_SYM||LA8_6==UNION_SYM||LA8_6==USING_SYM||LA8_6==VERTBAR||LA8_6==WEEK||(LA8_6 >= WHEN_SYM && LA8_6 <= WHERE)||LA8_6==XOR||LA8_6==YEAR||LA8_6==YEAR_MONTH) ) {
								alt8=1;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 8, 6, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 8, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 8, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA8_1==BOOLEAN_SYM) ) {
					alt8=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA8_0==WITH) ) {
				alt8=4;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}

			switch (alt8) {
				case 1 :
					// MySQL.g:975:2: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:975:2: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
					// MySQL.g:975:3: IN_SYM NATURAL LANGUAGE MODE_SYM
					{
					IN_SYM18=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier18665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM18_tree = (Object)adaptor.create(IN_SYM18);
					adaptor.addChild(root_0, IN_SYM18_tree);
					}

					NATURAL19=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_search_modifier18667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL19_tree = (Object)adaptor.create(NATURAL19);
					adaptor.addChild(root_0, NATURAL19_tree);
					}

					LANGUAGE20=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_search_modifier18669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LANGUAGE20_tree = (Object)adaptor.create(LANGUAGE20);
					adaptor.addChild(root_0, LANGUAGE20_tree);
					}

					MODE_SYM21=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier18671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM21_tree = (Object)adaptor.create(MODE_SYM21);
					adaptor.addChild(root_0, MODE_SYM21_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:976:4: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:976:4: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
					// MySQL.g:976:5: IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM
					{
					IN_SYM22=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier18678); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM22_tree = (Object)adaptor.create(IN_SYM22);
					adaptor.addChild(root_0, IN_SYM22_tree);
					}

					NATURAL23=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_search_modifier18680); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL23_tree = (Object)adaptor.create(NATURAL23);
					adaptor.addChild(root_0, NATURAL23_tree);
					}

					LANGUAGE24=(Token)match(input,LANGUAGE,FOLLOW_LANGUAGE_in_search_modifier18682); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LANGUAGE24_tree = (Object)adaptor.create(LANGUAGE24);
					adaptor.addChild(root_0, LANGUAGE24_tree);
					}

					MODE_SYM25=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier18684); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM25_tree = (Object)adaptor.create(MODE_SYM25);
					adaptor.addChild(root_0, MODE_SYM25_tree);
					}

					WITH26=(Token)match(input,WITH,FOLLOW_WITH_in_search_modifier18686); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH26_tree = (Object)adaptor.create(WITH26);
					adaptor.addChild(root_0, WITH26_tree);
					}

					QUERY_SYM27=(Token)match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_search_modifier18688); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUERY_SYM27_tree = (Object)adaptor.create(QUERY_SYM27);
					adaptor.addChild(root_0, QUERY_SYM27_tree);
					}

					EXPANSION_SYM28=(Token)match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_search_modifier18690); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPANSION_SYM28_tree = (Object)adaptor.create(EXPANSION_SYM28);
					adaptor.addChild(root_0, EXPANSION_SYM28_tree);
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:977:4: ( IN_SYM BOOLEAN_SYM MODE_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:977:4: ( IN_SYM BOOLEAN_SYM MODE_SYM )
					// MySQL.g:977:5: IN_SYM BOOLEAN_SYM MODE_SYM
					{
					IN_SYM29=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_search_modifier18697); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM29_tree = (Object)adaptor.create(IN_SYM29);
					adaptor.addChild(root_0, IN_SYM29_tree);
					}

					BOOLEAN_SYM30=(Token)match(input,BOOLEAN_SYM,FOLLOW_BOOLEAN_SYM_in_search_modifier18699); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOOLEAN_SYM30_tree = (Object)adaptor.create(BOOLEAN_SYM30);
					adaptor.addChild(root_0, BOOLEAN_SYM30_tree);
					}

					MODE_SYM31=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_search_modifier18701); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM31_tree = (Object)adaptor.create(MODE_SYM31);
					adaptor.addChild(root_0, MODE_SYM31_tree);
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:978:4: ( WITH QUERY_SYM EXPANSION_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:978:4: ( WITH QUERY_SYM EXPANSION_SYM )
					// MySQL.g:978:5: WITH QUERY_SYM EXPANSION_SYM
					{
					WITH32=(Token)match(input,WITH,FOLLOW_WITH_in_search_modifier18708); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH32_tree = (Object)adaptor.create(WITH32);
					adaptor.addChild(root_0, WITH32_tree);
					}

					QUERY_SYM33=(Token)match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_search_modifier18710); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUERY_SYM33_tree = (Object)adaptor.create(QUERY_SYM33);
					adaptor.addChild(root_0, QUERY_SYM33_tree);
					}

					EXPANSION_SYM34=(Token)match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_search_modifier18712); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXPANSION_SYM34_tree = (Object)adaptor.create(EXPANSION_SYM34);
					adaptor.addChild(root_0, EXPANSION_SYM34_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "search_modifier"


	public static class transcoding_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "transcoding_name"
	// MySQL.g:981:1: transcoding_name : ( LATIN1 | UTF8 );
	public final MySQLParser.transcoding_name_return transcoding_name() throws RecognitionException {
		MySQLParser.transcoding_name_return retval = new MySQLParser.transcoding_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set35=null;

		Object set35_tree=null;

		try {
			// MySQL.g:981:17: ( LATIN1 | UTF8 )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set35=input.LT(1);
			if ( input.LA(1)==LATIN1||input.LA(1)==UTF8 ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set35));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transcoding_name"


	public static class interval_unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interval_unit"
	// MySQL.g:986:1: interval_unit : ( SECOND | MINUTE | HOUR | DAY_SYM | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH );
	public final MySQLParser.interval_unit_return interval_unit() throws RecognitionException {
		MySQLParser.interval_unit_return retval = new MySQLParser.interval_unit_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set36=null;

		Object set36_tree=null;

		try {
			// MySQL.g:986:14: ( SECOND | MINUTE | HOUR | DAY_SYM | WEEK | MONTH | QUARTER | YEAR | SECOND_MICROSECOND | MINUTE_MICROSECOND | MINUTE_SECOND | HOUR_MICROSECOND | HOUR_SECOND | HOUR_MINUTE | DAY_MICROSECOND | DAY_SECOND | DAY_MINUTE | DAY_HOUR | YEAR_MONTH )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set36=input.LT(1);
			if ( (input.LA(1) >= DAY_HOUR && input.LA(1) <= DAY_SYM)||(input.LA(1) >= HOUR && input.LA(1) <= HOUR_SECOND)||(input.LA(1) >= MINUTE && input.LA(1) <= MINUTE_SECOND)||input.LA(1)==MONTH||input.LA(1)==QUARTER||(input.LA(1) >= SECOND && input.LA(1) <= SECOND_MICROSECOND)||input.LA(1)==WEEK||input.LA(1)==YEAR||input.LA(1)==YEAR_MONTH ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set36));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_unit"


	public static class collation_names_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "collation_names"
	// MySQL.g:1008:1: collation_names : ( LATIN1_GENERAL_CS | LATIN1_BIN );
	public final MySQLParser.collation_names_return collation_names() throws RecognitionException {
		MySQLParser.collation_names_return retval = new MySQLParser.collation_names_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set37=null;

		Object set37_tree=null;

		try {
			// MySQL.g:1008:16: ( LATIN1_GENERAL_CS | LATIN1_BIN )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set37=input.LT(1);
			if ( (input.LA(1) >= LATIN1_BIN && input.LA(1) <= LATIN1_GENERAL_CS) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set37));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collation_names"


	public static class string_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "string_literal"
	// MySQL.g:1018:1: string_literal : TEXT_STRING ;
	public final MySQLParser.string_literal_return string_literal() throws RecognitionException {
		MySQLParser.string_literal_return retval = new MySQLParser.string_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token TEXT_STRING38=null;

		Object TEXT_STRING38_tree=null;

		try {
			// MySQL.g:1018:15: ( TEXT_STRING )
			// MySQL.g:1018:18: TEXT_STRING
			{
			root_0 = (Object)adaptor.nil();


			TEXT_STRING38=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_string_literal18858); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING38_tree = (Object)adaptor.create(TEXT_STRING38);
			adaptor.addChild(root_0, TEXT_STRING38_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "string_literal"


	public static class number_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "number_literal"
	// MySQL.g:1019:1: number_literal : ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER ) ;
	public final MySQLParser.number_literal_return number_literal() throws RecognitionException {
		MySQLParser.number_literal_return retval = new MySQLParser.number_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set39=null;
		Token set40=null;

		Object set39_tree=null;
		Object set40_tree=null;

		try {
			// MySQL.g:1019:15: ( ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER ) )
			// MySQL.g:1019:18: ( PLUS | MINUS )? ( INTEGER_NUM | REAL_NUMBER )
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1019:18: ( PLUS | MINUS )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==MINUS||LA9_0==PLUS) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// MySQL.g:
					{
					set39=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set39));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			set40=input.LT(1);
			if ( input.LA(1)==INTEGER_NUM||input.LA(1)==REAL_NUMBER ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set40));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "number_literal"


	public static class hex_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "hex_literal"
	// MySQL.g:1021:1: hex_literal : HEX_DIGIT ;
	public final MySQLParser.hex_literal_return hex_literal() throws RecognitionException {
		MySQLParser.hex_literal_return retval = new MySQLParser.hex_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HEX_DIGIT41=null;

		Object HEX_DIGIT41_tree=null;

		try {
			// MySQL.g:1021:12: ( HEX_DIGIT )
			// MySQL.g:1021:15: HEX_DIGIT
			{
			root_0 = (Object)adaptor.nil();


			HEX_DIGIT41=(Token)match(input,HEX_DIGIT,FOLLOW_HEX_DIGIT_in_hex_literal18890); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HEX_DIGIT41_tree = (Object)adaptor.create(HEX_DIGIT41);
			adaptor.addChild(root_0, HEX_DIGIT41_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hex_literal"


	public static class boolean_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "boolean_literal"
	// MySQL.g:1022:1: boolean_literal : ( TRUE_SYM | FALSE_SYM );
	public final MySQLParser.boolean_literal_return boolean_literal() throws RecognitionException {
		MySQLParser.boolean_literal_return retval = new MySQLParser.boolean_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set42=null;

		Object set42_tree=null;

		try {
			// MySQL.g:1022:16: ( TRUE_SYM | FALSE_SYM )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set42=input.LT(1);
			if ( input.LA(1)==FALSE_SYM||input.LA(1)==TRUE_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set42));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "boolean_literal"


	public static class bit_literal_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bit_literal"
	// MySQL.g:1023:1: bit_literal : BIT_NUM ;
	public final MySQLParser.bit_literal_return bit_literal() throws RecognitionException {
		MySQLParser.bit_literal_return retval = new MySQLParser.bit_literal_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BIT_NUM43=null;

		Object BIT_NUM43_tree=null;

		try {
			// MySQL.g:1023:12: ( BIT_NUM )
			// MySQL.g:1023:15: BIT_NUM
			{
			root_0 = (Object)adaptor.nil();


			BIT_NUM43=(Token)match(input,BIT_NUM,FOLLOW_BIT_NUM_in_bit_literal18908); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BIT_NUM43_tree = (Object)adaptor.create(BIT_NUM43);
			adaptor.addChild(root_0, BIT_NUM43_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bit_literal"


	public static class literal_value_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "literal_value"
	// MySQL.g:1026:1: literal_value : ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM ) ;
	public final MySQLParser.literal_value_return literal_value() throws RecognitionException {
		MySQLParser.literal_value_return retval = new MySQLParser.literal_value_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NULL_SYM49=null;
		ParserRuleReturnScope string_literal44 =null;
		ParserRuleReturnScope number_literal45 =null;
		ParserRuleReturnScope hex_literal46 =null;
		ParserRuleReturnScope boolean_literal47 =null;
		ParserRuleReturnScope bit_literal48 =null;

		Object NULL_SYM49_tree=null;

		try {
			// MySQL.g:1026:14: ( ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM ) )
			// MySQL.g:1027:9: ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM )
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1027:9: ( string_literal | number_literal | hex_literal | boolean_literal | bit_literal | NULL_SYM )
			int alt10=6;
			switch ( input.LA(1) ) {
			case TEXT_STRING:
				{
				alt10=1;
				}
				break;
			case INTEGER_NUM:
			case MINUS:
			case PLUS:
			case REAL_NUMBER:
				{
				alt10=2;
				}
				break;
			case HEX_DIGIT:
				{
				alt10=3;
				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				alt10=4;
				}
				break;
			case BIT_NUM:
				{
				alt10=5;
				}
				break;
			case NULL_SYM:
				{
				alt10=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 10, 0, input);
				throw nvae;
			}
			switch (alt10) {
				case 1 :
					// MySQL.g:1027:11: string_literal
					{
					pushFollow(FOLLOW_string_literal_in_literal_value18926);
					string_literal44=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal44.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1027:28: number_literal
					{
					pushFollow(FOLLOW_number_literal_in_literal_value18930);
					number_literal45=number_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal45.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1027:45: hex_literal
					{
					pushFollow(FOLLOW_hex_literal_in_literal_value18934);
					hex_literal46=hex_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, hex_literal46.getTree());

					}
					break;
				case 4 :
					// MySQL.g:1027:59: boolean_literal
					{
					pushFollow(FOLLOW_boolean_literal_in_literal_value18938);
					boolean_literal47=boolean_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal47.getTree());

					}
					break;
				case 5 :
					// MySQL.g:1027:77: bit_literal
					{
					pushFollow(FOLLOW_bit_literal_in_literal_value18942);
					bit_literal48=bit_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal48.getTree());

					}
					break;
				case 6 :
					// MySQL.g:1027:91: NULL_SYM
					{
					NULL_SYM49=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_literal_value18946); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM49_tree = (Object)adaptor.create(NULL_SYM49);
					adaptor.addChild(root_0, NULL_SYM49_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "literal_value"


	public static class functionList_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "functionList"
	// MySQL.g:1034:1: functionList : ( number_functions | char_functions | time_functions | other_functions );
	public final MySQLParser.functionList_return functionList() throws RecognitionException {
		MySQLParser.functionList_return retval = new MySQLParser.functionList_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope number_functions50 =null;
		ParserRuleReturnScope char_functions51 =null;
		ParserRuleReturnScope time_functions52 =null;
		ParserRuleReturnScope other_functions53 =null;


		try {
			// MySQL.g:1034:13: ( number_functions | char_functions | time_functions | other_functions )
			int alt11=4;
			switch ( input.LA(1) ) {
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				alt11=1;
				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA11_2 = input.LA(2);
				if ( (synpred87_MySQL()) ) {
					alt11=2;
				}
				else if ( (true) ) {
					alt11=4;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				alt11=3;
				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				alt11=2;
				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				alt11=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 11, 0, input);
				throw nvae;
			}
			switch (alt11) {
				case 1 :
					// MySQL.g:1035:4: number_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_number_functions_in_functionList18964);
					number_functions50=number_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_functions50.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1036:4: char_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_char_functions_in_functionList18970);
					char_functions51=char_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, char_functions51.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1037:4: time_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_time_functions_in_functionList18976);
					time_functions52=time_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, time_functions52.getTree());

					}
					break;
				case 4 :
					// MySQL.g:1038:4: other_functions
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_other_functions_in_functionList18981);
					other_functions53=other_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, other_functions53.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "functionList"


	public static class number_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "number_functions"
	// MySQL.g:1041:1: number_functions : ( ABS | ACOS | ASIN | ATAN2 | ATAN | CEIL | CEILING | CONV | COS | COT | CRC32 | DEGREES | EXP | FLOOR | LN | LOG10 | LOG2 | LOG | MOD | PI | POW | POWER | RADIANS | RAND | ROUND | SIGN | SIN | SQRT | TAN | TRUNCATE );
	public final MySQLParser.number_functions_return number_functions() throws RecognitionException {
		MySQLParser.number_functions_return retval = new MySQLParser.number_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set54=null;

		Object set54_tree=null;

		try {
			// MySQL.g:1041:17: ( ABS | ACOS | ASIN | ATAN2 | ATAN | CEIL | CEILING | CONV | COS | COT | CRC32 | DEGREES | EXP | FLOOR | LN | LOG10 | LOG2 | LOG | MOD | PI | POW | POWER | RADIANS | RAND | ROUND | SIGN | SIN | SQRT | TAN | TRUNCATE )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set54=input.LT(1);
			if ( input.LA(1)==ABS||input.LA(1)==ACOS||input.LA(1)==ASIN||(input.LA(1) >= ATAN && input.LA(1) <= ATAN2)||(input.LA(1) >= CEIL && input.LA(1) <= CEILING)||input.LA(1)==CONV||(input.LA(1) >= COS && input.LA(1) <= COT)||input.LA(1)==CRC32||input.LA(1)==DEGREES||input.LA(1)==EXP||input.LA(1)==FLOOR||input.LA(1)==LN||(input.LA(1) >= LOG && input.LA(1) <= LOG2)||input.LA(1)==MOD||input.LA(1)==PI||(input.LA(1) >= POW && input.LA(1) <= POWER)||(input.LA(1) >= RADIANS && input.LA(1) <= RAND)||input.LA(1)==ROUND||input.LA(1)==SIGN||input.LA(1)==SIN||input.LA(1)==SQRT||input.LA(1)==TAN||input.LA(1)==TRUNCATE ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set54));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "number_functions"


	public static class char_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "char_functions"
	// MySQL.g:1074:1: char_functions : ( ASCII_SYM | BIN | BIT_LENGTH | CHAR_LENGTH | CHAR | CONCAT_WS | CONCAT | ELT | EXPORT_SET | FIELD | FIND_IN_SET | FORMAT | FROM_BASE64 | HEX | INSERT | INSTR | LEFT | LENGTH | LOAD_FILE | LOCATE | LOWER | LPAD | LTRIM | MAKE_SET | MID | OCT | ORD | QUOTE | REPEAT | REPLACE | REVERSE | RIGHT | RPAD | RTRIM | SOUNDEX | SPACE | STRCMP | SUBSTRING_INDEX | SUBSTRING | TO_BASE64 | TRIM | UNHEX | UPPER | WEIGHT_STRING );
	public final MySQLParser.char_functions_return char_functions() throws RecognitionException {
		MySQLParser.char_functions_return retval = new MySQLParser.char_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set55=null;

		Object set55_tree=null;

		try {
			// MySQL.g:1074:15: ( ASCII_SYM | BIN | BIT_LENGTH | CHAR_LENGTH | CHAR | CONCAT_WS | CONCAT | ELT | EXPORT_SET | FIELD | FIND_IN_SET | FORMAT | FROM_BASE64 | HEX | INSERT | INSTR | LEFT | LENGTH | LOAD_FILE | LOCATE | LOWER | LPAD | LTRIM | MAKE_SET | MID | OCT | ORD | QUOTE | REPEAT | REPLACE | REVERSE | RIGHT | RPAD | RTRIM | SOUNDEX | SPACE | STRCMP | SUBSTRING_INDEX | SUBSTRING | TO_BASE64 | TRIM | UNHEX | UPPER | WEIGHT_STRING )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set55=input.LT(1);
			if ( input.LA(1)==ASCII_SYM||input.LA(1)==BIN||input.LA(1)==BIT_LENGTH||input.LA(1)==CHAR||input.LA(1)==CHAR_LENGTH||(input.LA(1) >= CONCAT && input.LA(1) <= CONCAT_WS)||input.LA(1)==ELT||input.LA(1)==EXPORT_SET||input.LA(1)==FIELD||input.LA(1)==FIND_IN_SET||input.LA(1)==FORMAT||input.LA(1)==FROM_BASE64||input.LA(1)==HEX||input.LA(1)==INSERT||input.LA(1)==INSTR||(input.LA(1) >= LEFT && input.LA(1) <= LENGTH)||input.LA(1)==LOAD_FILE||input.LA(1)==LOCATE||input.LA(1)==LOWER||input.LA(1)==LPAD||input.LA(1)==LTRIM||input.LA(1)==MAKE_SET||input.LA(1)==MID||input.LA(1)==OCT||input.LA(1)==ORD||input.LA(1)==QUOTE||input.LA(1)==REPEAT||input.LA(1)==REPLACE||input.LA(1)==REVERSE||input.LA(1)==RIGHT||input.LA(1)==RPAD||input.LA(1)==RTRIM||input.LA(1)==SOUNDEX||input.LA(1)==SPACE||input.LA(1)==STRCMP||(input.LA(1) >= SUBSTRING && input.LA(1) <= SUBSTRING_INDEX)||input.LA(1)==TO_BASE64||input.LA(1)==TRIM||input.LA(1)==UNHEX||input.LA(1)==UPPER||input.LA(1)==WEIGHT_STRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set55));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_functions"


	public static class time_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "time_functions"
	// MySQL.g:1121:1: time_functions : ( ADDDATE | ADDTIME | CONVERT_TZ | CURDATE | CURTIME | DATE_ADD | DATE_FORMAT | DATE_SUB | DATE_SYM | DATEDIFF | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | EXTRACT | FROM_DAYS | FROM_UNIXTIME | GET_FORMAT | HOUR | LAST_DAY | MAKEDATE | MAKETIME | MICROSECOND | MINUTE | MONTH | MONTHNAME | NOW | PERIOD_ADD | PERIOD_DIFF | QUARTER | SEC_TO_TIME | SECOND | STR_TO_DATE | SUBTIME | SYSDATE | TIME_FORMAT | TIME_TO_SEC | TIME_SYM | TIMEDIFF | TIMESTAMP | TIMESTAMPADD | TIMESTAMPDIFF | TO_DAYS | TO_SECONDS | UNIX_TIMESTAMP | UTC_DATE | UTC_TIME | UTC_TIMESTAMP | WEEK | WEEKDAY | WEEKOFYEAR | YEAR | YEARWEEK );
	public final MySQLParser.time_functions_return time_functions() throws RecognitionException {
		MySQLParser.time_functions_return retval = new MySQLParser.time_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set56=null;

		Object set56_tree=null;

		try {
			// MySQL.g:1121:15: ( ADDDATE | ADDTIME | CONVERT_TZ | CURDATE | CURTIME | DATE_ADD | DATE_FORMAT | DATE_SUB | DATE_SYM | DATEDIFF | DAYNAME | DAYOFMONTH | DAYOFWEEK | DAYOFYEAR | EXTRACT | FROM_DAYS | FROM_UNIXTIME | GET_FORMAT | HOUR | LAST_DAY | MAKEDATE | MAKETIME | MICROSECOND | MINUTE | MONTH | MONTHNAME | NOW | PERIOD_ADD | PERIOD_DIFF | QUARTER | SEC_TO_TIME | SECOND | STR_TO_DATE | SUBTIME | SYSDATE | TIME_FORMAT | TIME_TO_SEC | TIME_SYM | TIMEDIFF | TIMESTAMP | TIMESTAMPADD | TIMESTAMPDIFF | TO_DAYS | TO_SECONDS | UNIX_TIMESTAMP | UTC_DATE | UTC_TIME | UTC_TIMESTAMP | WEEK | WEEKDAY | WEEKOFYEAR | YEAR | YEARWEEK )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set56=input.LT(1);
			if ( (input.LA(1) >= ADDDATE && input.LA(1) <= ADDTIME)||input.LA(1)==CONVERT_TZ||input.LA(1)==CURDATE||input.LA(1)==CURTIME||input.LA(1)==DATEDIFF||(input.LA(1) >= DATE_ADD && input.LA(1) <= DAYOFYEAR)||input.LA(1)==EXTRACT||(input.LA(1) >= FROM_DAYS && input.LA(1) <= FROM_UNIXTIME)||input.LA(1)==GET_FORMAT||input.LA(1)==HOUR||input.LA(1)==LAST_DAY||(input.LA(1) >= MAKEDATE && input.LA(1) <= MAKETIME)||input.LA(1)==MICROSECOND||input.LA(1)==MINUTE||(input.LA(1) >= MONTH && input.LA(1) <= MONTHNAME)||input.LA(1)==NOW||(input.LA(1) >= PERIOD_ADD && input.LA(1) <= PERIOD_DIFF)||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==SEC_TO_TIME||input.LA(1)==STR_TO_DATE||input.LA(1)==SUBTIME||input.LA(1)==SYSDATE||(input.LA(1) >= TIMEDIFF && input.LA(1) <= TIME_TO_SEC)||(input.LA(1) >= TO_DAYS && input.LA(1) <= TO_SECONDS)||input.LA(1)==UNIX_TIMESTAMP||(input.LA(1) >= UTC_DATE && input.LA(1) <= UTC_TIMESTAMP)||(input.LA(1) >= WEEK && input.LA(1) <= WEEKOFYEAR)||(input.LA(1) >= YEAR && input.LA(1) <= YEARWEEK) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set56));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "time_functions"


	public static class other_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "other_functions"
	// MySQL.g:1177:1: other_functions : ( MAKE_SET | LOAD_FILE | IF | IFNULL | AES_ENCRYPT | AES_DECRYPT | DECODE | ENCODE | DES_DECRYPT | DES_ENCRYPT | ENCRYPT | MD5 | OLD_PASSWORD | PASSWORD | BENCHMARK | CHARSET | COERCIBILITY | COLLATION | CONNECTION_ID | CURRENT_USER | DATABASE | SCHEMA | USER | SESSION_USER | SYSTEM_USER | VERSION_SYM | FOUND_ROWS | LAST_INSERT_ID | DEFAULT | GET_LOCK | RELEASE_LOCK | IS_FREE_LOCK | IS_USED_LOCK | MASTER_POS_WAIT | INET_ATON | INET_NTOA | NAME_CONST | SLEEP | UUID | VALUES );
	public final MySQLParser.other_functions_return other_functions() throws RecognitionException {
		MySQLParser.other_functions_return retval = new MySQLParser.other_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set57=null;

		Object set57_tree=null;

		try {
			// MySQL.g:1177:16: ( MAKE_SET | LOAD_FILE | IF | IFNULL | AES_ENCRYPT | AES_DECRYPT | DECODE | ENCODE | DES_DECRYPT | DES_ENCRYPT | ENCRYPT | MD5 | OLD_PASSWORD | PASSWORD | BENCHMARK | CHARSET | COERCIBILITY | COLLATION | CONNECTION_ID | CURRENT_USER | DATABASE | SCHEMA | USER | SESSION_USER | SYSTEM_USER | VERSION_SYM | FOUND_ROWS | LAST_INSERT_ID | DEFAULT | GET_LOCK | RELEASE_LOCK | IS_FREE_LOCK | IS_USED_LOCK | MASTER_POS_WAIT | INET_ATON | INET_NTOA | NAME_CONST | SLEEP | UUID | VALUES )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set57=input.LT(1);
			if ( (input.LA(1) >= AES_DECRYPT && input.LA(1) <= AES_ENCRYPT)||input.LA(1)==BENCHMARK||input.LA(1)==CHARSET||input.LA(1)==COERCIBILITY||input.LA(1)==COLLATION||input.LA(1)==CONNECTION_ID||input.LA(1)==CURRENT_USER||input.LA(1)==DATABASE||(input.LA(1) >= DECODE && input.LA(1) <= DEFAULT)||(input.LA(1) >= DES_DECRYPT && input.LA(1) <= DES_ENCRYPT)||(input.LA(1) >= ENCODE && input.LA(1) <= ENCRYPT)||input.LA(1)==FOUND_ROWS||input.LA(1)==GET_LOCK||(input.LA(1) >= IF && input.LA(1) <= IFNULL)||(input.LA(1) >= INET_ATON && input.LA(1) <= INET_NTOA)||input.LA(1)==IS_FREE_LOCK||input.LA(1)==IS_USED_LOCK||input.LA(1)==LAST_INSERT_ID||input.LA(1)==LOAD_FILE||input.LA(1)==MAKE_SET||input.LA(1)==MASTER_POS_WAIT||input.LA(1)==MD5||input.LA(1)==NAME_CONST||input.LA(1)==OLD_PASSWORD||input.LA(1)==PASSWORD||input.LA(1)==RELEASE_LOCK||input.LA(1)==SCHEMA||input.LA(1)==SESSION_USER||input.LA(1)==SLEEP||input.LA(1)==SYSTEM_USER||input.LA(1)==USER||input.LA(1)==UUID||input.LA(1)==VALUES||input.LA(1)==VERSION_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set57));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "other_functions"


	public static class group_functions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "group_functions"
	// MySQL.g:1197:1: group_functions : ( AVG | COUNT | MAX_SYM | MIN_SYM | SUM | BIT_AND | BIT_OR | BIT_XOR | GROUP_CONCAT | STD | STDDEV | STDDEV_POP | STDDEV_SAMP | VAR_POP | VAR_SAMP | VARIANCE );
	public final MySQLParser.group_functions_return group_functions() throws RecognitionException {
		MySQLParser.group_functions_return retval = new MySQLParser.group_functions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set58=null;

		Object set58_tree=null;

		try {
			// MySQL.g:1197:16: ( AVG | COUNT | MAX_SYM | MIN_SYM | SUM | BIT_AND | BIT_OR | BIT_XOR | GROUP_CONCAT | STD | STDDEV | STDDEV_POP | STDDEV_SAMP | VAR_POP | VAR_SAMP | VARIANCE )
			// MySQL.g:
			{
			root_0 = (Object)adaptor.nil();


			set58=input.LT(1);
			if ( input.LA(1)==AVG||input.LA(1)==BIT_AND||input.LA(1)==BIT_OR||input.LA(1)==BIT_XOR||input.LA(1)==COUNT||input.LA(1)==GROUP_CONCAT||input.LA(1)==MAX_SYM||input.LA(1)==MIN_SYM||(input.LA(1) >= STD && input.LA(1) <= STDDEV_SAMP)||input.LA(1)==SUM||input.LA(1)==VARIANCE||(input.LA(1) >= VAR_POP && input.LA(1) <= VAR_SAMP) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set58));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_functions"


	public static class schema_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "schema_name"
	// MySQL.g:1211:1: schema_name : tmpName= ID {...}?;
	public final MySQLParser.schema_name_return schema_name() throws RecognitionException {
		MySQLParser.schema_name_return retval = new MySQLParser.schema_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1211:15: (tmpName= ID {...}?)
			// MySQL.g:1211:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_schema_name19910); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "schema_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("schema name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("schema name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class table_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_name"
	// MySQL.g:1212:1: table_name : tmpName= ID {...}?;
	public final MySQLParser.table_name_return table_name() throws RecognitionException {
		MySQLParser.table_name_return retval = new MySQLParser.table_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1212:14: (tmpName= ID {...}?)
			// MySQL.g:1212:16: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_table_name19925); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "table_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("table name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("table name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_name"


	public static class engine_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "engine_name"
	// MySQL.g:1213:1: engine_name : tmpName= ID {...}?;
	public final MySQLParser.engine_name_return engine_name() throws RecognitionException {
		MySQLParser.engine_name_return retval = new MySQLParser.engine_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1213:15: (tmpName= ID {...}?)
			// MySQL.g:1213:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_engine_name19940); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "engine_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("engine name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("engine name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "engine_name"


	public static class column_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_name"
	// MySQL.g:1214:1: column_name : tmpName= ID {...}?;
	public final MySQLParser.column_name_return column_name() throws RecognitionException {
		MySQLParser.column_name_return retval = new MySQLParser.column_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1214:15: (tmpName= ID {...}?)
			// MySQL.g:1214:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_column_name19955); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "column_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("column name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("column name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class view_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "view_name"
	// MySQL.g:1215:1: view_name : tmpName= ID {...}?;
	public final MySQLParser.view_name_return view_name() throws RecognitionException {
		MySQLParser.view_name_return retval = new MySQLParser.view_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1215:13: (tmpName= ID {...}?)
			// MySQL.g:1215:15: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_view_name19970); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "view_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("view name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("view name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_name"


	public static class parser_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parser_name"
	// MySQL.g:1216:1: parser_name : tmpName= ID {...}?;
	public final MySQLParser.parser_name_return parser_name() throws RecognitionException {
		MySQLParser.parser_name_return retval = new MySQLParser.parser_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1216:15: (tmpName= ID {...}?)
			// MySQL.g:1216:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_parser_name19985); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "parser_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("index name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("index name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parser_name"


	public static class index_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_name"
	// MySQL.g:1217:1: index_name : tmpName= ID {...}?;
	public final MySQLParser.index_name_return index_name() throws RecognitionException {
		MySQLParser.index_name_return retval = new MySQLParser.index_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1217:14: (tmpName= ID {...}?)
			// MySQL.g:1217:16: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_index_name20000); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "index_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("index name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("index name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class partition_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_name"
	// MySQL.g:1218:1: partition_name : tmpName= ID {...}?;
	public final MySQLParser.partition_name_return partition_name() throws RecognitionException {
		MySQLParser.partition_name_return retval = new MySQLParser.partition_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1218:18: (tmpName= ID {...}?)
			// MySQL.g:1218:20: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_partition_name20015); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "partition_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("partition name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("partition name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_name"


	public static class partition_logical_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_logical_name"
	// MySQL.g:1219:1: partition_logical_name : tmpName= ID {...}?;
	public final MySQLParser.partition_logical_name_return partition_logical_name() throws RecognitionException {
		MySQLParser.partition_logical_name_return retval = new MySQLParser.partition_logical_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1219:25: (tmpName= ID {...}?)
			// MySQL.g:1219:27: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_partition_logical_name20029); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "partition_logical_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("partition logical name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("partition logical name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_logical_name"


	public static class constraint_symbol_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constraint_symbol_name"
	// MySQL.g:1220:1: constraint_symbol_name : tmpName= ID {...}?;
	public final MySQLParser.constraint_symbol_name_return constraint_symbol_name() throws RecognitionException {
		MySQLParser.constraint_symbol_name_return retval = new MySQLParser.constraint_symbol_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1220:25: (tmpName= ID {...}?)
			// MySQL.g:1220:27: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_constraint_symbol_name20043); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "constraint_symbol_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("constraint symbol name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("constraint symbol name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_symbol_name"


	public static class foreign_key_symbol_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "foreign_key_symbol_name"
	// MySQL.g:1221:1: foreign_key_symbol_name : tmpName= ID {...}?;
	public final MySQLParser.foreign_key_symbol_name_return foreign_key_symbol_name() throws RecognitionException {
		MySQLParser.foreign_key_symbol_name_return retval = new MySQLParser.foreign_key_symbol_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1221:26: (tmpName= ID {...}?)
			// MySQL.g:1221:28: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_foreign_key_symbol_name20057); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "foreign_key_symbol_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("foreign key symbol name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("foreign key symbol name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "foreign_key_symbol_name"


	public static class collation_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "collation_name"
	// MySQL.g:1222:1: collation_name : tmpName= ID {...}?;
	public final MySQLParser.collation_name_return collation_name() throws RecognitionException {
		MySQLParser.collation_name_return retval = new MySQLParser.collation_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1222:18: (tmpName= ID {...}?)
			// MySQL.g:1222:20: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_collation_name20072); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}
			
			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "collation_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("collation name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("collation name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collation_name"


	public static class event_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "event_name"
	// MySQL.g:1223:1: event_name : tmpName= ID {...}?;
	public final MySQLParser.event_name_return event_name() throws RecognitionException {
		MySQLParser.event_name_return retval = new MySQLParser.event_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1223:14: (tmpName= ID {...}?)
			// MySQL.g:1223:16: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_event_name20087); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "event_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("event name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("event name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "event_name"


	public static class user_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "user_name"
	// MySQL.g:1224:1: user_name : tmpName= ID {...}?;
	public final MySQLParser.user_name_return user_name() throws RecognitionException {
		MySQLParser.user_name_return retval = new MySQLParser.user_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1224:13: (tmpName= ID {...}?)
			// MySQL.g:1224:15: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_user_name20102); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "user_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("user name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("user name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "user_name"


	public static class function_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "function_name"
	// MySQL.g:1225:1: function_name : tmpName= ID {...}?;
	public final MySQLParser.function_name_return function_name() throws RecognitionException {
		MySQLParser.function_name_return retval = new MySQLParser.function_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1225:17: (tmpName= ID {...}?)
			// MySQL.g:1225:19: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_function_name20117); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "function_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("function name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("function name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedure_name"
	// MySQL.g:1226:1: procedure_name : tmpName= ID {...}?;
	public final MySQLParser.procedure_name_return procedure_name() throws RecognitionException {
		MySQLParser.procedure_name_return retval = new MySQLParser.procedure_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1226:18: (tmpName= ID {...}?)
			// MySQL.g:1226:20: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_procedure_name20132); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "procedure_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("procedure name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("procedure name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class server_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "server_name"
	// MySQL.g:1227:1: server_name : tmpName= ID {...}?;
	public final MySQLParser.server_name_return server_name() throws RecognitionException {
		MySQLParser.server_name_return retval = new MySQLParser.server_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1227:15: (tmpName= ID {...}?)
			// MySQL.g:1227:17: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_server_name20147); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "server_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("server name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("server name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "server_name"


	public static class wrapper_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "wrapper_name"
	// MySQL.g:1228:1: wrapper_name : tmpName= ID {...}?;
	public final MySQLParser.wrapper_name_return wrapper_name() throws RecognitionException {
		MySQLParser.wrapper_name_return retval = new MySQLParser.wrapper_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;

		Object tmpName_tree=null;

		try {
			// MySQL.g:1228:16: (tmpName= ID {...}?)
			// MySQL.g:1228:18: tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			tmpName=(Token)match(input,ID,FOLLOW_ID_in_wrapper_name20162); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 64)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "wrapper_name", "strlen((const char *)$tmpName.text->chars) <= 64");
			}
			if ( state.backtracking==0 ) {
				//printf("wrapper name = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("wrapper name = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wrapper_name"


	public static class alias_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alias"
	// MySQL.g:1229:1: alias : ( AS_SYM )? tmpName= ID {...}?;
	public final MySQLParser.alias_return alias() throws RecognitionException {
		MySQLParser.alias_return retval = new MySQLParser.alias_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token tmpName=null;
		Token AS_SYM59=null;

		Object tmpName_tree=null;
		Object AS_SYM59_tree=null;

		try {
			// MySQL.g:1229:10: ( ( AS_SYM )? tmpName= ID {...}?)
			// MySQL.g:1229:12: ( AS_SYM )? tmpName= ID {...}?
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1229:12: ( AS_SYM )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==AS_SYM) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// MySQL.g:1229:14: AS_SYM
					{
					AS_SYM59=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_alias20178); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS_SYM59_tree = (Object)adaptor.create(AS_SYM59);
					adaptor.addChild(root_0, AS_SYM59_tree);
					}

					}
					break;

			}

			tmpName=(Token)match(input,ID,FOLLOW_ID_in_alias20185); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			tmpName_tree = (Object)adaptor.create(tmpName);
			adaptor.addChild(root_0, tmpName_tree);
			}

			if (!(tmpName==null || tmpName.getText().length() <= 64)) {
			//if ( !((strlen((const char *)(tmpName!=null?tmpName.getText():null)->chars) <= 256)) ) {
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "alias", "strlen((const char *)$tmpName.text->chars) <= 256");
			}
			if ( state.backtracking==0 ) {
				//printf("alias = %s \n",(char*)((tmpName!=null?tmpName.getText():null)->chars));
				System.out.println(String.format("alias = %s \n", (tmpName!=null?tmpName.getText():null)));
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression"
	// MySQL.g:1237:1: expression : exp_factor1 ( OR_SYM exp_factor1 )* ;
	public final MySQLParser.expression_return expression() throws RecognitionException {
		MySQLParser.expression_return retval = new MySQLParser.expression_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token OR_SYM61=null;
		ParserRuleReturnScope exp_factor160 =null;
		ParserRuleReturnScope exp_factor162 =null;

		Object OR_SYM61_tree=null;

		try {
			// MySQL.g:1237:11: ( exp_factor1 ( OR_SYM exp_factor1 )* )
			// MySQL.g:1237:13: exp_factor1 ( OR_SYM exp_factor1 )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exp_factor1_in_expression20202);
			exp_factor160=exp_factor1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor160.getTree());

			// MySQL.g:1237:25: ( OR_SYM exp_factor1 )*
			loop13:
			while (true) {
				int alt13=2;
				int LA13_0 = input.LA(1);
				if ( (LA13_0==OR_SYM) ) {
					int LA13_2 = input.LA(2);
					if ( (synpred268_MySQL()) ) {
						alt13=1;
					}

				}

				switch (alt13) {
				case 1 :
					// MySQL.g:1237:27: OR_SYM exp_factor1
					{
					OR_SYM61=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_expression20206); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR_SYM61_tree = (Object)adaptor.create(OR_SYM61);
					adaptor.addChild(root_0, OR_SYM61_tree);
					}

					pushFollow(FOLLOW_exp_factor1_in_expression20208);
					exp_factor162=exp_factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor162.getTree());

					}
					break;

				default :
					break loop13;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class exp_factor1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor1"
	// MySQL.g:1238:1: exp_factor1 : exp_factor2 ( XOR exp_factor2 )* ;
	public final MySQLParser.exp_factor1_return exp_factor1() throws RecognitionException {
		MySQLParser.exp_factor1_return retval = new MySQLParser.exp_factor1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token XOR64=null;
		ParserRuleReturnScope exp_factor263 =null;
		ParserRuleReturnScope exp_factor265 =null;

		Object XOR64_tree=null;

		try {
			// MySQL.g:1238:12: ( exp_factor2 ( XOR exp_factor2 )* )
			// MySQL.g:1238:14: exp_factor2 ( XOR exp_factor2 )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exp_factor2_in_exp_factor120218);
			exp_factor263=exp_factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor263.getTree());

			// MySQL.g:1238:26: ( XOR exp_factor2 )*
			loop14:
			while (true) {
				int alt14=2;
				int LA14_0 = input.LA(1);
				if ( (LA14_0==XOR) ) {
					int LA14_2 = input.LA(2);
					if ( (synpred269_MySQL()) ) {
						alt14=1;
					}

				}

				switch (alt14) {
				case 1 :
					// MySQL.g:1238:28: XOR exp_factor2
					{
					XOR64=(Token)match(input,XOR,FOLLOW_XOR_in_exp_factor120222); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					XOR64_tree = (Object)adaptor.create(XOR64);
					adaptor.addChild(root_0, XOR64_tree);
					}

					pushFollow(FOLLOW_exp_factor2_in_exp_factor120224);
					exp_factor265=exp_factor2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor265.getTree());

					}
					break;

				default :
					break loop14;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor1"


	public static class exp_factor2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor2"
	// MySQL.g:1239:1: exp_factor2 : exp_factor3 ( AND_SYM exp_factor3 )* ;
	public final MySQLParser.exp_factor2_return exp_factor2() throws RecognitionException {
		MySQLParser.exp_factor2_return retval = new MySQLParser.exp_factor2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token AND_SYM67=null;
		ParserRuleReturnScope exp_factor366 =null;
		ParserRuleReturnScope exp_factor368 =null;

		Object AND_SYM67_tree=null;

		try {
			// MySQL.g:1239:12: ( exp_factor3 ( AND_SYM exp_factor3 )* )
			// MySQL.g:1239:14: exp_factor3 ( AND_SYM exp_factor3 )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exp_factor3_in_exp_factor220234);
			exp_factor366=exp_factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor366.getTree());

			// MySQL.g:1239:26: ( AND_SYM exp_factor3 )*
			loop15:
			while (true) {
				int alt15=2;
				int LA15_0 = input.LA(1);
				if ( (LA15_0==AND_SYM) ) {
					int LA15_2 = input.LA(2);
					if ( (synpred270_MySQL()) ) {
						alt15=1;
					}

				}

				switch (alt15) {
				case 1 :
					// MySQL.g:1239:28: AND_SYM exp_factor3
					{
					AND_SYM67=(Token)match(input,AND_SYM,FOLLOW_AND_SYM_in_exp_factor220238); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND_SYM67_tree = (Object)adaptor.create(AND_SYM67);
					adaptor.addChild(root_0, AND_SYM67_tree);
					}

					pushFollow(FOLLOW_exp_factor3_in_exp_factor220240);
					exp_factor368=exp_factor3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor368.getTree());

					}
					break;

				default :
					break loop15;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor2"


	public static class exp_factor3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor3"
	// MySQL.g:1240:1: exp_factor3 : ( NOT_SYM )? exp_factor4 ;
	public final MySQLParser.exp_factor3_return exp_factor3() throws RecognitionException {
		MySQLParser.exp_factor3_return retval = new MySQLParser.exp_factor3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NOT_SYM69=null;
		ParserRuleReturnScope exp_factor470 =null;

		Object NOT_SYM69_tree=null;

		try {
			// MySQL.g:1240:12: ( ( NOT_SYM )? exp_factor4 )
			// MySQL.g:1240:14: ( NOT_SYM )? exp_factor4
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1240:14: ( NOT_SYM )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==NOT_SYM) ) {
				int LA16_1 = input.LA(2);
				if ( (synpred271_MySQL()) ) {
					alt16=1;
				}
			}
			switch (alt16) {
				case 1 :
					// MySQL.g:1240:15: NOT_SYM
					{
					NOT_SYM69=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_exp_factor320251); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM69_tree = (Object)adaptor.create(NOT_SYM69);
					adaptor.addChild(root_0, NOT_SYM69_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_exp_factor4_in_exp_factor320255);
			exp_factor470=exp_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, exp_factor470.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor3"


	public static class exp_factor4_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exp_factor4"
	// MySQL.g:1241:1: exp_factor4 : bool_primary ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )? ;
	public final MySQLParser.exp_factor4_return exp_factor4() throws RecognitionException {
		MySQLParser.exp_factor4_return retval = new MySQLParser.exp_factor4_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token IS_SYM72=null;
		Token NOT_SYM73=null;
		Token NULL_SYM75=null;
		ParserRuleReturnScope bool_primary71 =null;
		ParserRuleReturnScope boolean_literal74 =null;

		Object IS_SYM72_tree=null;
		Object NOT_SYM73_tree=null;
		Object NULL_SYM75_tree=null;

		try {
			// MySQL.g:1241:12: ( bool_primary ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )? )
			// MySQL.g:1241:14: bool_primary ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_bool_primary_in_exp_factor420262);
			bool_primary71=bool_primary();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bool_primary71.getTree());

			// MySQL.g:1241:27: ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==IS_SYM) ) {
				int LA19_1 = input.LA(2);
				if ( (synpred274_MySQL()) ) {
					alt19=1;
				}
			}
			switch (alt19) {
				case 1 :
					// MySQL.g:1241:29: IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM )
					{
					IS_SYM72=(Token)match(input,IS_SYM,FOLLOW_IS_SYM_in_exp_factor420266); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IS_SYM72_tree = (Object)adaptor.create(IS_SYM72);
					adaptor.addChild(root_0, IS_SYM72_tree);
					}

					// MySQL.g:1241:36: ( NOT_SYM )?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==NOT_SYM) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// MySQL.g:1241:37: NOT_SYM
							{
							NOT_SYM73=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_exp_factor420269); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM73_tree = (Object)adaptor.create(NOT_SYM73);
							adaptor.addChild(root_0, NOT_SYM73_tree);
							}

							}
							break;

					}

					// MySQL.g:1241:47: ( boolean_literal | NULL_SYM )
					int alt18=2;
					int LA18_0 = input.LA(1);
					if ( (LA18_0==FALSE_SYM||LA18_0==TRUE_SYM) ) {
						alt18=1;
					}
					else if ( (LA18_0==NULL_SYM) ) {
						alt18=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 18, 0, input);
						throw nvae;
					}

					switch (alt18) {
						case 1 :
							// MySQL.g:1241:48: boolean_literal
							{
							pushFollow(FOLLOW_boolean_literal_in_exp_factor420274);
							boolean_literal74=boolean_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal74.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1241:64: NULL_SYM
							{
							NULL_SYM75=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_exp_factor420276); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NULL_SYM75_tree = (Object)adaptor.create(NULL_SYM75);
							adaptor.addChild(root_0, NULL_SYM75_tree);
							}

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exp_factor4"


	public static class bool_primary_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bool_primary"
	// MySQL.g:1242:1: bool_primary : ( ( predicate relational_op predicate ) | ( predicate relational_op ( ALL | ANY )? subquery ) | ( ( NOT_SYM )? EXISTS subquery ) | predicate );
	public final MySQLParser.bool_primary_return bool_primary() throws RecognitionException {
		MySQLParser.bool_primary_return retval = new MySQLParser.bool_primary_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set81=null;
		Token NOT_SYM83=null;
		Token EXISTS84=null;
		ParserRuleReturnScope predicate76 =null;
		ParserRuleReturnScope relational_op77 =null;
		ParserRuleReturnScope predicate78 =null;
		ParserRuleReturnScope predicate79 =null;
		ParserRuleReturnScope relational_op80 =null;
		ParserRuleReturnScope subquery82 =null;
		ParserRuleReturnScope subquery85 =null;
		ParserRuleReturnScope predicate86 =null;

		Object set81_tree=null;
		Object NOT_SYM83_tree=null;
		Object EXISTS84_tree=null;

		try {
			// MySQL.g:1242:13: ( ( predicate relational_op predicate ) | ( predicate relational_op ( ALL | ANY )? subquery ) | ( ( NOT_SYM )? EXISTS subquery ) | predicate )
			int alt22=4;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA22_1 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case TEXT_STRING:
				{
				int LA22_2 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case BINARY:
			case NEGATION:
				{
				int LA22_3 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				int LA22_4 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case HEX_DIGIT:
				{
				int LA22_5 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				int LA22_6 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case BIT_NUM:
				{
				int LA22_7 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case NULL_SYM:
				{
				int LA22_8 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ID:
				{
				int LA22_9 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				int LA22_10 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA22_11 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				int LA22_12 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				int LA22_13 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				int LA22_14 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CAST_SYM:
				{
				int LA22_15 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CONVERT_SYM:
				{
				int LA22_16 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				int LA22_17 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case USER_VAR:
				{
				int LA22_18 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case LPAREN:
				{
				int LA22_19 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case ROW_SYM:
				{
				int LA22_20 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case EXISTS:
				{
				int LA22_21 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (synpred280_MySQL()) ) {
					alt22=3;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case MATCH:
				{
				int LA22_22 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case CASE_SYM:
				{
				int LA22_23 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case INTERVAL_SYM:
				{
				int LA22_24 = input.LA(2);
				if ( (synpred275_MySQL()) ) {
					alt22=1;
				}
				else if ( (synpred278_MySQL()) ) {
					alt22=2;
				}
				else if ( (true) ) {
					alt22=4;
				}

				}
				break;
			case NOT_SYM:
				{
				alt22=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}
			switch (alt22) {
				case 1 :
					// MySQL.g:1243:4: ( predicate relational_op predicate )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1243:4: ( predicate relational_op predicate )
					// MySQL.g:1243:6: predicate relational_op predicate
					{
					pushFollow(FOLLOW_predicate_in_bool_primary20292);
					predicate76=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate76.getTree());

					pushFollow(FOLLOW_relational_op_in_bool_primary20294);
					relational_op77=relational_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op77.getTree());

					pushFollow(FOLLOW_predicate_in_bool_primary20296);
					predicate78=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate78.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:1244:4: ( predicate relational_op ( ALL | ANY )? subquery )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1244:4: ( predicate relational_op ( ALL | ANY )? subquery )
					// MySQL.g:1244:6: predicate relational_op ( ALL | ANY )? subquery
					{
					pushFollow(FOLLOW_predicate_in_bool_primary20306);
					predicate79=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate79.getTree());

					pushFollow(FOLLOW_relational_op_in_bool_primary20308);
					relational_op80=relational_op();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op80.getTree());

					// MySQL.g:1244:30: ( ALL | ANY )?
					int alt20=2;
					int LA20_0 = input.LA(1);
					if ( (LA20_0==ALL||LA20_0==ANY) ) {
						alt20=1;
					}
					switch (alt20) {
						case 1 :
							// MySQL.g:
							{
							set81=input.LT(1);
							if ( input.LA(1)==ALL||input.LA(1)==ANY ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set81));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_subquery_in_bool_primary20321);
					subquery82=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery82.getTree());

					}

					}
					break;
				case 3 :
					// MySQL.g:1245:4: ( ( NOT_SYM )? EXISTS subquery )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1245:4: ( ( NOT_SYM )? EXISTS subquery )
					// MySQL.g:1245:6: ( NOT_SYM )? EXISTS subquery
					{
					// MySQL.g:1245:6: ( NOT_SYM )?
					int alt21=2;
					int LA21_0 = input.LA(1);
					if ( (LA21_0==NOT_SYM) ) {
						alt21=1;
					}
					switch (alt21) {
						case 1 :
							// MySQL.g:1245:6: NOT_SYM
							{
							NOT_SYM83=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_bool_primary20330); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM83_tree = (Object)adaptor.create(NOT_SYM83);
							adaptor.addChild(root_0, NOT_SYM83_tree);
							}

							}
							break;

					}

					EXISTS84=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_bool_primary20333); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS84_tree = (Object)adaptor.create(EXISTS84);
					adaptor.addChild(root_0, EXISTS84_tree);
					}

					pushFollow(FOLLOW_subquery_in_bool_primary20335);
					subquery85=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery85.getTree());

					}

					}
					break;
				case 4 :
					// MySQL.g:1246:4: predicate
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_predicate_in_bool_primary20342);
					predicate86=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate86.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bool_primary"


	public static class predicate_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "predicate"
	// MySQL.g:1248:1: predicate : ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) | ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) | ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) | ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) | ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) | ( bit_expr ) );
	public final MySQLParser.predicate_return predicate() throws RecognitionException {
		MySQLParser.predicate_return retval = new MySQLParser.predicate_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NOT_SYM88=null;
		Token IN_SYM89=null;
		Token NOT_SYM93=null;
		Token BETWEEN94=null;
		Token AND_SYM96=null;
		Token SOUNDS_SYM99=null;
		Token LIKE_SYM100=null;
		Token NOT_SYM103=null;
		Token LIKE_SYM104=null;
		Token ESCAPE_SYM106=null;
		Token NOT_SYM109=null;
		Token REGEXP110=null;
		ParserRuleReturnScope bit_expr87 =null;
		ParserRuleReturnScope subquery90 =null;
		ParserRuleReturnScope expression_list91 =null;
		ParserRuleReturnScope bit_expr92 =null;
		ParserRuleReturnScope bit_expr95 =null;
		ParserRuleReturnScope predicate97 =null;
		ParserRuleReturnScope bit_expr98 =null;
		ParserRuleReturnScope bit_expr101 =null;
		ParserRuleReturnScope bit_expr102 =null;
		ParserRuleReturnScope simple_expr105 =null;
		ParserRuleReturnScope simple_expr107 =null;
		ParserRuleReturnScope bit_expr108 =null;
		ParserRuleReturnScope bit_expr111 =null;
		ParserRuleReturnScope bit_expr112 =null;

		Object NOT_SYM88_tree=null;
		Object IN_SYM89_tree=null;
		Object NOT_SYM93_tree=null;
		Object BETWEEN94_tree=null;
		Object AND_SYM96_tree=null;
		Object SOUNDS_SYM99_tree=null;
		Object LIKE_SYM100_tree=null;
		Object NOT_SYM103_tree=null;
		Object LIKE_SYM104_tree=null;
		Object ESCAPE_SYM106_tree=null;
		Object NOT_SYM109_tree=null;
		Object REGEXP110_tree=null;

		try {
			// MySQL.g:1248:10: ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) | ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) | ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) | ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) | ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) | ( bit_expr ) )
			int alt29=6;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA29_1 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case TEXT_STRING:
				{
				int LA29_2 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case BINARY:
			case NEGATION:
				{
				int LA29_3 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case INTEGER_NUM:
			case REAL_NUMBER:
				{
				int LA29_4 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case HEX_DIGIT:
				{
				int LA29_5 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case FALSE_SYM:
			case TRUE_SYM:
				{
				int LA29_6 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case BIT_NUM:
				{
				int LA29_7 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case NULL_SYM:
				{
				int LA29_8 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ID:
				{
				int LA29_9 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case ATAN2:
			case CEIL:
			case CEILING:
			case CONV:
			case COS:
			case COT:
			case CRC32:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG:
			case LOG10:
			case LOG2:
			case MOD:
			case PI:
			case POW:
			case POWER:
			case RADIANS:
			case RAND:
			case ROUND:
			case SIGN:
			case SIN:
			case SQRT:
			case TAN:
			case TRUNCATE:
				{
				int LA29_10 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case LOAD_FILE:
			case MAKE_SET:
				{
				int LA29_11 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ADDDATE:
			case ADDTIME:
			case CONVERT_TZ:
			case CURDATE:
			case CURTIME:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case EXTRACT:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case HOUR:
			case LAST_DAY:
			case MAKEDATE:
			case MAKETIME:
			case MICROSECOND:
			case MINUTE:
			case MONTH:
			case MONTHNAME:
			case NOW:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case QUARTER:
			case SECOND:
			case SEC_TO_TIME:
			case STR_TO_DATE:
			case SUBTIME:
			case SYSDATE:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_DAYS:
			case TO_SECONDS:
			case UNIX_TIMESTAMP:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case YEAR:
			case YEARWEEK:
				{
				int LA29_12 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ASCII_SYM:
			case BIN:
			case BIT_LENGTH:
			case CHAR:
			case CHAR_LENGTH:
			case CONCAT:
			case CONCAT_WS:
			case ELT:
			case EXPORT_SET:
			case FIELD:
			case FIND_IN_SET:
			case FORMAT:
			case FROM_BASE64:
			case HEX:
			case INSERT:
			case INSTR:
			case LEFT:
			case LENGTH:
			case LOCATE:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MID:
			case OCT:
			case ORD:
			case QUOTE:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case RPAD:
			case RTRIM:
			case SOUNDEX:
			case SPACE:
			case STRCMP:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case TO_BASE64:
			case TRIM:
			case UNHEX:
			case UPPER:
			case WEIGHT_STRING:
				{
				int LA29_13 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case BENCHMARK:
			case CHARSET:
			case COERCIBILITY:
			case COLLATION:
			case CONNECTION_ID:
			case CURRENT_USER:
			case DATABASE:
			case DECODE:
			case DEFAULT:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ENCODE:
			case ENCRYPT:
			case FOUND_ROWS:
			case GET_LOCK:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case MASTER_POS_WAIT:
			case MD5:
			case NAME_CONST:
			case OLD_PASSWORD:
			case PASSWORD:
			case RELEASE_LOCK:
			case SCHEMA:
			case SESSION_USER:
			case SLEEP:
			case SYSTEM_USER:
			case USER:
			case UUID:
			case VALUES:
			case VERSION_SYM:
				{
				int LA29_14 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CAST_SYM:
				{
				int LA29_15 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CONVERT_SYM:
				{
				int LA29_16 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				int LA29_17 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case USER_VAR:
				{
				int LA29_18 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case LPAREN:
				{
				int LA29_19 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case ROW_SYM:
				{
				int LA29_20 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case EXISTS:
				{
				int LA29_21 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case MATCH:
				{
				int LA29_22 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case CASE_SYM:
				{
				int LA29_23 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			case INTERVAL_SYM:
				{
				int LA29_24 = input.LA(2);
				if ( (synpred283_MySQL()) ) {
					alt29=1;
				}
				else if ( (synpred285_MySQL()) ) {
					alt29=2;
				}
				else if ( (synpred286_MySQL()) ) {
					alt29=3;
				}
				else if ( (synpred289_MySQL()) ) {
					alt29=4;
				}
				else if ( (synpred291_MySQL()) ) {
					alt29=5;
				}
				else if ( (true) ) {
					alt29=6;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}
			switch (alt29) {
				case 1 :
					// MySQL.g:1249:4: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1249:4: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
					// MySQL.g:1249:6: bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list )
					{
					pushFollow(FOLLOW_bit_expr_in_predicate20355);
					bit_expr87=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr87.getTree());

					// MySQL.g:1249:15: ( NOT_SYM )?
					int alt23=2;
					int LA23_0 = input.LA(1);
					if ( (LA23_0==NOT_SYM) ) {
						alt23=1;
					}
					switch (alt23) {
						case 1 :
							// MySQL.g:1249:16: NOT_SYM
							{
							NOT_SYM88=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate20358); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM88_tree = (Object)adaptor.create(NOT_SYM88);
							adaptor.addChild(root_0, NOT_SYM88_tree);
							}

							}
							break;

					}

					IN_SYM89=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_predicate20362); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM89_tree = (Object)adaptor.create(IN_SYM89);
					adaptor.addChild(root_0, IN_SYM89_tree);
					}

					// MySQL.g:1249:33: ( subquery | expression_list )
					int alt24=2;
					int LA24_0 = input.LA(1);
					if ( (LA24_0==LPAREN) ) {
						int LA24_1 = input.LA(2);
						if ( (LA24_1==SELECT) ) {
							alt24=1;
						}
						else if ( (LA24_1==ABS||LA24_1==ACOS||(LA24_1 >= ADDDATE && LA24_1 <= ADDTIME)||(LA24_1 >= AES_DECRYPT && LA24_1 <= AES_ENCRYPT)||LA24_1==ASCII_SYM||LA24_1==ASIN||(LA24_1 >= ATAN && LA24_1 <= ATAN2)||LA24_1==AVG||LA24_1==BENCHMARK||(LA24_1 >= BIN && LA24_1 <= BINARY)||(LA24_1 >= BIT_AND && LA24_1 <= BIT_OR)||LA24_1==BIT_XOR||(LA24_1 >= CASE_SYM && LA24_1 <= CEILING)||LA24_1==CHAR||(LA24_1 >= CHARSET && LA24_1 <= CHAR_LENGTH)||LA24_1==COERCIBILITY||LA24_1==COLLATION||(LA24_1 >= CONCAT && LA24_1 <= CONCAT_WS)||LA24_1==CONNECTION_ID||(LA24_1 >= CONV && LA24_1 <= CONVERT_TZ)||(LA24_1 >= COS && LA24_1 <= COUNT)||LA24_1==CRC32||LA24_1==CURDATE||LA24_1==CURRENT_USER||LA24_1==CURTIME||LA24_1==DATABASE||LA24_1==DATEDIFF||(LA24_1 >= DATE_ADD && LA24_1 <= DAYOFYEAR)||(LA24_1 >= DECODE && LA24_1 <= DEFAULT)||LA24_1==DEGREES||(LA24_1 >= DES_DECRYPT && LA24_1 <= DES_ENCRYPT)||LA24_1==ELT||(LA24_1 >= ENCODE && LA24_1 <= ENCRYPT)||LA24_1==EXISTS||LA24_1==EXP||LA24_1==EXPORT_SET||LA24_1==EXTRACT||LA24_1==FALSE_SYM||LA24_1==FIELD||LA24_1==FIND_IN_SET||LA24_1==FLOOR||LA24_1==FORMAT||LA24_1==FOUND_ROWS||(LA24_1 >= FROM_BASE64 && LA24_1 <= FROM_UNIXTIME)||(LA24_1 >= GET_FORMAT && LA24_1 <= GET_LOCK)||LA24_1==GROUP_CONCAT||(LA24_1 >= HEX && LA24_1 <= HEX_DIGIT)||LA24_1==HOUR||LA24_1==ID||(LA24_1 >= IF && LA24_1 <= IFNULL)||(LA24_1 >= INET_ATON && LA24_1 <= INET_NTOA)||LA24_1==INSERT||(LA24_1 >= INSTR && LA24_1 <= INTEGER_NUM)||LA24_1==INTERVAL_SYM||LA24_1==IS_FREE_LOCK||LA24_1==IS_USED_LOCK||(LA24_1 >= LAST_DAY && LA24_1 <= LAST_INSERT_ID)||(LA24_1 >= LEFT && LA24_1 <= LENGTH)||LA24_1==LN||LA24_1==LOAD_FILE||LA24_1==LOCATE||(LA24_1 >= LOG && LA24_1 <= LOG2)||LA24_1==LOWER||(LA24_1 >= LPAD && LA24_1 <= LPAREN)||LA24_1==LTRIM||(LA24_1 >= MAKEDATE && LA24_1 <= MAKE_SET)||LA24_1==MASTER_POS_WAIT||LA24_1==MATCH||LA24_1==MAX_SYM||LA24_1==MD5||(LA24_1 >= MICROSECOND && LA24_1 <= MID)||(LA24_1 >= MINUS && LA24_1 <= MINUTE)||LA24_1==MIN_SYM||LA24_1==MOD||(LA24_1 >= MONTH && LA24_1 <= MONTHNAME)||LA24_1==NAME_CONST||LA24_1==NEGATION||(LA24_1 >= NOT_SYM && LA24_1 <= NOW)||LA24_1==NULL_SYM||LA24_1==OCT||LA24_1==OLD_PASSWORD||LA24_1==ORD||(LA24_1 >= PASSWORD && LA24_1 <= PERIOD_DIFF)||LA24_1==PI||LA24_1==PLUS||(LA24_1 >= POW && LA24_1 <= POWER)||LA24_1==QUARTER||LA24_1==QUOTE||(LA24_1 >= RADIANS && LA24_1 <= RAND)||LA24_1==REAL_NUMBER||LA24_1==RELEASE_LOCK||LA24_1==REPEAT||LA24_1==REPLACE||LA24_1==REVERSE||LA24_1==RIGHT||LA24_1==ROUND||(LA24_1 >= ROW_SYM && LA24_1 <= RPAD)||LA24_1==RTRIM||(LA24_1 >= SCHEMA && LA24_1 <= SECOND)||LA24_1==SEC_TO_TIME||LA24_1==SESSION_USER||LA24_1==SIGN||LA24_1==SIN||LA24_1==SLEEP||LA24_1==SOUNDEX||LA24_1==SPACE||LA24_1==SQRT||(LA24_1 >= STD && LA24_1 <= STDDEV_SAMP)||LA24_1==STRCMP||LA24_1==STR_TO_DATE||(LA24_1 >= SUBSTRING && LA24_1 <= SUM)||(LA24_1 >= SYSDATE && LA24_1 <= SYSTEM_USER)||LA24_1==TAN||LA24_1==TEXT_STRING||(LA24_1 >= TIMEDIFF && LA24_1 <= TIME_TO_SEC)||(LA24_1 >= TO_BASE64 && LA24_1 <= TO_SECONDS)||(LA24_1 >= TRIM && LA24_1 <= TRUNCATE)||LA24_1==UNHEX||LA24_1==UNIX_TIMESTAMP||LA24_1==UPPER||(LA24_1 >= USER && LA24_1 <= USER_VAR)||(LA24_1 >= UTC_DATE && LA24_1 <= UTC_TIMESTAMP)||LA24_1==UUID||LA24_1==VALUES||LA24_1==VARIANCE||(LA24_1 >= VAR_POP && LA24_1 <= VERSION_SYM)||(LA24_1 >= WEEK && LA24_1 <= WEIGHT_STRING)||(LA24_1 >= YEAR && LA24_1 <= YEARWEEK)) ) {
							alt24=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 24, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 24, 0, input);
						throw nvae;
					}

					switch (alt24) {
						case 1 :
							// MySQL.g:1249:34: subquery
							{
							pushFollow(FOLLOW_subquery_in_predicate20365);
							subquery90=subquery();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery90.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1249:45: expression_list
							{
							pushFollow(FOLLOW_expression_list_in_predicate20369);
							expression_list91=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list91.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1250:4: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1250:4: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
					// MySQL.g:1250:6: bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate
					{
					pushFollow(FOLLOW_bit_expr_in_predicate20379);
					bit_expr92=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr92.getTree());

					// MySQL.g:1250:15: ( NOT_SYM )?
					int alt25=2;
					int LA25_0 = input.LA(1);
					if ( (LA25_0==NOT_SYM) ) {
						alt25=1;
					}
					switch (alt25) {
						case 1 :
							// MySQL.g:1250:16: NOT_SYM
							{
							NOT_SYM93=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate20382); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM93_tree = (Object)adaptor.create(NOT_SYM93);
							adaptor.addChild(root_0, NOT_SYM93_tree);
							}

							}
							break;

					}

					BETWEEN94=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_predicate20386); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BETWEEN94_tree = (Object)adaptor.create(BETWEEN94);
					adaptor.addChild(root_0, BETWEEN94_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate20388);
					bit_expr95=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr95.getTree());

					AND_SYM96=(Token)match(input,AND_SYM,FOLLOW_AND_SYM_in_predicate20390); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AND_SYM96_tree = (Object)adaptor.create(AND_SYM96);
					adaptor.addChild(root_0, AND_SYM96_tree);
					}

					pushFollow(FOLLOW_predicate_in_predicate20392);
					predicate97=predicate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, predicate97.getTree());

					}

					}
					break;
				case 3 :
					// MySQL.g:1251:4: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1251:4: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
					// MySQL.g:1251:6: bit_expr SOUNDS_SYM LIKE_SYM bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate20402);
					bit_expr98=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr98.getTree());

					SOUNDS_SYM99=(Token)match(input,SOUNDS_SYM,FOLLOW_SOUNDS_SYM_in_predicate20404); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SOUNDS_SYM99_tree = (Object)adaptor.create(SOUNDS_SYM99);
					adaptor.addChild(root_0, SOUNDS_SYM99_tree);
					}

					LIKE_SYM100=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_predicate20406); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM100_tree = (Object)adaptor.create(LIKE_SYM100);
					adaptor.addChild(root_0, LIKE_SYM100_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate20408);
					bit_expr101=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr101.getTree());

					}

					}
					break;
				case 4 :
					// MySQL.g:1252:4: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1252:4: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
					// MySQL.g:1252:6: bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )?
					{
					pushFollow(FOLLOW_bit_expr_in_predicate20418);
					bit_expr102=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr102.getTree());

					// MySQL.g:1252:15: ( NOT_SYM )?
					int alt26=2;
					int LA26_0 = input.LA(1);
					if ( (LA26_0==NOT_SYM) ) {
						alt26=1;
					}
					switch (alt26) {
						case 1 :
							// MySQL.g:1252:16: NOT_SYM
							{
							NOT_SYM103=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate20421); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM103_tree = (Object)adaptor.create(NOT_SYM103);
							adaptor.addChild(root_0, NOT_SYM103_tree);
							}

							}
							break;

					}

					LIKE_SYM104=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_predicate20425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM104_tree = (Object)adaptor.create(LIKE_SYM104);
					adaptor.addChild(root_0, LIKE_SYM104_tree);
					}

					pushFollow(FOLLOW_simple_expr_in_predicate20427);
					simple_expr105=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr105.getTree());

					// MySQL.g:1252:47: ( ESCAPE_SYM simple_expr )?
					int alt27=2;
					int LA27_0 = input.LA(1);
					if ( (LA27_0==ESCAPE_SYM) ) {
						int LA27_1 = input.LA(2);
						if ( (synpred288_MySQL()) ) {
							alt27=1;
						}
					}
					switch (alt27) {
						case 1 :
							// MySQL.g:1252:48: ESCAPE_SYM simple_expr
							{
							ESCAPE_SYM106=(Token)match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_predicate20430); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ESCAPE_SYM106_tree = (Object)adaptor.create(ESCAPE_SYM106);
							adaptor.addChild(root_0, ESCAPE_SYM106_tree);
							}

							pushFollow(FOLLOW_simple_expr_in_predicate20432);
							simple_expr107=simple_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr107.getTree());

							}
							break;

					}

					}

					}
					break;
				case 5 :
					// MySQL.g:1253:4: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1253:4: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
					// MySQL.g:1253:6: bit_expr ( NOT_SYM )? REGEXP bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate20443);
					bit_expr108=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr108.getTree());

					// MySQL.g:1253:15: ( NOT_SYM )?
					int alt28=2;
					int LA28_0 = input.LA(1);
					if ( (LA28_0==NOT_SYM) ) {
						alt28=1;
					}
					switch (alt28) {
						case 1 :
							// MySQL.g:1253:16: NOT_SYM
							{
							NOT_SYM109=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_predicate20446); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM109_tree = (Object)adaptor.create(NOT_SYM109);
							adaptor.addChild(root_0, NOT_SYM109_tree);
							}

							}
							break;

					}

					REGEXP110=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_predicate20450); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REGEXP110_tree = (Object)adaptor.create(REGEXP110);
					adaptor.addChild(root_0, REGEXP110_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_predicate20452);
					bit_expr111=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr111.getTree());

					}

					}
					break;
				case 6 :
					// MySQL.g:1254:4: ( bit_expr )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1254:4: ( bit_expr )
					// MySQL.g:1254:6: bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_predicate20462);
					bit_expr112=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr112.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "predicate"


	public static class bit_expr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bit_expr"
	// MySQL.g:1256:1: bit_expr : factor1 ( VERTBAR factor1 )? ;
	public final MySQLParser.bit_expr_return bit_expr() throws RecognitionException {
		MySQLParser.bit_expr_return retval = new MySQLParser.bit_expr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token VERTBAR114=null;
		ParserRuleReturnScope factor1113 =null;
		ParserRuleReturnScope factor1115 =null;

		Object VERTBAR114_tree=null;

		try {
			// MySQL.g:1256:9: ( factor1 ( VERTBAR factor1 )? )
			// MySQL.g:1257:2: factor1 ( VERTBAR factor1 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor1_in_bit_expr20474);
			factor1113=factor1();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor1113.getTree());

			// MySQL.g:1257:10: ( VERTBAR factor1 )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==VERTBAR) ) {
				int LA30_1 = input.LA(2);
				if ( (synpred292_MySQL()) ) {
					alt30=1;
				}
			}
			switch (alt30) {
				case 1 :
					// MySQL.g:1257:12: VERTBAR factor1
					{
					VERTBAR114=(Token)match(input,VERTBAR,FOLLOW_VERTBAR_in_bit_expr20478); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VERTBAR114_tree = (Object)adaptor.create(VERTBAR114);
					adaptor.addChild(root_0, VERTBAR114_tree);
					}

					pushFollow(FOLLOW_factor1_in_bit_expr20480);
					factor1115=factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor1115.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bit_expr"


	public static class factor1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor1"
	// MySQL.g:1258:1: factor1 : factor2 ( BITAND factor2 )? ;
	public final MySQLParser.factor1_return factor1() throws RecognitionException {
		MySQLParser.factor1_return retval = new MySQLParser.factor1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BITAND117=null;
		ParserRuleReturnScope factor2116 =null;
		ParserRuleReturnScope factor2118 =null;

		Object BITAND117_tree=null;

		try {
			// MySQL.g:1258:8: ( factor2 ( BITAND factor2 )? )
			// MySQL.g:1259:2: factor2 ( BITAND factor2 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor2_in_factor120491);
			factor2116=factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor2116.getTree());

			// MySQL.g:1259:10: ( BITAND factor2 )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==BITAND) ) {
				int LA31_1 = input.LA(2);
				if ( (synpred293_MySQL()) ) {
					alt31=1;
				}
			}
			switch (alt31) {
				case 1 :
					// MySQL.g:1259:12: BITAND factor2
					{
					BITAND117=(Token)match(input,BITAND,FOLLOW_BITAND_in_factor120495); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BITAND117_tree = (Object)adaptor.create(BITAND117);
					adaptor.addChild(root_0, BITAND117_tree);
					}

					pushFollow(FOLLOW_factor2_in_factor120497);
					factor2118=factor2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor2118.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor1"


	public static class factor2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor2"
	// MySQL.g:1260:1: factor2 : factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )? ;
	public final MySQLParser.factor2_return factor2() throws RecognitionException {
		MySQLParser.factor2_return retval = new MySQLParser.factor2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set120=null;
		ParserRuleReturnScope factor3119 =null;
		ParserRuleReturnScope factor3121 =null;

		Object set120_tree=null;

		try {
			// MySQL.g:1260:8: ( factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )? )
			// MySQL.g:1261:2: factor3 ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor3_in_factor220508);
			factor3119=factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor3119.getTree());

			// MySQL.g:1261:10: ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( ((LA32_0 >= SHIFT_LEFT && LA32_0 <= SHIFT_RIGHT)) ) {
				int LA32_1 = input.LA(2);
				if ( (synpred295_MySQL()) ) {
					alt32=1;
				}
			}
			switch (alt32) {
				case 1 :
					// MySQL.g:1261:12: ( SHIFT_LEFT | SHIFT_RIGHT ) factor3
					{
					set120=input.LT(1);
					if ( (input.LA(1) >= SHIFT_LEFT && input.LA(1) <= SHIFT_RIGHT) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set120));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor3_in_factor220518);
					factor3121=factor3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor3121.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor2"


	public static class factor3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor3"
	// MySQL.g:1262:1: factor3 : factor4 ( ( PLUS | MINUS ) factor4 )? ;
	public final MySQLParser.factor3_return factor3() throws RecognitionException {
		MySQLParser.factor3_return retval = new MySQLParser.factor3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set123=null;
		ParserRuleReturnScope factor4122 =null;
		ParserRuleReturnScope factor4124 =null;

		Object set123_tree=null;

		try {
			// MySQL.g:1262:8: ( factor4 ( ( PLUS | MINUS ) factor4 )? )
			// MySQL.g:1263:2: factor4 ( ( PLUS | MINUS ) factor4 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor4_in_factor320529);
			factor4122=factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor4122.getTree());

			// MySQL.g:1263:10: ( ( PLUS | MINUS ) factor4 )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==MINUS||LA33_0==PLUS) ) {
				int LA33_1 = input.LA(2);
				if ( (synpred297_MySQL()) ) {
					alt33=1;
				}
			}
			switch (alt33) {
				case 1 :
					// MySQL.g:1263:12: ( PLUS | MINUS ) factor4
					{
					set123=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set123));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor4_in_factor320539);
					factor4124=factor4();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor4124.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor3"


	public static class factor4_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor4"
	// MySQL.g:1264:1: factor4 : factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )? ;
	public final MySQLParser.factor4_return factor4() throws RecognitionException {
		MySQLParser.factor4_return retval = new MySQLParser.factor4_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set126=null;
		ParserRuleReturnScope factor5125 =null;
		ParserRuleReturnScope factor5127 =null;

		Object set126_tree=null;

		try {
			// MySQL.g:1264:8: ( factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )? )
			// MySQL.g:1265:2: factor5 ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor5_in_factor420550);
			factor5125=factor5();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor5125.getTree());

			// MySQL.g:1265:10: ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )?
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==ASTERISK||LA34_0==DIVIDE||LA34_0==MOD_SYM||LA34_0==POWER_OP) ) {
				int LA34_1 = input.LA(2);
				if ( (synpred301_MySQL()) ) {
					alt34=1;
				}
			}
			switch (alt34) {
				case 1 :
					// MySQL.g:1265:12: ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5
					{
					set126=input.LT(1);
					if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE||input.LA(1)==MOD_SYM||input.LA(1)==POWER_OP ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set126));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_factor5_in_factor420564);
					factor5127=factor5();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, factor5127.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor4"


	public static class factor5_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor5"
	// MySQL.g:1266:1: factor5 : factor6 ( ( PLUS | MINUS ) interval_expr )? ;
	public final MySQLParser.factor5_return factor5() throws RecognitionException {
		MySQLParser.factor5_return retval = new MySQLParser.factor5_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set129=null;
		ParserRuleReturnScope factor6128 =null;
		ParserRuleReturnScope interval_expr130 =null;

		Object set129_tree=null;

		try {
			// MySQL.g:1266:8: ( factor6 ( ( PLUS | MINUS ) interval_expr )? )
			// MySQL.g:1267:2: factor6 ( ( PLUS | MINUS ) interval_expr )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_factor6_in_factor520575);
			factor6128=factor6();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, factor6128.getTree());

			// MySQL.g:1267:10: ( ( PLUS | MINUS ) interval_expr )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==MINUS||LA35_0==PLUS) ) {
				int LA35_1 = input.LA(2);
				if ( (synpred303_MySQL()) ) {
					alt35=1;
				}
			}
			switch (alt35) {
				case 1 :
					// MySQL.g:1267:12: ( PLUS | MINUS ) interval_expr
					{
					set129=input.LT(1);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set129));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_interval_expr_in_factor520585);
					interval_expr130=interval_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_expr130.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor5"


	public static class factor6_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor6"
	// MySQL.g:1268:1: factor6 : ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr | simple_expr );
	public final MySQLParser.factor6_return factor6() throws RecognitionException {
		MySQLParser.factor6_return retval = new MySQLParser.factor6_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set131=null;
		ParserRuleReturnScope simple_expr132 =null;
		ParserRuleReturnScope simple_expr133 =null;

		Object set131_tree=null;

		try {
			// MySQL.g:1268:8: ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr | simple_expr )
			int alt36=2;
			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA36_1 = input.LA(2);
				if ( (LA36_1==ABS||LA36_1==ACOS||(LA36_1 >= ADDDATE && LA36_1 <= ADDTIME)||(LA36_1 >= AES_DECRYPT && LA36_1 <= AES_ENCRYPT)||LA36_1==ASCII_SYM||LA36_1==ASIN||(LA36_1 >= ATAN && LA36_1 <= ATAN2)||LA36_1==AVG||LA36_1==BENCHMARK||LA36_1==BIN||(LA36_1 >= BIT_AND && LA36_1 <= BIT_OR)||LA36_1==BIT_XOR||(LA36_1 >= CASE_SYM && LA36_1 <= CEILING)||LA36_1==CHAR||(LA36_1 >= CHARSET && LA36_1 <= CHAR_LENGTH)||LA36_1==COERCIBILITY||LA36_1==COLLATION||(LA36_1 >= CONCAT && LA36_1 <= CONCAT_WS)||LA36_1==CONNECTION_ID||(LA36_1 >= CONV && LA36_1 <= CONVERT_TZ)||(LA36_1 >= COS && LA36_1 <= COUNT)||LA36_1==CRC32||LA36_1==CURDATE||LA36_1==CURRENT_USER||LA36_1==CURTIME||LA36_1==DATABASE||LA36_1==DATEDIFF||(LA36_1 >= DATE_ADD && LA36_1 <= DAYOFYEAR)||(LA36_1 >= DECODE && LA36_1 <= DEFAULT)||LA36_1==DEGREES||(LA36_1 >= DES_DECRYPT && LA36_1 <= DES_ENCRYPT)||LA36_1==ELT||(LA36_1 >= ENCODE && LA36_1 <= ENCRYPT)||LA36_1==EXISTS||LA36_1==EXP||LA36_1==EXPORT_SET||LA36_1==EXTRACT||LA36_1==FALSE_SYM||LA36_1==FIELD||LA36_1==FIND_IN_SET||LA36_1==FLOOR||LA36_1==FORMAT||LA36_1==FOUND_ROWS||(LA36_1 >= FROM_BASE64 && LA36_1 <= FROM_UNIXTIME)||(LA36_1 >= GET_FORMAT && LA36_1 <= GET_LOCK)||LA36_1==GROUP_CONCAT||(LA36_1 >= HEX && LA36_1 <= HEX_DIGIT)||LA36_1==HOUR||LA36_1==ID||(LA36_1 >= IF && LA36_1 <= IFNULL)||(LA36_1 >= INET_ATON && LA36_1 <= INET_NTOA)||LA36_1==INSERT||LA36_1==INSTR||LA36_1==INTERVAL_SYM||LA36_1==IS_FREE_LOCK||LA36_1==IS_USED_LOCK||(LA36_1 >= LAST_DAY && LA36_1 <= LAST_INSERT_ID)||(LA36_1 >= LEFT && LA36_1 <= LENGTH)||LA36_1==LN||LA36_1==LOAD_FILE||LA36_1==LOCATE||(LA36_1 >= LOG && LA36_1 <= LOG2)||LA36_1==LOWER||(LA36_1 >= LPAD && LA36_1 <= LPAREN)||LA36_1==LTRIM||(LA36_1 >= MAKEDATE && LA36_1 <= MAKE_SET)||LA36_1==MASTER_POS_WAIT||LA36_1==MATCH||LA36_1==MAX_SYM||LA36_1==MD5||(LA36_1 >= MICROSECOND && LA36_1 <= MID)||(LA36_1 >= MINUS && LA36_1 <= MINUTE)||LA36_1==MIN_SYM||LA36_1==MOD||(LA36_1 >= MONTH && LA36_1 <= MONTHNAME)||LA36_1==NAME_CONST||LA36_1==NOW||LA36_1==NULL_SYM||LA36_1==OCT||LA36_1==OLD_PASSWORD||LA36_1==ORD||(LA36_1 >= PASSWORD && LA36_1 <= PERIOD_DIFF)||LA36_1==PI||LA36_1==PLUS||(LA36_1 >= POW && LA36_1 <= POWER)||LA36_1==QUARTER||LA36_1==QUOTE||(LA36_1 >= RADIANS && LA36_1 <= RAND)||LA36_1==RELEASE_LOCK||LA36_1==REPEAT||LA36_1==REPLACE||LA36_1==REVERSE||LA36_1==RIGHT||LA36_1==ROUND||(LA36_1 >= ROW_SYM && LA36_1 <= RPAD)||LA36_1==RTRIM||(LA36_1 >= SCHEMA && LA36_1 <= SECOND)||LA36_1==SEC_TO_TIME||LA36_1==SESSION_USER||LA36_1==SIGN||LA36_1==SIN||LA36_1==SLEEP||LA36_1==SOUNDEX||LA36_1==SPACE||LA36_1==SQRT||(LA36_1 >= STD && LA36_1 <= STDDEV_SAMP)||LA36_1==STRCMP||LA36_1==STR_TO_DATE||(LA36_1 >= SUBSTRING && LA36_1 <= SUM)||(LA36_1 >= SYSDATE && LA36_1 <= SYSTEM_USER)||LA36_1==TAN||LA36_1==TEXT_STRING||(LA36_1 >= TIMEDIFF && LA36_1 <= TIME_TO_SEC)||(LA36_1 >= TO_BASE64 && LA36_1 <= TO_SECONDS)||(LA36_1 >= TRIM && LA36_1 <= TRUNCATE)||LA36_1==UNHEX||LA36_1==UNIX_TIMESTAMP||LA36_1==UPPER||(LA36_1 >= USER && LA36_1 <= USER_VAR)||(LA36_1 >= UTC_DATE && LA36_1 <= UTC_TIMESTAMP)||LA36_1==UUID||LA36_1==VALUES||LA36_1==VARIANCE||(LA36_1 >= VAR_POP && LA36_1 <= VERSION_SYM)||(LA36_1 >= WEEK && LA36_1 <= WEIGHT_STRING)||(LA36_1 >= YEAR && LA36_1 <= YEARWEEK)) ) {
					alt36=1;
				}
				else if ( (LA36_1==INTEGER_NUM||LA36_1==REAL_NUMBER) ) {
					int LA36_4 = input.LA(3);
					if ( (synpred307_MySQL()) ) {
						alt36=1;
					}
					else if ( (true) ) {
						alt36=2;
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 36, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_NUM:
			case BIT_OR:
			case BIT_XOR:
			case CASE_SYM:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXISTS:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FALSE_SYM:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HEX_DIGIT:
			case HOUR:
			case ID:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case INTEGER_NUM:
			case INTERVAL_SYM:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LPAREN:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MATCH:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case NULL_SYM:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case REAL_NUMBER:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case ROW_SYM:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TEXT_STRING:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUE_SYM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case USER_VAR:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt36=2;
				}
				break;
			case BINARY:
			case NEGATION:
				{
				alt36=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 36, 0, input);
				throw nvae;
			}
			switch (alt36) {
				case 1 :
					// MySQL.g:1269:2: ( PLUS | MINUS | NEGATION | BINARY ) simple_expr
					{
					root_0 = (Object)adaptor.nil();


					set131=input.LT(1);
					if ( input.LA(1)==BINARY||input.LA(1)==MINUS||input.LA(1)==NEGATION||input.LA(1)==PLUS ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set131));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_simple_expr_in_factor620612);
					simple_expr132=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr132.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1270:4: simple_expr
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_simple_expr_in_factor620617);
					simple_expr133=simple_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr133.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor6"


	public static class factor7_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "factor7"
	// MySQL.g:1271:1: factor7 : simple_expr ( COLLATE_SYM collation_names )? ;
	public final MySQLParser.factor7_return factor7() throws RecognitionException {
		MySQLParser.factor7_return retval = new MySQLParser.factor7_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COLLATE_SYM135=null;
		ParserRuleReturnScope simple_expr134 =null;
		ParserRuleReturnScope collation_names136 =null;

		Object COLLATE_SYM135_tree=null;

		try {
			// MySQL.g:1271:8: ( simple_expr ( COLLATE_SYM collation_names )? )
			// MySQL.g:1272:2: simple_expr ( COLLATE_SYM collation_names )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_simple_expr_in_factor720625);
			simple_expr134=simple_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expr134.getTree());

			// MySQL.g:1272:14: ( COLLATE_SYM collation_names )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==COLLATE_SYM) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// MySQL.g:1272:15: COLLATE_SYM collation_names
					{
					COLLATE_SYM135=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_factor720628); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM135_tree = (Object)adaptor.create(COLLATE_SYM135);
					adaptor.addChild(root_0, COLLATE_SYM135_tree);
					}

					pushFollow(FOLLOW_collation_names_in_factor720630);
					collation_names136=collation_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_names136.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factor7"


	public static class simple_expr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simple_expr"
	// MySQL.g:1273:1: simple_expr : ( literal_value | column_spec | function_call | USER_VAR | expression_list | ( ROW_SYM expression_list ) | subquery | EXISTS subquery | match_against_statement | case_when_statement | interval_expr );
	public final MySQLParser.simple_expr_return simple_expr() throws RecognitionException {
		MySQLParser.simple_expr_return retval = new MySQLParser.simple_expr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USER_VAR140=null;
		Token ROW_SYM142=null;
		Token EXISTS145=null;
		ParserRuleReturnScope literal_value137 =null;
		ParserRuleReturnScope column_spec138 =null;
		ParserRuleReturnScope function_call139 =null;
		ParserRuleReturnScope expression_list141 =null;
		ParserRuleReturnScope expression_list143 =null;
		ParserRuleReturnScope subquery144 =null;
		ParserRuleReturnScope subquery146 =null;
		ParserRuleReturnScope match_against_statement147 =null;
		ParserRuleReturnScope case_when_statement148 =null;
		ParserRuleReturnScope interval_expr149 =null;

		Object USER_VAR140_tree=null;
		Object ROW_SYM142_tree=null;
		Object EXISTS145_tree=null;

		try {
			// MySQL.g:1273:12: ( literal_value | column_spec | function_call | USER_VAR | expression_list | ( ROW_SYM expression_list ) | subquery | EXISTS subquery | match_against_statement | case_when_statement | interval_expr )
			int alt38=11;
			switch ( input.LA(1) ) {
			case BIT_NUM:
			case FALSE_SYM:
			case HEX_DIGIT:
			case INTEGER_NUM:
			case MINUS:
			case NULL_SYM:
			case PLUS:
			case REAL_NUMBER:
			case TEXT_STRING:
			case TRUE_SYM:
				{
				alt38=1;
				}
				break;
			case ID:
				{
				alt38=2;
				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_OR:
			case BIT_XOR:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt38=3;
				}
				break;
			case USER_VAR:
				{
				alt38=4;
				}
				break;
			case LPAREN:
				{
				int LA38_5 = input.LA(2);
				if ( (LA38_5==ABS||LA38_5==ACOS||(LA38_5 >= ADDDATE && LA38_5 <= ADDTIME)||(LA38_5 >= AES_DECRYPT && LA38_5 <= AES_ENCRYPT)||LA38_5==ASCII_SYM||LA38_5==ASIN||(LA38_5 >= ATAN && LA38_5 <= ATAN2)||LA38_5==AVG||LA38_5==BENCHMARK||(LA38_5 >= BIN && LA38_5 <= BINARY)||(LA38_5 >= BIT_AND && LA38_5 <= BIT_OR)||LA38_5==BIT_XOR||(LA38_5 >= CASE_SYM && LA38_5 <= CEILING)||LA38_5==CHAR||(LA38_5 >= CHARSET && LA38_5 <= CHAR_LENGTH)||LA38_5==COERCIBILITY||LA38_5==COLLATION||(LA38_5 >= CONCAT && LA38_5 <= CONCAT_WS)||LA38_5==CONNECTION_ID||(LA38_5 >= CONV && LA38_5 <= CONVERT_TZ)||(LA38_5 >= COS && LA38_5 <= COUNT)||LA38_5==CRC32||LA38_5==CURDATE||LA38_5==CURRENT_USER||LA38_5==CURTIME||LA38_5==DATABASE||LA38_5==DATEDIFF||(LA38_5 >= DATE_ADD && LA38_5 <= DAYOFYEAR)||(LA38_5 >= DECODE && LA38_5 <= DEFAULT)||LA38_5==DEGREES||(LA38_5 >= DES_DECRYPT && LA38_5 <= DES_ENCRYPT)||LA38_5==ELT||(LA38_5 >= ENCODE && LA38_5 <= ENCRYPT)||LA38_5==EXISTS||LA38_5==EXP||LA38_5==EXPORT_SET||LA38_5==EXTRACT||LA38_5==FALSE_SYM||LA38_5==FIELD||LA38_5==FIND_IN_SET||LA38_5==FLOOR||LA38_5==FORMAT||LA38_5==FOUND_ROWS||(LA38_5 >= FROM_BASE64 && LA38_5 <= FROM_UNIXTIME)||(LA38_5 >= GET_FORMAT && LA38_5 <= GET_LOCK)||LA38_5==GROUP_CONCAT||(LA38_5 >= HEX && LA38_5 <= HEX_DIGIT)||LA38_5==HOUR||LA38_5==ID||(LA38_5 >= IF && LA38_5 <= IFNULL)||(LA38_5 >= INET_ATON && LA38_5 <= INET_NTOA)||LA38_5==INSERT||(LA38_5 >= INSTR && LA38_5 <= INTEGER_NUM)||LA38_5==INTERVAL_SYM||LA38_5==IS_FREE_LOCK||LA38_5==IS_USED_LOCK||(LA38_5 >= LAST_DAY && LA38_5 <= LAST_INSERT_ID)||(LA38_5 >= LEFT && LA38_5 <= LENGTH)||LA38_5==LN||LA38_5==LOAD_FILE||LA38_5==LOCATE||(LA38_5 >= LOG && LA38_5 <= LOG2)||LA38_5==LOWER||(LA38_5 >= LPAD && LA38_5 <= LPAREN)||LA38_5==LTRIM||(LA38_5 >= MAKEDATE && LA38_5 <= MAKE_SET)||LA38_5==MASTER_POS_WAIT||LA38_5==MATCH||LA38_5==MAX_SYM||LA38_5==MD5||(LA38_5 >= MICROSECOND && LA38_5 <= MID)||(LA38_5 >= MINUS && LA38_5 <= MINUTE)||LA38_5==MIN_SYM||LA38_5==MOD||(LA38_5 >= MONTH && LA38_5 <= MONTHNAME)||LA38_5==NAME_CONST||LA38_5==NEGATION||(LA38_5 >= NOT_SYM && LA38_5 <= NOW)||LA38_5==NULL_SYM||LA38_5==OCT||LA38_5==OLD_PASSWORD||LA38_5==ORD||(LA38_5 >= PASSWORD && LA38_5 <= PERIOD_DIFF)||LA38_5==PI||LA38_5==PLUS||(LA38_5 >= POW && LA38_5 <= POWER)||LA38_5==QUARTER||LA38_5==QUOTE||(LA38_5 >= RADIANS && LA38_5 <= RAND)||LA38_5==REAL_NUMBER||LA38_5==RELEASE_LOCK||LA38_5==REPEAT||LA38_5==REPLACE||LA38_5==REVERSE||LA38_5==RIGHT||LA38_5==ROUND||(LA38_5 >= ROW_SYM && LA38_5 <= RPAD)||LA38_5==RTRIM||(LA38_5 >= SCHEMA && LA38_5 <= SECOND)||LA38_5==SEC_TO_TIME||LA38_5==SESSION_USER||LA38_5==SIGN||LA38_5==SIN||LA38_5==SLEEP||LA38_5==SOUNDEX||LA38_5==SPACE||LA38_5==SQRT||(LA38_5 >= STD && LA38_5 <= STDDEV_SAMP)||LA38_5==STRCMP||LA38_5==STR_TO_DATE||(LA38_5 >= SUBSTRING && LA38_5 <= SUM)||(LA38_5 >= SYSDATE && LA38_5 <= SYSTEM_USER)||LA38_5==TAN||LA38_5==TEXT_STRING||(LA38_5 >= TIMEDIFF && LA38_5 <= TIME_TO_SEC)||(LA38_5 >= TO_BASE64 && LA38_5 <= TO_SECONDS)||(LA38_5 >= TRIM && LA38_5 <= TRUNCATE)||LA38_5==UNHEX||LA38_5==UNIX_TIMESTAMP||LA38_5==UPPER||(LA38_5 >= USER && LA38_5 <= USER_VAR)||(LA38_5 >= UTC_DATE && LA38_5 <= UTC_TIMESTAMP)||LA38_5==UUID||LA38_5==VALUES||LA38_5==VARIANCE||(LA38_5 >= VAR_POP && LA38_5 <= VERSION_SYM)||(LA38_5 >= WEEK && LA38_5 <= WEIGHT_STRING)||(LA38_5 >= YEAR && LA38_5 <= YEARWEEK)) ) {
					alt38=5;
				}
				else if ( (LA38_5==SELECT) ) {
					alt38=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 38, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ROW_SYM:
				{
				alt38=6;
				}
				break;
			case EXISTS:
				{
				alt38=8;
				}
				break;
			case MATCH:
				{
				alt38=9;
				}
				break;
			case CASE_SYM:
				{
				alt38=10;
				}
				break;
			case INTERVAL_SYM:
				{
				alt38=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}
			switch (alt38) {
				case 1 :
					// MySQL.g:1274:2: literal_value
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_literal_value_in_simple_expr20639);
					literal_value137=literal_value();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value137.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1275:4: column_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_column_spec_in_simple_expr20645);
					column_spec138=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec138.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1276:4: function_call
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_function_call_in_simple_expr20650);
					function_call139=function_call();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call139.getTree());

					}
					break;
				case 4 :
					// MySQL.g:1278:4: USER_VAR
					{
					root_0 = (Object)adaptor.nil();


					USER_VAR140=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_simple_expr20657); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USER_VAR140_tree = (Object)adaptor.create(USER_VAR140);
					adaptor.addChild(root_0, USER_VAR140_tree);
					}

					}
					break;
				case 5 :
					// MySQL.g:1279:4: expression_list
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_expression_list_in_simple_expr20662);
					expression_list141=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list141.getTree());

					}
					break;
				case 6 :
					// MySQL.g:1280:4: ( ROW_SYM expression_list )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1280:4: ( ROW_SYM expression_list )
					// MySQL.g:1280:5: ROW_SYM expression_list
					{
					ROW_SYM142=(Token)match(input,ROW_SYM,FOLLOW_ROW_SYM_in_simple_expr20668); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROW_SYM142_tree = (Object)adaptor.create(ROW_SYM142);
					adaptor.addChild(root_0, ROW_SYM142_tree);
					}

					pushFollow(FOLLOW_expression_list_in_simple_expr20670);
					expression_list143=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list143.getTree());

					}

					}
					break;
				case 7 :
					// MySQL.g:1281:4: subquery
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subquery_in_simple_expr20676);
					subquery144=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery144.getTree());

					}
					break;
				case 8 :
					// MySQL.g:1282:4: EXISTS subquery
					{
					root_0 = (Object)adaptor.nil();


					EXISTS145=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_simple_expr20681); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS145_tree = (Object)adaptor.create(EXISTS145);
					adaptor.addChild(root_0, EXISTS145_tree);
					}

					pushFollow(FOLLOW_subquery_in_simple_expr20683);
					subquery146=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery146.getTree());

					}
					break;
				case 9 :
					// MySQL.g:1284:4: match_against_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_match_against_statement_in_simple_expr20690);
					match_against_statement147=match_against_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, match_against_statement147.getTree());

					}
					break;
				case 10 :
					// MySQL.g:1285:4: case_when_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement_in_simple_expr20695);
					case_when_statement148=case_when_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement148.getTree());

					}
					break;
				case 11 :
					// MySQL.g:1286:4: interval_expr
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_interval_expr_in_simple_expr20700);
					interval_expr149=interval_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_expr149.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_expr"


	public static class function_call_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "function_call"
	// MySQL.g:1290:1: function_call : ( ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ) | ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) | ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN ) );
	public final MySQLParser.function_call_return function_call() throws RecognitionException {
		MySQLParser.function_call_return retval = new MySQLParser.function_call_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN151=null;
		Token COMMA153=null;
		Token RPAREN155=null;
		Token CAST_SYM156=null;
		Token LPAREN157=null;
		Token AS_SYM159=null;
		Token RPAREN161=null;
		Token CONVERT_SYM162=null;
		Token LPAREN163=null;
		Token COMMA165=null;
		Token RPAREN167=null;
		Token CONVERT_SYM168=null;
		Token LPAREN169=null;
		Token USING_SYM171=null;
		Token RPAREN173=null;
		Token LPAREN175=null;
		Token set176=null;
		Token RPAREN178=null;
		ParserRuleReturnScope functionList150 =null;
		ParserRuleReturnScope expression152 =null;
		ParserRuleReturnScope expression154 =null;
		ParserRuleReturnScope expression158 =null;
		ParserRuleReturnScope cast_data_type160 =null;
		ParserRuleReturnScope expression164 =null;
		ParserRuleReturnScope cast_data_type166 =null;
		ParserRuleReturnScope expression170 =null;
		ParserRuleReturnScope transcoding_name172 =null;
		ParserRuleReturnScope group_functions174 =null;
		ParserRuleReturnScope bit_expr177 =null;

		Object LPAREN151_tree=null;
		Object COMMA153_tree=null;
		Object RPAREN155_tree=null;
		Object CAST_SYM156_tree=null;
		Object LPAREN157_tree=null;
		Object AS_SYM159_tree=null;
		Object RPAREN161_tree=null;
		Object CONVERT_SYM162_tree=null;
		Object LPAREN163_tree=null;
		Object COMMA165_tree=null;
		Object RPAREN167_tree=null;
		Object CONVERT_SYM168_tree=null;
		Object LPAREN169_tree=null;
		Object USING_SYM171_tree=null;
		Object RPAREN173_tree=null;
		Object LPAREN175_tree=null;
		Object set176_tree=null;
		Object RPAREN178_tree=null;

		try {
			// MySQL.g:1290:14: ( ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? ) | ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) | ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) | ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN ) )
			int alt43=5;
			switch ( input.LA(1) ) {
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_LENGTH:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case HEX:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUTE:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NOW:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt43=1;
				}
				break;
			case CAST_SYM:
				{
				alt43=2;
				}
				break;
			case CONVERT_SYM:
				{
				int LA43_7 = input.LA(2);
				if ( (synpred324_MySQL()) ) {
					alt43=3;
				}
				else if ( (synpred325_MySQL()) ) {
					alt43=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX_SYM:
			case MIN_SYM:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
				{
				alt43=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 43, 0, input);
				throw nvae;
			}
			switch (alt43) {
				case 1 :
					// MySQL.g:1291:4: ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1291:4: ( functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )? )
					// MySQL.g:1291:7: functionList ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
					{
					pushFollow(FOLLOW_functionList_in_function_call20715);
					functionList150=functionList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionList150.getTree());

					// MySQL.g:1291:20: ( LPAREN ( expression ( COMMA expression )* )? RPAREN )?
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==LPAREN) ) {
						alt41=1;
					}
					switch (alt41) {
						case 1 :
							// MySQL.g:1291:22: LPAREN ( expression ( COMMA expression )* )? RPAREN
							{
							LPAREN151=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call20719); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN151_tree = (Object)adaptor.create(LPAREN151);
							adaptor.addChild(root_0, LPAREN151_tree);
							}

							// MySQL.g:1291:29: ( expression ( COMMA expression )* )?
							int alt40=2;
							int LA40_0 = input.LA(1);
							if ( (LA40_0==ABS||LA40_0==ACOS||(LA40_0 >= ADDDATE && LA40_0 <= ADDTIME)||(LA40_0 >= AES_DECRYPT && LA40_0 <= AES_ENCRYPT)||LA40_0==ASCII_SYM||LA40_0==ASIN||(LA40_0 >= ATAN && LA40_0 <= ATAN2)||LA40_0==AVG||LA40_0==BENCHMARK||(LA40_0 >= BIN && LA40_0 <= BINARY)||(LA40_0 >= BIT_AND && LA40_0 <= BIT_OR)||LA40_0==BIT_XOR||(LA40_0 >= CASE_SYM && LA40_0 <= CEILING)||LA40_0==CHAR||(LA40_0 >= CHARSET && LA40_0 <= CHAR_LENGTH)||LA40_0==COERCIBILITY||LA40_0==COLLATION||(LA40_0 >= CONCAT && LA40_0 <= CONCAT_WS)||LA40_0==CONNECTION_ID||(LA40_0 >= CONV && LA40_0 <= CONVERT_TZ)||(LA40_0 >= COS && LA40_0 <= COUNT)||LA40_0==CRC32||LA40_0==CURDATE||LA40_0==CURRENT_USER||LA40_0==CURTIME||LA40_0==DATABASE||LA40_0==DATEDIFF||(LA40_0 >= DATE_ADD && LA40_0 <= DAYOFYEAR)||(LA40_0 >= DECODE && LA40_0 <= DEFAULT)||LA40_0==DEGREES||(LA40_0 >= DES_DECRYPT && LA40_0 <= DES_ENCRYPT)||LA40_0==ELT||(LA40_0 >= ENCODE && LA40_0 <= ENCRYPT)||LA40_0==EXISTS||LA40_0==EXP||LA40_0==EXPORT_SET||LA40_0==EXTRACT||LA40_0==FALSE_SYM||LA40_0==FIELD||LA40_0==FIND_IN_SET||LA40_0==FLOOR||LA40_0==FORMAT||LA40_0==FOUND_ROWS||(LA40_0 >= FROM_BASE64 && LA40_0 <= FROM_UNIXTIME)||(LA40_0 >= GET_FORMAT && LA40_0 <= GET_LOCK)||LA40_0==GROUP_CONCAT||(LA40_0 >= HEX && LA40_0 <= HEX_DIGIT)||LA40_0==HOUR||LA40_0==ID||(LA40_0 >= IF && LA40_0 <= IFNULL)||(LA40_0 >= INET_ATON && LA40_0 <= INET_NTOA)||LA40_0==INSERT||(LA40_0 >= INSTR && LA40_0 <= INTEGER_NUM)||LA40_0==INTERVAL_SYM||LA40_0==IS_FREE_LOCK||LA40_0==IS_USED_LOCK||(LA40_0 >= LAST_DAY && LA40_0 <= LAST_INSERT_ID)||(LA40_0 >= LEFT && LA40_0 <= LENGTH)||LA40_0==LN||LA40_0==LOAD_FILE||LA40_0==LOCATE||(LA40_0 >= LOG && LA40_0 <= LOG2)||LA40_0==LOWER||(LA40_0 >= LPAD && LA40_0 <= LPAREN)||LA40_0==LTRIM||(LA40_0 >= MAKEDATE && LA40_0 <= MAKE_SET)||LA40_0==MASTER_POS_WAIT||LA40_0==MATCH||LA40_0==MAX_SYM||LA40_0==MD5||(LA40_0 >= MICROSECOND && LA40_0 <= MID)||(LA40_0 >= MINUS && LA40_0 <= MINUTE)||LA40_0==MIN_SYM||LA40_0==MOD||(LA40_0 >= MONTH && LA40_0 <= MONTHNAME)||LA40_0==NAME_CONST||LA40_0==NEGATION||(LA40_0 >= NOT_SYM && LA40_0 <= NOW)||LA40_0==NULL_SYM||LA40_0==OCT||LA40_0==OLD_PASSWORD||LA40_0==ORD||(LA40_0 >= PASSWORD && LA40_0 <= PERIOD_DIFF)||LA40_0==PI||LA40_0==PLUS||(LA40_0 >= POW && LA40_0 <= POWER)||LA40_0==QUARTER||LA40_0==QUOTE||(LA40_0 >= RADIANS && LA40_0 <= RAND)||LA40_0==REAL_NUMBER||LA40_0==RELEASE_LOCK||LA40_0==REPEAT||LA40_0==REPLACE||LA40_0==REVERSE||LA40_0==RIGHT||LA40_0==ROUND||(LA40_0 >= ROW_SYM && LA40_0 <= RPAD)||LA40_0==RTRIM||(LA40_0 >= SCHEMA && LA40_0 <= SECOND)||LA40_0==SEC_TO_TIME||LA40_0==SESSION_USER||LA40_0==SIGN||LA40_0==SIN||LA40_0==SLEEP||LA40_0==SOUNDEX||LA40_0==SPACE||LA40_0==SQRT||(LA40_0 >= STD && LA40_0 <= STDDEV_SAMP)||LA40_0==STRCMP||LA40_0==STR_TO_DATE||(LA40_0 >= SUBSTRING && LA40_0 <= SUM)||(LA40_0 >= SYSDATE && LA40_0 <= SYSTEM_USER)||LA40_0==TAN||LA40_0==TEXT_STRING||(LA40_0 >= TIMEDIFF && LA40_0 <= TIME_TO_SEC)||(LA40_0 >= TO_BASE64 && LA40_0 <= TO_SECONDS)||(LA40_0 >= TRIM && LA40_0 <= TRUNCATE)||LA40_0==UNHEX||LA40_0==UNIX_TIMESTAMP||LA40_0==UPPER||(LA40_0 >= USER && LA40_0 <= USER_VAR)||(LA40_0 >= UTC_DATE && LA40_0 <= UTC_TIMESTAMP)||LA40_0==UUID||LA40_0==VALUES||LA40_0==VARIANCE||(LA40_0 >= VAR_POP && LA40_0 <= VERSION_SYM)||(LA40_0 >= WEEK && LA40_0 <= WEIGHT_STRING)||(LA40_0 >= YEAR && LA40_0 <= YEARWEEK)) ) {
								alt40=1;
							}
							switch (alt40) {
								case 1 :
									// MySQL.g:1291:30: expression ( COMMA expression )*
									{
									pushFollow(FOLLOW_expression_in_function_call20722);
									expression152=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, expression152.getTree());

									// MySQL.g:1291:41: ( COMMA expression )*
									loop39:
									while (true) {
										int alt39=2;
										int LA39_0 = input.LA(1);
										if ( (LA39_0==COMMA) ) {
											alt39=1;
										}

										switch (alt39) {
										case 1 :
											// MySQL.g:1291:42: COMMA expression
											{
											COMMA153=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_call20725); if (state.failed) return retval;
											if ( state.backtracking==0 ) {
											COMMA153_tree = (Object)adaptor.create(COMMA153);
											adaptor.addChild(root_0, COMMA153_tree);
											}

											pushFollow(FOLLOW_expression_in_function_call20727);
											expression154=expression();
											state._fsp--;
											if (state.failed) return retval;
											if ( state.backtracking==0 ) adaptor.addChild(root_0, expression154.getTree());

											}
											break;

										default :
											break loop39;
										}
									}

									}
									break;

							}

							RPAREN155=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call20733); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN155_tree = (Object)adaptor.create(RPAREN155);
							adaptor.addChild(root_0, RPAREN155_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1292:4: ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1292:4: ( CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN )
					// MySQL.g:1292:7: CAST_SYM LPAREN expression AS_SYM cast_data_type RPAREN
					{
					CAST_SYM156=(Token)match(input,CAST_SYM,FOLLOW_CAST_SYM_in_function_call20748); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CAST_SYM156_tree = (Object)adaptor.create(CAST_SYM156);
					adaptor.addChild(root_0, CAST_SYM156_tree);
					}

					LPAREN157=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call20750); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN157_tree = (Object)adaptor.create(LPAREN157);
					adaptor.addChild(root_0, LPAREN157_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call20752);
					expression158=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression158.getTree());

					AS_SYM159=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_function_call20754); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AS_SYM159_tree = (Object)adaptor.create(AS_SYM159);
					adaptor.addChild(root_0, AS_SYM159_tree);
					}

					pushFollow(FOLLOW_cast_data_type_in_function_call20756);
					cast_data_type160=cast_data_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_data_type160.getTree());

					RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call20758); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN161_tree = (Object)adaptor.create(RPAREN161);
					adaptor.addChild(root_0, RPAREN161_tree);
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:1293:4: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1293:4: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
					// MySQL.g:1293:7: CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN
					{
					CONVERT_SYM162=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_function_call20769); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM162_tree = (Object)adaptor.create(CONVERT_SYM162);
					adaptor.addChild(root_0, CONVERT_SYM162_tree);
					}

					LPAREN163=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call20771); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN163_tree = (Object)adaptor.create(LPAREN163);
					adaptor.addChild(root_0, LPAREN163_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call20773);
					expression164=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression164.getTree());

					COMMA165=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_call20775); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA165_tree = (Object)adaptor.create(COMMA165);
					adaptor.addChild(root_0, COMMA165_tree);
					}

					pushFollow(FOLLOW_cast_data_type_in_function_call20777);
					cast_data_type166=cast_data_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_data_type166.getTree());

					RPAREN167=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call20779); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN167_tree = (Object)adaptor.create(RPAREN167);
					adaptor.addChild(root_0, RPAREN167_tree);
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:1294:4: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1294:4: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
					// MySQL.g:1294:7: CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN
					{
					CONVERT_SYM168=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_function_call20790); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM168_tree = (Object)adaptor.create(CONVERT_SYM168);
					adaptor.addChild(root_0, CONVERT_SYM168_tree);
					}

					LPAREN169=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call20792); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN169_tree = (Object)adaptor.create(LPAREN169);
					adaptor.addChild(root_0, LPAREN169_tree);
					}

					pushFollow(FOLLOW_expression_in_function_call20794);
					expression170=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression170.getTree());

					USING_SYM171=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_function_call20796); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USING_SYM171_tree = (Object)adaptor.create(USING_SYM171);
					adaptor.addChild(root_0, USING_SYM171_tree);
					}

					pushFollow(FOLLOW_transcoding_name_in_function_call20798);
					transcoding_name172=transcoding_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, transcoding_name172.getTree());

					RPAREN173=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call20800); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN173_tree = (Object)adaptor.create(RPAREN173);
					adaptor.addChild(root_0, RPAREN173_tree);
					}

					}

					}
					break;
				case 5 :
					// MySQL.g:1295:4: ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1295:4: ( group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN )
					// MySQL.g:1295:7: group_functions LPAREN ( ASTERISK | ALL | DISTINCT )? bit_expr RPAREN
					{
					pushFollow(FOLLOW_group_functions_in_function_call20811);
					group_functions174=group_functions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, group_functions174.getTree());

					LPAREN175=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call20813); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN175_tree = (Object)adaptor.create(LPAREN175);
					adaptor.addChild(root_0, LPAREN175_tree);
					}

					// MySQL.g:1295:30: ( ASTERISK | ALL | DISTINCT )?
					int alt42=2;
					int LA42_0 = input.LA(1);
					if ( (LA42_0==ALL||LA42_0==ASTERISK||LA42_0==DISTINCT) ) {
						alt42=1;
					}
					switch (alt42) {
						case 1 :
							// MySQL.g:
							{
							set176=input.LT(1);
							if ( input.LA(1)==ALL||input.LA(1)==ASTERISK||input.LA(1)==DISTINCT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set176));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_bit_expr_in_function_call20830);
					bit_expr177=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr177.getTree());

					RPAREN178=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call20832); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN178_tree = (Object)adaptor.create(RPAREN178);
					adaptor.addChild(root_0, RPAREN178_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_call"


	public static class case_when_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement"
	// MySQL.g:1298:1: case_when_statement : ( case_when_statement1 | case_when_statement2 );
	public final MySQLParser.case_when_statement_return case_when_statement() throws RecognitionException {
		MySQLParser.case_when_statement_return retval = new MySQLParser.case_when_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope case_when_statement1179 =null;
		ParserRuleReturnScope case_when_statement2180 =null;


		try {
			// MySQL.g:1298:20: ( case_when_statement1 | case_when_statement2 )
			int alt44=2;
			int LA44_0 = input.LA(1);
			if ( (LA44_0==CASE_SYM) ) {
				int LA44_1 = input.LA(2);
				if ( (LA44_1==WHEN_SYM) ) {
					alt44=1;
				}
				else if ( (LA44_1==ABS||LA44_1==ACOS||(LA44_1 >= ADDDATE && LA44_1 <= ADDTIME)||(LA44_1 >= AES_DECRYPT && LA44_1 <= AES_ENCRYPT)||LA44_1==ASCII_SYM||LA44_1==ASIN||(LA44_1 >= ATAN && LA44_1 <= ATAN2)||LA44_1==AVG||LA44_1==BENCHMARK||(LA44_1 >= BIN && LA44_1 <= BINARY)||(LA44_1 >= BIT_AND && LA44_1 <= BIT_OR)||LA44_1==BIT_XOR||(LA44_1 >= CASE_SYM && LA44_1 <= CEILING)||LA44_1==CHAR||(LA44_1 >= CHARSET && LA44_1 <= CHAR_LENGTH)||LA44_1==COERCIBILITY||LA44_1==COLLATION||(LA44_1 >= CONCAT && LA44_1 <= CONCAT_WS)||LA44_1==CONNECTION_ID||(LA44_1 >= CONV && LA44_1 <= CONVERT_TZ)||(LA44_1 >= COS && LA44_1 <= COUNT)||LA44_1==CRC32||LA44_1==CURDATE||LA44_1==CURRENT_USER||LA44_1==CURTIME||LA44_1==DATABASE||LA44_1==DATEDIFF||(LA44_1 >= DATE_ADD && LA44_1 <= DAYOFYEAR)||(LA44_1 >= DECODE && LA44_1 <= DEFAULT)||LA44_1==DEGREES||(LA44_1 >= DES_DECRYPT && LA44_1 <= DES_ENCRYPT)||LA44_1==ELT||(LA44_1 >= ENCODE && LA44_1 <= ENCRYPT)||LA44_1==EXISTS||LA44_1==EXP||LA44_1==EXPORT_SET||LA44_1==EXTRACT||LA44_1==FALSE_SYM||LA44_1==FIELD||LA44_1==FIND_IN_SET||LA44_1==FLOOR||LA44_1==FORMAT||LA44_1==FOUND_ROWS||(LA44_1 >= FROM_BASE64 && LA44_1 <= FROM_UNIXTIME)||(LA44_1 >= GET_FORMAT && LA44_1 <= GET_LOCK)||LA44_1==GROUP_CONCAT||(LA44_1 >= HEX && LA44_1 <= HEX_DIGIT)||LA44_1==HOUR||LA44_1==ID||(LA44_1 >= IF && LA44_1 <= IFNULL)||(LA44_1 >= INET_ATON && LA44_1 <= INET_NTOA)||LA44_1==INSERT||(LA44_1 >= INSTR && LA44_1 <= INTEGER_NUM)||LA44_1==INTERVAL_SYM||LA44_1==IS_FREE_LOCK||LA44_1==IS_USED_LOCK||(LA44_1 >= LAST_DAY && LA44_1 <= LAST_INSERT_ID)||(LA44_1 >= LEFT && LA44_1 <= LENGTH)||LA44_1==LN||LA44_1==LOAD_FILE||LA44_1==LOCATE||(LA44_1 >= LOG && LA44_1 <= LOG2)||LA44_1==LOWER||(LA44_1 >= LPAD && LA44_1 <= LPAREN)||LA44_1==LTRIM||(LA44_1 >= MAKEDATE && LA44_1 <= MAKE_SET)||LA44_1==MASTER_POS_WAIT||LA44_1==MATCH||LA44_1==MAX_SYM||LA44_1==MD5||(LA44_1 >= MICROSECOND && LA44_1 <= MID)||(LA44_1 >= MINUS && LA44_1 <= MINUTE)||LA44_1==MIN_SYM||LA44_1==MOD||(LA44_1 >= MONTH && LA44_1 <= MONTHNAME)||LA44_1==NAME_CONST||LA44_1==NEGATION||LA44_1==NOW||LA44_1==NULL_SYM||LA44_1==OCT||LA44_1==OLD_PASSWORD||LA44_1==ORD||(LA44_1 >= PASSWORD && LA44_1 <= PERIOD_DIFF)||LA44_1==PI||LA44_1==PLUS||(LA44_1 >= POW && LA44_1 <= POWER)||LA44_1==QUARTER||LA44_1==QUOTE||(LA44_1 >= RADIANS && LA44_1 <= RAND)||LA44_1==REAL_NUMBER||LA44_1==RELEASE_LOCK||LA44_1==REPEAT||LA44_1==REPLACE||LA44_1==REVERSE||LA44_1==RIGHT||LA44_1==ROUND||(LA44_1 >= ROW_SYM && LA44_1 <= RPAD)||LA44_1==RTRIM||(LA44_1 >= SCHEMA && LA44_1 <= SECOND)||LA44_1==SEC_TO_TIME||LA44_1==SESSION_USER||LA44_1==SIGN||LA44_1==SIN||LA44_1==SLEEP||LA44_1==SOUNDEX||LA44_1==SPACE||LA44_1==SQRT||(LA44_1 >= STD && LA44_1 <= STDDEV_SAMP)||LA44_1==STRCMP||LA44_1==STR_TO_DATE||(LA44_1 >= SUBSTRING && LA44_1 <= SUM)||(LA44_1 >= SYSDATE && LA44_1 <= SYSTEM_USER)||LA44_1==TAN||LA44_1==TEXT_STRING||(LA44_1 >= TIMEDIFF && LA44_1 <= TIME_TO_SEC)||(LA44_1 >= TO_BASE64 && LA44_1 <= TO_SECONDS)||(LA44_1 >= TRIM && LA44_1 <= TRUNCATE)||LA44_1==UNHEX||LA44_1==UNIX_TIMESTAMP||LA44_1==UPPER||(LA44_1 >= USER && LA44_1 <= USER_VAR)||(LA44_1 >= UTC_DATE && LA44_1 <= UTC_TIMESTAMP)||LA44_1==UUID||LA44_1==VALUES||LA44_1==VARIANCE||(LA44_1 >= VAR_POP && LA44_1 <= VERSION_SYM)||(LA44_1 >= WEEK && LA44_1 <= WEIGHT_STRING)||(LA44_1 >= YEAR && LA44_1 <= YEARWEEK)) ) {
					alt44=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 44, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 44, 0, input);
				throw nvae;
			}

			switch (alt44) {
				case 1 :
					// MySQL.g:1299:9: case_when_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement1_in_case_when_statement20851);
					case_when_statement1179=case_when_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement1179.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1299:32: case_when_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_when_statement2_in_case_when_statement20855);
					case_when_statement2180=case_when_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_when_statement2180.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement"


	public static class case_when_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement1"
	// MySQL.g:1301:1: case_when_statement1 : CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM ;
	public final MySQLParser.case_when_statement1_return case_when_statement1() throws RecognitionException {
		MySQLParser.case_when_statement1_return retval = new MySQLParser.case_when_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CASE_SYM181=null;
		Token WHEN_SYM182=null;
		Token THEN_SYM184=null;
		Token ELSE_SYM186=null;
		Token END_SYM188=null;
		ParserRuleReturnScope expression183 =null;
		ParserRuleReturnScope bit_expr185 =null;
		ParserRuleReturnScope bit_expr187 =null;

		Object CASE_SYM181_tree=null;
		Object WHEN_SYM182_tree=null;
		Object THEN_SYM184_tree=null;
		Object ELSE_SYM186_tree=null;
		Object END_SYM188_tree=null;

		try {
			// MySQL.g:1301:21: ( CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM )
			// MySQL.g:1302:9: CASE_SYM ( WHEN_SYM expression THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM
			{
			root_0 = (Object)adaptor.nil();


			CASE_SYM181=(Token)match(input,CASE_SYM,FOLLOW_CASE_SYM_in_case_when_statement120870); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE_SYM181_tree = (Object)adaptor.create(CASE_SYM181);
			adaptor.addChild(root_0, CASE_SYM181_tree);
			}

			// MySQL.g:1303:9: ( WHEN_SYM expression THEN_SYM bit_expr )+
			int cnt45=0;
			loop45:
			while (true) {
				int alt45=2;
				int LA45_0 = input.LA(1);
				if ( (LA45_0==WHEN_SYM) ) {
					alt45=1;
				}

				switch (alt45) {
				case 1 :
					// MySQL.g:1303:11: WHEN_SYM expression THEN_SYM bit_expr
					{
					WHEN_SYM182=(Token)match(input,WHEN_SYM,FOLLOW_WHEN_SYM_in_case_when_statement120882); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WHEN_SYM182_tree = (Object)adaptor.create(WHEN_SYM182);
					adaptor.addChild(root_0, WHEN_SYM182_tree);
					}

					pushFollow(FOLLOW_expression_in_case_when_statement120884);
					expression183=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression183.getTree());

					THEN_SYM184=(Token)match(input,THEN_SYM,FOLLOW_THEN_SYM_in_case_when_statement120886); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					THEN_SYM184_tree = (Object)adaptor.create(THEN_SYM184);
					adaptor.addChild(root_0, THEN_SYM184_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement120888);
					bit_expr185=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr185.getTree());

					}
					break;

				default :
					if ( cnt45 >= 1 ) break loop45;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(45, input);
					throw eee;
				}
				cnt45++;
			}

			// MySQL.g:1304:9: ( ELSE_SYM bit_expr )?
			int alt46=2;
			int LA46_0 = input.LA(1);
			if ( (LA46_0==ELSE_SYM) ) {
				alt46=1;
			}
			switch (alt46) {
				case 1 :
					// MySQL.g:1304:11: ELSE_SYM bit_expr
					{
					ELSE_SYM186=(Token)match(input,ELSE_SYM,FOLLOW_ELSE_SYM_in_case_when_statement120903); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ELSE_SYM186_tree = (Object)adaptor.create(ELSE_SYM186);
					adaptor.addChild(root_0, ELSE_SYM186_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement120905);
					bit_expr187=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr187.getTree());

					}
					break;

			}

			END_SYM188=(Token)match(input,END_SYM,FOLLOW_END_SYM_in_case_when_statement120918); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			END_SYM188_tree = (Object)adaptor.create(END_SYM188);
			adaptor.addChild(root_0, END_SYM188_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement1"


	public static class case_when_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "case_when_statement2"
	// MySQL.g:1307:1: case_when_statement2 : CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM ;
	public final MySQLParser.case_when_statement2_return case_when_statement2() throws RecognitionException {
		MySQLParser.case_when_statement2_return retval = new MySQLParser.case_when_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CASE_SYM189=null;
		Token WHEN_SYM191=null;
		Token THEN_SYM193=null;
		Token ELSE_SYM195=null;
		Token END_SYM197=null;
		ParserRuleReturnScope bit_expr190 =null;
		ParserRuleReturnScope bit_expr192 =null;
		ParserRuleReturnScope bit_expr194 =null;
		ParserRuleReturnScope bit_expr196 =null;

		Object CASE_SYM189_tree=null;
		Object WHEN_SYM191_tree=null;
		Object THEN_SYM193_tree=null;
		Object ELSE_SYM195_tree=null;
		Object END_SYM197_tree=null;

		try {
			// MySQL.g:1307:21: ( CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM )
			// MySQL.g:1308:9: CASE_SYM bit_expr ( WHEN_SYM bit_expr THEN_SYM bit_expr )+ ( ELSE_SYM bit_expr )? END_SYM
			{
			root_0 = (Object)adaptor.nil();


			CASE_SYM189=(Token)match(input,CASE_SYM,FOLLOW_CASE_SYM_in_case_when_statement220933); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CASE_SYM189_tree = (Object)adaptor.create(CASE_SYM189);
			adaptor.addChild(root_0, CASE_SYM189_tree);
			}

			pushFollow(FOLLOW_bit_expr_in_case_when_statement220935);
			bit_expr190=bit_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr190.getTree());

			// MySQL.g:1309:9: ( WHEN_SYM bit_expr THEN_SYM bit_expr )+
			int cnt47=0;
			loop47:
			while (true) {
				int alt47=2;
				int LA47_0 = input.LA(1);
				if ( (LA47_0==WHEN_SYM) ) {
					alt47=1;
				}

				switch (alt47) {
				case 1 :
					// MySQL.g:1309:11: WHEN_SYM bit_expr THEN_SYM bit_expr
					{
					WHEN_SYM191=(Token)match(input,WHEN_SYM,FOLLOW_WHEN_SYM_in_case_when_statement220947); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WHEN_SYM191_tree = (Object)adaptor.create(WHEN_SYM191);
					adaptor.addChild(root_0, WHEN_SYM191_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement220949);
					bit_expr192=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr192.getTree());

					THEN_SYM193=(Token)match(input,THEN_SYM,FOLLOW_THEN_SYM_in_case_when_statement220951); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					THEN_SYM193_tree = (Object)adaptor.create(THEN_SYM193);
					adaptor.addChild(root_0, THEN_SYM193_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement220953);
					bit_expr194=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr194.getTree());

					}
					break;

				default :
					if ( cnt47 >= 1 ) break loop47;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(47, input);
					throw eee;
				}
				cnt47++;
			}

			// MySQL.g:1310:9: ( ELSE_SYM bit_expr )?
			int alt48=2;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==ELSE_SYM) ) {
				alt48=1;
			}
			switch (alt48) {
				case 1 :
					// MySQL.g:1310:11: ELSE_SYM bit_expr
					{
					ELSE_SYM195=(Token)match(input,ELSE_SYM,FOLLOW_ELSE_SYM_in_case_when_statement220968); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ELSE_SYM195_tree = (Object)adaptor.create(ELSE_SYM195);
					adaptor.addChild(root_0, ELSE_SYM195_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_case_when_statement220970);
					bit_expr196=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr196.getTree());

					}
					break;

			}

			END_SYM197=(Token)match(input,END_SYM,FOLLOW_END_SYM_in_case_when_statement220983); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			END_SYM197_tree = (Object)adaptor.create(END_SYM197);
			adaptor.addChild(root_0, END_SYM197_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_statement2"


	public static class match_against_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "match_against_statement"
	// MySQL.g:1314:1: match_against_statement : MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? ) ;
	public final MySQLParser.match_against_statement_return match_against_statement() throws RecognitionException {
		MySQLParser.match_against_statement_return retval = new MySQLParser.match_against_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token MATCH198=null;
		Token COMMA200=null;
		Token AGAINST202=null;
		ParserRuleReturnScope column_spec199 =null;
		ParserRuleReturnScope column_spec201 =null;
		ParserRuleReturnScope expression203 =null;
		ParserRuleReturnScope search_modifier204 =null;

		Object MATCH198_tree=null;
		Object COMMA200_tree=null;
		Object AGAINST202_tree=null;

		try {
			// MySQL.g:1314:24: ( MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? ) )
			// MySQL.g:1315:2: MATCH ( column_spec ( COMMA column_spec )* ) AGAINST ( expression ( search_modifier )? )
			{
			root_0 = (Object)adaptor.nil();


			MATCH198=(Token)match(input,MATCH,FOLLOW_MATCH_in_match_against_statement20993); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			MATCH198_tree = (Object)adaptor.create(MATCH198);
			adaptor.addChild(root_0, MATCH198_tree);
			}

			// MySQL.g:1315:8: ( column_spec ( COMMA column_spec )* )
			// MySQL.g:1315:9: column_spec ( COMMA column_spec )*
			{
			pushFollow(FOLLOW_column_spec_in_match_against_statement20996);
			column_spec199=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec199.getTree());

			// MySQL.g:1315:21: ( COMMA column_spec )*
			loop49:
			while (true) {
				int alt49=2;
				int LA49_0 = input.LA(1);
				if ( (LA49_0==COMMA) ) {
					alt49=1;
				}

				switch (alt49) {
				case 1 :
					// MySQL.g:1315:22: COMMA column_spec
					{
					COMMA200=(Token)match(input,COMMA,FOLLOW_COMMA_in_match_against_statement20999); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA200_tree = (Object)adaptor.create(COMMA200);
					adaptor.addChild(root_0, COMMA200_tree);
					}

					pushFollow(FOLLOW_column_spec_in_match_against_statement21001);
					column_spec201=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec201.getTree());

					}
					break;

				default :
					break loop49;
				}
			}

			}

			AGAINST202=(Token)match(input,AGAINST,FOLLOW_AGAINST_in_match_against_statement21007); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AGAINST202_tree = (Object)adaptor.create(AGAINST202);
			adaptor.addChild(root_0, AGAINST202_tree);
			}

			// MySQL.g:1315:52: ( expression ( search_modifier )? )
			// MySQL.g:1315:53: expression ( search_modifier )?
			{
			pushFollow(FOLLOW_expression_in_match_against_statement21010);
			expression203=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression203.getTree());

			// MySQL.g:1315:64: ( search_modifier )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==IN_SYM) ) {
				int LA50_1 = input.LA(2);
				if ( (synpred335_MySQL()) ) {
					alt50=1;
				}
			}
			else if ( (LA50_0==WITH) ) {
				int LA50_2 = input.LA(2);
				if ( (synpred335_MySQL()) ) {
					alt50=1;
				}
			}
			switch (alt50) {
				case 1 :
					// MySQL.g:1315:65: search_modifier
					{
					pushFollow(FOLLOW_search_modifier_in_match_against_statement21013);
					search_modifier204=search_modifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, search_modifier204.getTree());

					}
					break;

			}

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "match_against_statement"


	public static class column_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_spec"
	// MySQL.g:1318:1: column_spec : ( ( schema_name DOT )? table_name DOT )? column_name ;
	public final MySQLParser.column_spec_return column_spec() throws RecognitionException {
		MySQLParser.column_spec_return retval = new MySQLParser.column_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOT206=null;
		Token DOT208=null;
		ParserRuleReturnScope schema_name205 =null;
		ParserRuleReturnScope table_name207 =null;
		ParserRuleReturnScope column_name209 =null;

		Object DOT206_tree=null;
		Object DOT208_tree=null;

		try {
			// MySQL.g:1318:12: ( ( ( schema_name DOT )? table_name DOT )? column_name )
			// MySQL.g:1319:2: ( ( schema_name DOT )? table_name DOT )? column_name
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1319:2: ( ( schema_name DOT )? table_name DOT )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==ID) ) {
				int LA52_1 = input.LA(2);
				if ( (LA52_1==DOT) ) {
					alt52=1;
				}
			}
			switch (alt52) {
				case 1 :
					// MySQL.g:1319:4: ( schema_name DOT )? table_name DOT
					{
					// MySQL.g:1319:4: ( schema_name DOT )?
					int alt51=2;
					int LA51_0 = input.LA(1);
					if ( (LA51_0==ID) ) {
						int LA51_1 = input.LA(2);
						if ( (LA51_1==DOT) ) {
							int LA51_2 = input.LA(3);
							if ( (LA51_2==ID) ) {
								int LA51_3 = input.LA(4);
								if ( (LA51_3==DOT) ) {
									alt51=1;
								}
							}
						}
					}
					switch (alt51) {
						case 1 :
							// MySQL.g:1319:6: schema_name DOT
							{
							pushFollow(FOLLOW_schema_name_in_column_spec21031);
							schema_name205=schema_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name205.getTree());

							DOT206=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec21033); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DOT206_tree = (Object)adaptor.create(DOT206);
							adaptor.addChild(root_0, DOT206_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_table_name_in_column_spec21038);
					table_name207=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name207.getTree());

					DOT208=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec21040); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT208_tree = (Object)adaptor.create(DOT208);
					adaptor.addChild(root_0, DOT208_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_column_name_in_column_spec21045);
			column_name209=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name209.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_spec"


	public static class expression_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "expression_list"
	// MySQL.g:1321:1: expression_list : LPAREN expression ( COMMA expression )* RPAREN ;
	public final MySQLParser.expression_list_return expression_list() throws RecognitionException {
		MySQLParser.expression_list_return retval = new MySQLParser.expression_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN210=null;
		Token COMMA212=null;
		Token RPAREN214=null;
		ParserRuleReturnScope expression211 =null;
		ParserRuleReturnScope expression213 =null;

		Object LPAREN210_tree=null;
		Object COMMA212_tree=null;
		Object RPAREN214_tree=null;

		try {
			// MySQL.g:1321:16: ( LPAREN expression ( COMMA expression )* RPAREN )
			// MySQL.g:1322:2: LPAREN expression ( COMMA expression )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN210=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list21054); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN210_tree = (Object)adaptor.create(LPAREN210);
			adaptor.addChild(root_0, LPAREN210_tree);
			}

			pushFollow(FOLLOW_expression_in_expression_list21056);
			expression211=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression211.getTree());

			// MySQL.g:1322:20: ( COMMA expression )*
			loop53:
			while (true) {
				int alt53=2;
				int LA53_0 = input.LA(1);
				if ( (LA53_0==COMMA) ) {
					alt53=1;
				}

				switch (alt53) {
				case 1 :
					// MySQL.g:1322:22: COMMA expression
					{
					COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_expression_list21060); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA212_tree = (Object)adaptor.create(COMMA212);
					adaptor.addChild(root_0, COMMA212_tree);
					}

					pushFollow(FOLLOW_expression_in_expression_list21062);
					expression213=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression213.getTree());

					}
					break;

				default :
					break loop53;
				}
			}

			RPAREN214=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list21067); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN214_tree = (Object)adaptor.create(RPAREN214);
			adaptor.addChild(root_0, RPAREN214_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class interval_expr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interval_expr"
	// MySQL.g:1324:1: interval_expr : INTERVAL_SYM expression interval_unit ;
	public final MySQLParser.interval_expr_return interval_expr() throws RecognitionException {
		MySQLParser.interval_expr_return retval = new MySQLParser.interval_expr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTERVAL_SYM215=null;
		ParserRuleReturnScope expression216 =null;
		ParserRuleReturnScope interval_unit217 =null;

		Object INTERVAL_SYM215_tree=null;

		try {
			// MySQL.g:1324:14: ( INTERVAL_SYM expression interval_unit )
			// MySQL.g:1325:2: INTERVAL_SYM expression interval_unit
			{
			root_0 = (Object)adaptor.nil();


			INTERVAL_SYM215=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_interval_expr21076); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTERVAL_SYM215_tree = (Object)adaptor.create(INTERVAL_SYM215);
			adaptor.addChild(root_0, INTERVAL_SYM215_tree);
			}

			pushFollow(FOLLOW_expression_in_interval_expr21078);
			expression216=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression216.getTree());

			pushFollow(FOLLOW_interval_unit_in_interval_expr21080);
			interval_unit217=interval_unit();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, interval_unit217.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_expr"


	public static class table_references_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_references"
	// MySQL.g:1334:1: table_references : table_reference ( COMMA table_reference )* ;
	public final MySQLParser.table_references_return table_references() throws RecognitionException {
		MySQLParser.table_references_return retval = new MySQLParser.table_references_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA219=null;
		ParserRuleReturnScope table_reference218 =null;
		ParserRuleReturnScope table_reference220 =null;

		Object COMMA219_tree=null;

		try {
			// MySQL.g:1334:17: ( table_reference ( COMMA table_reference )* )
			// MySQL.g:1335:9: table_reference ( COMMA table_reference )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_reference_in_table_references21102);
			table_reference218=table_reference();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference218.getTree());

			// MySQL.g:1335:25: ( COMMA table_reference )*
			loop54:
			while (true) {
				int alt54=2;
				int LA54_0 = input.LA(1);
				if ( (LA54_0==COMMA) ) {
					int LA54_2 = input.LA(2);
					if ( (LA54_2==ID||LA54_2==LPAREN||LA54_2==OJ_SYM) ) {
						alt54=1;
					}

				}

				switch (alt54) {
				case 1 :
					// MySQL.g:1335:27: COMMA table_reference
					{
					COMMA219=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_references21106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA219_tree = (Object)adaptor.create(COMMA219);
					adaptor.addChild(root_0, COMMA219_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_references21108);
					table_reference220=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference220.getTree());

					}
					break;

				default :
					break loop54;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_references"


	public static class table_reference_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_reference"
	// MySQL.g:1337:1: table_reference : ( table_factor1 | table_atom );
	public final MySQLParser.table_reference_return table_reference() throws RecognitionException {
		MySQLParser.table_reference_return retval = new MySQLParser.table_reference_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_factor1221 =null;
		ParserRuleReturnScope table_atom222 =null;


		try {
			// MySQL.g:1337:16: ( table_factor1 | table_atom )
			int alt55=2;
			switch ( input.LA(1) ) {
			case ID:
				{
				int LA55_1 = input.LA(2);
				if ( (synpred340_MySQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			case LPAREN:
				{
				int LA55_2 = input.LA(2);
				if ( (synpred340_MySQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			case OJ_SYM:
				{
				int LA55_3 = input.LA(2);
				if ( (synpred340_MySQL()) ) {
					alt55=1;
				}
				else if ( (true) ) {
					alt55=2;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 55, 0, input);
				throw nvae;
			}
			switch (alt55) {
				case 1 :
					// MySQL.g:1338:2: table_factor1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_factor1_in_table_reference21119);
					table_factor1221=table_factor1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor1221.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1338:18: table_atom
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_atom_in_table_reference21123);
					table_atom222=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom222.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_reference"


	public static class table_factor1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor1"
	// MySQL.g:1340:1: table_factor1 : table_factor2 ( ( INNER_SYM | CROSS )? JOIN_SYM table_atom ( join_condition )? )? ;
	public final MySQLParser.table_factor1_return table_factor1() throws RecognitionException {
		MySQLParser.table_factor1_return retval = new MySQLParser.table_factor1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set224=null;
		Token JOIN_SYM225=null;
		ParserRuleReturnScope table_factor2223 =null;
		ParserRuleReturnScope table_atom226 =null;
		ParserRuleReturnScope join_condition227 =null;

		Object set224_tree=null;
		Object JOIN_SYM225_tree=null;

		try {
			// MySQL.g:1340:14: ( table_factor2 ( ( INNER_SYM | CROSS )? JOIN_SYM table_atom ( join_condition )? )? )
			// MySQL.g:1341:2: table_factor2 ( ( INNER_SYM | CROSS )? JOIN_SYM table_atom ( join_condition )? )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_factor2_in_table_factor121131);
			table_factor2223=table_factor2();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor2223.getTree());

			// MySQL.g:1341:16: ( ( INNER_SYM | CROSS )? JOIN_SYM table_atom ( join_condition )? )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==CROSS||LA58_0==INNER_SYM||LA58_0==JOIN_SYM) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// MySQL.g:1341:19: ( INNER_SYM | CROSS )? JOIN_SYM table_atom ( join_condition )?
					{
					// MySQL.g:1341:19: ( INNER_SYM | CROSS )?
					int alt56=2;
					int LA56_0 = input.LA(1);
					if ( (LA56_0==CROSS||LA56_0==INNER_SYM) ) {
						alt56=1;
					}
					switch (alt56) {
						case 1 :
							// MySQL.g:
							{
							set224=input.LT(1);
							if ( input.LA(1)==CROSS||input.LA(1)==INNER_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set224));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					JOIN_SYM225=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor121145); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM225_tree = (Object)adaptor.create(JOIN_SYM225);
					adaptor.addChild(root_0, JOIN_SYM225_tree);
					}

					pushFollow(FOLLOW_table_atom_in_table_factor121147);
					table_atom226=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom226.getTree());

					// MySQL.g:1341:60: ( join_condition )?
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==ON) ) {
						int LA57_1 = input.LA(2);
						if ( (synpred343_MySQL()) ) {
							alt57=1;
						}
					}
					else if ( (LA57_0==USING_SYM) ) {
						alt57=1;
					}
					switch (alt57) {
						case 1 :
							// MySQL.g:1341:61: join_condition
							{
							pushFollow(FOLLOW_join_condition_in_table_factor121150);
							join_condition227=join_condition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, join_condition227.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor1"


	public static class table_factor2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor2"
	// MySQL.g:1343:1: table_factor2 : table_factor3 ( STRAIGHT_JOIN table_atom ( ON expression )? )? ;
	public final MySQLParser.table_factor2_return table_factor2() throws RecognitionException {
		MySQLParser.table_factor2_return retval = new MySQLParser.table_factor2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token STRAIGHT_JOIN229=null;
		Token ON231=null;
		ParserRuleReturnScope table_factor3228 =null;
		ParserRuleReturnScope table_atom230 =null;
		ParserRuleReturnScope expression232 =null;

		Object STRAIGHT_JOIN229_tree=null;
		Object ON231_tree=null;

		try {
			// MySQL.g:1343:14: ( table_factor3 ( STRAIGHT_JOIN table_atom ( ON expression )? )? )
			// MySQL.g:1344:2: table_factor3 ( STRAIGHT_JOIN table_atom ( ON expression )? )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_factor3_in_table_factor221164);
			table_factor3228=table_factor3();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor3228.getTree());

			// MySQL.g:1344:16: ( STRAIGHT_JOIN table_atom ( ON expression )? )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==STRAIGHT_JOIN) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// MySQL.g:1344:19: STRAIGHT_JOIN table_atom ( ON expression )?
					{
					STRAIGHT_JOIN229=(Token)match(input,STRAIGHT_JOIN,FOLLOW_STRAIGHT_JOIN_in_table_factor221169); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRAIGHT_JOIN229_tree = (Object)adaptor.create(STRAIGHT_JOIN229);
					adaptor.addChild(root_0, STRAIGHT_JOIN229_tree);
					}

					pushFollow(FOLLOW_table_atom_in_table_factor221171);
					table_atom230=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom230.getTree());

					// MySQL.g:1344:44: ( ON expression )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==ON) ) {
						int LA59_1 = input.LA(2);
						if ( (synpred345_MySQL()) ) {
							alt59=1;
						}
					}
					switch (alt59) {
						case 1 :
							// MySQL.g:1344:45: ON expression
							{
							ON231=(Token)match(input,ON,FOLLOW_ON_in_table_factor221174); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ON231_tree = (Object)adaptor.create(ON231);
							adaptor.addChild(root_0, ON231_tree);
							}

							pushFollow(FOLLOW_expression_in_table_factor221176);
							expression232=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression232.getTree());

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor2"


	public static class table_factor3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor3"
	// MySQL.g:1346:1: table_factor3 : table_factor4 ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition )? ;
	public final MySQLParser.table_factor3_return table_factor3() throws RecognitionException {
		MySQLParser.table_factor3_return retval = new MySQLParser.table_factor3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set234=null;
		Token OUTER235=null;
		Token JOIN_SYM236=null;
		ParserRuleReturnScope table_factor4233 =null;
		ParserRuleReturnScope table_factor4237 =null;
		ParserRuleReturnScope join_condition238 =null;

		Object set234_tree=null;
		Object OUTER235_tree=null;
		Object JOIN_SYM236_tree=null;

		try {
			// MySQL.g:1346:14: ( table_factor4 ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition )? )
			// MySQL.g:1347:2: table_factor4 ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_factor4_in_table_factor321190);
			table_factor4233=table_factor4();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4233.getTree());

			// MySQL.g:1347:16: ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==LEFT) ) {
				int LA62_1 = input.LA(2);
				if ( (synpred349_MySQL()) ) {
					alt62=1;
				}
			}
			else if ( (LA62_0==RIGHT) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// MySQL.g:1347:19: ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition
					{
					set234=input.LT(1);
					if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set234));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// MySQL.g:1347:32: ( OUTER )?
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==OUTER) ) {
						alt61=1;
					}
					switch (alt61) {
						case 1 :
							// MySQL.g:1347:33: OUTER
							{
							OUTER235=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_factor321202); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							OUTER235_tree = (Object)adaptor.create(OUTER235);
							adaptor.addChild(root_0, OUTER235_tree);
							}

							}
							break;

					}

					JOIN_SYM236=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor321206); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM236_tree = (Object)adaptor.create(JOIN_SYM236);
					adaptor.addChild(root_0, JOIN_SYM236_tree);
					}

					pushFollow(FOLLOW_table_factor4_in_table_factor321208);
					table_factor4237=table_factor4();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_factor4237.getTree());

					pushFollow(FOLLOW_join_condition_in_table_factor321210);
					join_condition238=join_condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, join_condition238.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor3"


	public static class table_factor4_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_factor4"
	// MySQL.g:1349:1: table_factor4 : table_atom ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM table_atom )? ;
	public final MySQLParser.table_factor4_return table_factor4() throws RecognitionException {
		MySQLParser.table_factor4_return retval = new MySQLParser.table_factor4_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NATURAL240=null;
		Token set241=null;
		Token OUTER242=null;
		Token JOIN_SYM243=null;
		ParserRuleReturnScope table_atom239 =null;
		ParserRuleReturnScope table_atom244 =null;

		Object NATURAL240_tree=null;
		Object set241_tree=null;
		Object OUTER242_tree=null;
		Object JOIN_SYM243_tree=null;

		try {
			// MySQL.g:1349:14: ( table_atom ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM table_atom )? )
			// MySQL.g:1350:2: table_atom ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM table_atom )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_atom_in_table_factor421222);
			table_atom239=table_atom();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom239.getTree());

			// MySQL.g:1350:13: ( NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM table_atom )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==NATURAL) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// MySQL.g:1350:16: NATURAL ( ( LEFT | RIGHT ) ( OUTER )? )? JOIN_SYM table_atom
					{
					NATURAL240=(Token)match(input,NATURAL,FOLLOW_NATURAL_in_table_factor421227); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NATURAL240_tree = (Object)adaptor.create(NATURAL240);
					adaptor.addChild(root_0, NATURAL240_tree);
					}

					// MySQL.g:1350:24: ( ( LEFT | RIGHT ) ( OUTER )? )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==LEFT||LA64_0==RIGHT) ) {
						alt64=1;
					}
					switch (alt64) {
						case 1 :
							// MySQL.g:1350:26: ( LEFT | RIGHT ) ( OUTER )?
							{
							set241=input.LT(1);
							if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set241));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							// MySQL.g:1350:39: ( OUTER )?
							int alt63=2;
							int LA63_0 = input.LA(1);
							if ( (LA63_0==OUTER) ) {
								alt63=1;
							}
							switch (alt63) {
								case 1 :
									// MySQL.g:1350:40: OUTER
									{
									OUTER242=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_factor421238); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									OUTER242_tree = (Object)adaptor.create(OUTER242);
									adaptor.addChild(root_0, OUTER242_tree);
									}

									}
									break;

							}

							}
							break;

					}

					JOIN_SYM243=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_factor421245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM243_tree = (Object)adaptor.create(JOIN_SYM243);
					adaptor.addChild(root_0, JOIN_SYM243_tree);
					}

					pushFollow(FOLLOW_table_atom_in_table_factor421247);
					table_atom244=table_atom();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_atom244.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_factor4"


	public static class table_atom_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_atom"
	// MySQL.g:1352:1: table_atom : ( ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? ) | ( subquery alias ) | ( LPAREN table_references RPAREN ) | ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression ) );
	public final MySQLParser.table_atom_return table_atom() throws RecognitionException {
		MySQLParser.table_atom_return retval = new MySQLParser.table_atom_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN251=null;
		Token RPAREN253=null;
		Token OJ_SYM254=null;
		Token LEFT256=null;
		Token OUTER257=null;
		Token JOIN_SYM258=null;
		Token ON260=null;
		ParserRuleReturnScope table_spec245 =null;
		ParserRuleReturnScope partition_clause246 =null;
		ParserRuleReturnScope alias247 =null;
		ParserRuleReturnScope index_hint_list248 =null;
		ParserRuleReturnScope subquery249 =null;
		ParserRuleReturnScope alias250 =null;
		ParserRuleReturnScope table_references252 =null;
		ParserRuleReturnScope table_reference255 =null;
		ParserRuleReturnScope table_reference259 =null;
		ParserRuleReturnScope expression261 =null;

		Object LPAREN251_tree=null;
		Object RPAREN253_tree=null;
		Object OJ_SYM254_tree=null;
		Object LEFT256_tree=null;
		Object OUTER257_tree=null;
		Object JOIN_SYM258_tree=null;
		Object ON260_tree=null;

		try {
			// MySQL.g:1352:11: ( ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? ) | ( subquery alias ) | ( LPAREN table_references RPAREN ) | ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression ) )
			int alt69=4;
			switch ( input.LA(1) ) {
			case ID:
				{
				alt69=1;
				}
				break;
			case LPAREN:
				{
				int LA69_2 = input.LA(2);
				if ( (LA69_2==SELECT) ) {
					alt69=2;
				}
				else if ( (LA69_2==ID||LA69_2==LPAREN||LA69_2==OJ_SYM) ) {
					alt69=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 69, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case OJ_SYM:
				{
				alt69=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 69, 0, input);
				throw nvae;
			}
			switch (alt69) {
				case 1 :
					// MySQL.g:1353:4: ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1353:4: ( table_spec ( partition_clause )? ( alias )? ( index_hint_list )? )
					// MySQL.g:1353:6: table_spec ( partition_clause )? ( alias )? ( index_hint_list )?
					{
					pushFollow(FOLLOW_table_spec_in_table_atom21262);
					table_spec245=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec245.getTree());

					// MySQL.g:1353:17: ( partition_clause )?
					int alt66=2;
					alt66 = dfa66.predict(input);
					switch (alt66) {
						case 1 :
							// MySQL.g:1353:18: partition_clause
							{
							pushFollow(FOLLOW_partition_clause_in_table_atom21265);
							partition_clause246=partition_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause246.getTree());

							}
							break;

					}

					// MySQL.g:1353:37: ( alias )?
					int alt67=2;
					int LA67_0 = input.LA(1);
					if ( (LA67_0==AS_SYM||LA67_0==ID) ) {
						alt67=1;
					}
					switch (alt67) {
						case 1 :
							// MySQL.g:1353:38: alias
							{
							pushFollow(FOLLOW_alias_in_table_atom21270);
							alias247=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias247.getTree());

							}
							break;

					}

					// MySQL.g:1353:46: ( index_hint_list )?
					int alt68=2;
					int LA68_0 = input.LA(1);
					if ( (LA68_0==FORCE_SYM||LA68_0==IGNORE_SYM||LA68_0==USE_SYM) ) {
						alt68=1;
					}
					switch (alt68) {
						case 1 :
							// MySQL.g:1353:47: index_hint_list
							{
							pushFollow(FOLLOW_index_hint_list_in_table_atom21275);
							index_hint_list248=index_hint_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint_list248.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1354:4: ( subquery alias )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1354:4: ( subquery alias )
					// MySQL.g:1354:6: subquery alias
					{
					pushFollow(FOLLOW_subquery_in_table_atom21286);
					subquery249=subquery();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery249.getTree());

					pushFollow(FOLLOW_alias_in_table_atom21288);
					alias250=alias();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alias250.getTree());

					}

					}
					break;
				case 3 :
					// MySQL.g:1355:4: ( LPAREN table_references RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1355:4: ( LPAREN table_references RPAREN )
					// MySQL.g:1355:6: LPAREN table_references RPAREN
					{
					LPAREN251=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_atom21297); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN251_tree = (Object)adaptor.create(LPAREN251);
					adaptor.addChild(root_0, LPAREN251_tree);
					}

					pushFollow(FOLLOW_table_references_in_table_atom21299);
					table_references252=table_references();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references252.getTree());

					RPAREN253=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_atom21301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN253_tree = (Object)adaptor.create(RPAREN253);
					adaptor.addChild(root_0, RPAREN253_tree);
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:1356:4: ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1356:4: ( OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression )
					// MySQL.g:1356:6: OJ_SYM table_reference LEFT OUTER JOIN_SYM table_reference ON expression
					{
					OJ_SYM254=(Token)match(input,OJ_SYM,FOLLOW_OJ_SYM_in_table_atom21310); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OJ_SYM254_tree = (Object)adaptor.create(OJ_SYM254);
					adaptor.addChild(root_0, OJ_SYM254_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_atom21312);
					table_reference255=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference255.getTree());

					LEFT256=(Token)match(input,LEFT,FOLLOW_LEFT_in_table_atom21314); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LEFT256_tree = (Object)adaptor.create(LEFT256);
					adaptor.addChild(root_0, LEFT256_tree);
					}

					OUTER257=(Token)match(input,OUTER,FOLLOW_OUTER_in_table_atom21316); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OUTER257_tree = (Object)adaptor.create(OUTER257);
					adaptor.addChild(root_0, OUTER257_tree);
					}

					JOIN_SYM258=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_table_atom21318); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					JOIN_SYM258_tree = (Object)adaptor.create(JOIN_SYM258);
					adaptor.addChild(root_0, JOIN_SYM258_tree);
					}

					pushFollow(FOLLOW_table_reference_in_table_atom21320);
					table_reference259=table_reference();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference259.getTree());

					ON260=(Token)match(input,ON,FOLLOW_ON_in_table_atom21322); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON260_tree = (Object)adaptor.create(ON260);
					adaptor.addChild(root_0, ON260_tree);
					}

					pushFollow(FOLLOW_expression_in_table_atom21324);
					expression261=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression261.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_atom"


	public static class join_condition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "join_condition"
	// MySQL.g:1358:1: join_condition : ( ( ON expression ) | ( USING_SYM column_list ) );
	public final MySQLParser.join_condition_return join_condition() throws RecognitionException {
		MySQLParser.join_condition_return retval = new MySQLParser.join_condition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ON262=null;
		Token USING_SYM264=null;
		ParserRuleReturnScope expression263 =null;
		ParserRuleReturnScope column_list265 =null;

		Object ON262_tree=null;
		Object USING_SYM264_tree=null;

		try {
			// MySQL.g:1358:15: ( ( ON expression ) | ( USING_SYM column_list ) )
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==ON) ) {
				alt70=1;
			}
			else if ( (LA70_0==USING_SYM) ) {
				alt70=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}

			switch (alt70) {
				case 1 :
					// MySQL.g:1359:4: ( ON expression )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1359:4: ( ON expression )
					// MySQL.g:1359:5: ON expression
					{
					ON262=(Token)match(input,ON,FOLLOW_ON_in_join_condition21337); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON262_tree = (Object)adaptor.create(ON262);
					adaptor.addChild(root_0, ON262_tree);
					}

					pushFollow(FOLLOW_expression_in_join_condition21339);
					expression263=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression263.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:1359:22: ( USING_SYM column_list )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1359:22: ( USING_SYM column_list )
					// MySQL.g:1359:23: USING_SYM column_list
					{
					USING_SYM264=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_join_condition21345); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USING_SYM264_tree = (Object)adaptor.create(USING_SYM264);
					adaptor.addChild(root_0, USING_SYM264_tree);
					}

					pushFollow(FOLLOW_column_list_in_join_condition21347);
					column_list265=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list265.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_condition"


	public static class index_hint_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_hint_list"
	// MySQL.g:1361:1: index_hint_list : index_hint ( COMMA index_hint )* ;
	public final MySQLParser.index_hint_list_return index_hint_list() throws RecognitionException {
		MySQLParser.index_hint_list_return retval = new MySQLParser.index_hint_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA267=null;
		ParserRuleReturnScope index_hint266 =null;
		ParserRuleReturnScope index_hint268 =null;

		Object COMMA267_tree=null;

		try {
			// MySQL.g:1361:16: ( index_hint ( COMMA index_hint )* )
			// MySQL.g:1362:2: index_hint ( COMMA index_hint )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_index_hint_in_index_hint_list21356);
			index_hint266=index_hint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint266.getTree());

			// MySQL.g:1362:13: ( COMMA index_hint )*
			loop71:
			while (true) {
				int alt71=2;
				int LA71_0 = input.LA(1);
				if ( (LA71_0==COMMA) ) {
					int LA71_1 = input.LA(2);
					if ( (LA71_1==FORCE_SYM||LA71_1==IGNORE_SYM||LA71_1==USE_SYM) ) {
						alt71=1;
					}

				}

				switch (alt71) {
				case 1 :
					// MySQL.g:1362:14: COMMA index_hint
					{
					COMMA267=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_hint_list21359); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA267_tree = (Object)adaptor.create(COMMA267);
					adaptor.addChild(root_0, COMMA267_tree);
					}

					pushFollow(FOLLOW_index_hint_in_index_hint_list21361);
					index_hint268=index_hint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_hint268.getTree());

					}
					break;

				default :
					break loop71;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_hint_list"


	public static class index_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_options"
	// MySQL.g:1364:1: index_options : ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )? ;
	public final MySQLParser.index_options_return index_options() throws RecognitionException {
		MySQLParser.index_options_return retval = new MySQLParser.index_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set269=null;
		Token FOR_SYM270=null;
		Token JOIN_SYM271=null;
		Token ORDER_SYM272=null;
		Token BY_SYM273=null;
		Token GROUP_SYM274=null;
		Token BY_SYM275=null;

		Object set269_tree=null;
		Object FOR_SYM270_tree=null;
		Object JOIN_SYM271_tree=null;
		Object ORDER_SYM272_tree=null;
		Object BY_SYM273_tree=null;
		Object GROUP_SYM274_tree=null;
		Object BY_SYM275_tree=null;

		try {
			// MySQL.g:1364:14: ( ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )? )
			// MySQL.g:1365:2: ( INDEX_SYM | KEY_SYM ) ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )?
			{
			root_0 = (Object)adaptor.nil();


			set269=input.LT(1);
			if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set269));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// MySQL.g:1365:24: ( FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) ) )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==FOR_SYM) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// MySQL.g:1365:27: FOR_SYM ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) )
					{
					FOR_SYM270=(Token)match(input,FOR_SYM,FOLLOW_FOR_SYM_in_index_options21382); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOR_SYM270_tree = (Object)adaptor.create(FOR_SYM270);
					adaptor.addChild(root_0, FOR_SYM270_tree);
					}

					// MySQL.g:1365:35: ( ( JOIN_SYM ) | ( ORDER_SYM BY_SYM ) | ( GROUP_SYM BY_SYM ) )
					int alt72=3;
					switch ( input.LA(1) ) {
					case JOIN_SYM:
						{
						alt72=1;
						}
						break;
					case ORDER_SYM:
						{
						alt72=2;
						}
						break;
					case GROUP_SYM:
						{
						alt72=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 72, 0, input);
						throw nvae;
					}
					switch (alt72) {
						case 1 :
							// MySQL.g:1365:36: ( JOIN_SYM )
							{
							// MySQL.g:1365:36: ( JOIN_SYM )
							// MySQL.g:1365:37: JOIN_SYM
							{
							JOIN_SYM271=(Token)match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_index_options21386); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							JOIN_SYM271_tree = (Object)adaptor.create(JOIN_SYM271);
							adaptor.addChild(root_0, JOIN_SYM271_tree);
							}

							}

							}
							break;
						case 2 :
							// MySQL.g:1365:49: ( ORDER_SYM BY_SYM )
							{
							// MySQL.g:1365:49: ( ORDER_SYM BY_SYM )
							// MySQL.g:1365:50: ORDER_SYM BY_SYM
							{
							ORDER_SYM272=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_index_options21392); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ORDER_SYM272_tree = (Object)adaptor.create(ORDER_SYM272);
							adaptor.addChild(root_0, ORDER_SYM272_tree);
							}

							BY_SYM273=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_index_options21394); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM273_tree = (Object)adaptor.create(BY_SYM273);
							adaptor.addChild(root_0, BY_SYM273_tree);
							}

							}

							}
							break;
						case 3 :
							// MySQL.g:1365:70: ( GROUP_SYM BY_SYM )
							{
							// MySQL.g:1365:70: ( GROUP_SYM BY_SYM )
							// MySQL.g:1365:71: GROUP_SYM BY_SYM
							{
							GROUP_SYM274=(Token)match(input,GROUP_SYM,FOLLOW_GROUP_SYM_in_index_options21400); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							GROUP_SYM274_tree = (Object)adaptor.create(GROUP_SYM274);
							adaptor.addChild(root_0, GROUP_SYM274_tree);
							}

							BY_SYM275=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_index_options21402); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM275_tree = (Object)adaptor.create(BY_SYM275);
							adaptor.addChild(root_0, BY_SYM275_tree);
							}

							}

							}
							break;

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_options"


	public static class index_hint_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_hint"
	// MySQL.g:1367:1: index_hint : ( USE_SYM index_options LPAREN ( index_list )? RPAREN | IGNORE_SYM index_options LPAREN index_list RPAREN | FORCE_SYM index_options LPAREN index_list RPAREN );
	public final MySQLParser.index_hint_return index_hint() throws RecognitionException {
		MySQLParser.index_hint_return retval = new MySQLParser.index_hint_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USE_SYM276=null;
		Token LPAREN278=null;
		Token RPAREN280=null;
		Token IGNORE_SYM281=null;
		Token LPAREN283=null;
		Token RPAREN285=null;
		Token FORCE_SYM286=null;
		Token LPAREN288=null;
		Token RPAREN290=null;
		ParserRuleReturnScope index_options277 =null;
		ParserRuleReturnScope index_list279 =null;
		ParserRuleReturnScope index_options282 =null;
		ParserRuleReturnScope index_list284 =null;
		ParserRuleReturnScope index_options287 =null;
		ParserRuleReturnScope index_list289 =null;

		Object USE_SYM276_tree=null;
		Object LPAREN278_tree=null;
		Object RPAREN280_tree=null;
		Object IGNORE_SYM281_tree=null;
		Object LPAREN283_tree=null;
		Object RPAREN285_tree=null;
		Object FORCE_SYM286_tree=null;
		Object LPAREN288_tree=null;
		Object RPAREN290_tree=null;

		try {
			// MySQL.g:1367:11: ( USE_SYM index_options LPAREN ( index_list )? RPAREN | IGNORE_SYM index_options LPAREN index_list RPAREN | FORCE_SYM index_options LPAREN index_list RPAREN )
			int alt75=3;
			switch ( input.LA(1) ) {
			case USE_SYM:
				{
				alt75=1;
				}
				break;
			case IGNORE_SYM:
				{
				alt75=2;
				}
				break;
			case FORCE_SYM:
				{
				alt75=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}
			switch (alt75) {
				case 1 :
					// MySQL.g:1368:4: USE_SYM index_options LPAREN ( index_list )? RPAREN
					{
					root_0 = (Object)adaptor.nil();


					USE_SYM276=(Token)match(input,USE_SYM,FOLLOW_USE_SYM_in_index_hint21418); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USE_SYM276_tree = (Object)adaptor.create(USE_SYM276);
					adaptor.addChild(root_0, USE_SYM276_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint21423);
					index_options277=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options277.getTree());

					LPAREN278=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint21425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN278_tree = (Object)adaptor.create(LPAREN278);
					adaptor.addChild(root_0, LPAREN278_tree);
					}

					// MySQL.g:1368:36: ( index_list )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==ID) ) {
						alt74=1;
					}
					switch (alt74) {
						case 1 :
							// MySQL.g:1368:37: index_list
							{
							pushFollow(FOLLOW_index_list_in_index_hint21428);
							index_list279=index_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list279.getTree());

							}
							break;

					}

					RPAREN280=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint21432); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN280_tree = (Object)adaptor.create(RPAREN280);
					adaptor.addChild(root_0, RPAREN280_tree);
					}

					}
					break;
				case 2 :
					// MySQL.g:1369:4: IGNORE_SYM index_options LPAREN index_list RPAREN
					{
					root_0 = (Object)adaptor.nil();


					IGNORE_SYM281=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_index_hint21437); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM281_tree = (Object)adaptor.create(IGNORE_SYM281);
					adaptor.addChild(root_0, IGNORE_SYM281_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint21439);
					index_options282=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options282.getTree());

					LPAREN283=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint21441); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN283_tree = (Object)adaptor.create(LPAREN283);
					adaptor.addChild(root_0, LPAREN283_tree);
					}

					pushFollow(FOLLOW_index_list_in_index_hint21443);
					index_list284=index_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list284.getTree());

					RPAREN285=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint21445); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN285_tree = (Object)adaptor.create(RPAREN285);
					adaptor.addChild(root_0, RPAREN285_tree);
					}

					}
					break;
				case 3 :
					// MySQL.g:1370:4: FORCE_SYM index_options LPAREN index_list RPAREN
					{
					root_0 = (Object)adaptor.nil();


					FORCE_SYM286=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_index_hint21450); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FORCE_SYM286_tree = (Object)adaptor.create(FORCE_SYM286);
					adaptor.addChild(root_0, FORCE_SYM286_tree);
					}

					pushFollow(FOLLOW_index_options_in_index_hint21453);
					index_options287=index_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_options287.getTree());

					LPAREN288=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_hint21455); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN288_tree = (Object)adaptor.create(LPAREN288);
					adaptor.addChild(root_0, LPAREN288_tree);
					}

					pushFollow(FOLLOW_index_list_in_index_hint21457);
					index_list289=index_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_list289.getTree());

					RPAREN290=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_hint21459); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN290_tree = (Object)adaptor.create(RPAREN290);
					adaptor.addChild(root_0, RPAREN290_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_hint"


	public static class index_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_list"
	// MySQL.g:1372:1: index_list : index_name ( COMMA index_name )* ;
	public final MySQLParser.index_list_return index_list() throws RecognitionException {
		MySQLParser.index_list_return retval = new MySQLParser.index_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA292=null;
		ParserRuleReturnScope index_name291 =null;
		ParserRuleReturnScope index_name293 =null;

		Object COMMA292_tree=null;

		try {
			// MySQL.g:1372:11: ( index_name ( COMMA index_name )* )
			// MySQL.g:1373:2: index_name ( COMMA index_name )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_index_name_in_index_list21467);
			index_name291=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name291.getTree());

			// MySQL.g:1373:13: ( COMMA index_name )*
			loop76:
			while (true) {
				int alt76=2;
				int LA76_0 = input.LA(1);
				if ( (LA76_0==COMMA) ) {
					alt76=1;
				}

				switch (alt76) {
				case 1 :
					// MySQL.g:1373:14: COMMA index_name
					{
					COMMA292=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_list21470); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA292_tree = (Object)adaptor.create(COMMA292);
					adaptor.addChild(root_0, COMMA292_tree);
					}

					pushFollow(FOLLOW_index_name_in_index_list21472);
					index_name293=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name293.getTree());

					}
					break;

				default :
					break loop76;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_list"


	public static class partition_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_clause"
	// MySQL.g:1375:1: partition_clause : PARTITION_SYM LPAREN partition_names RPAREN ;
	public final MySQLParser.partition_clause_return partition_clause() throws RecognitionException {
		MySQLParser.partition_clause_return retval = new MySQLParser.partition_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PARTITION_SYM294=null;
		Token LPAREN295=null;
		Token RPAREN297=null;
		ParserRuleReturnScope partition_names296 =null;

		Object PARTITION_SYM294_tree=null;
		Object LPAREN295_tree=null;
		Object RPAREN297_tree=null;

		try {
			// MySQL.g:1375:17: ( PARTITION_SYM LPAREN partition_names RPAREN )
			// MySQL.g:1376:2: PARTITION_SYM LPAREN partition_names RPAREN
			{
			root_0 = (Object)adaptor.nil();


			PARTITION_SYM294=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_clause21482); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM294_tree = (Object)adaptor.create(PARTITION_SYM294);
			adaptor.addChild(root_0, PARTITION_SYM294_tree);
			}

			LPAREN295=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_clause21484); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN295_tree = (Object)adaptor.create(LPAREN295);
			adaptor.addChild(root_0, LPAREN295_tree);
			}

			pushFollow(FOLLOW_partition_names_in_partition_clause21486);
			partition_names296=partition_names();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names296.getTree());

			RPAREN297=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_clause21488); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN297_tree = (Object)adaptor.create(RPAREN297);
			adaptor.addChild(root_0, RPAREN297_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_clause"


	public static class partition_names_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_names"
	// MySQL.g:1378:1: partition_names : partition_name ( COMMA partition_name )* ;
	public final MySQLParser.partition_names_return partition_names() throws RecognitionException {
		MySQLParser.partition_names_return retval = new MySQLParser.partition_names_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA299=null;
		ParserRuleReturnScope partition_name298 =null;
		ParserRuleReturnScope partition_name300 =null;

		Object COMMA299_tree=null;

		try {
			// MySQL.g:1378:16: ( partition_name ( COMMA partition_name )* )
			// MySQL.g:1378:18: partition_name ( COMMA partition_name )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_partition_name_in_partition_names21495);
			partition_name298=partition_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name298.getTree());

			// MySQL.g:1378:33: ( COMMA partition_name )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==COMMA) ) {
					int LA77_2 = input.LA(2);
					if ( (LA77_2==ID) ) {
						alt77=1;
					}

				}

				switch (alt77) {
				case 1 :
					// MySQL.g:1378:34: COMMA partition_name
					{
					COMMA299=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_names21498); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA299_tree = (Object)adaptor.create(COMMA299);
					adaptor.addChild(root_0, COMMA299_tree);
					}

					pushFollow(FOLLOW_partition_name_in_partition_names21500);
					partition_name300=partition_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name300.getTree());

					}
					break;

				default :
					break loop77;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_names"


	public static class root_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "root_statement"
	// MySQL.g:1386:1: root_statement : ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )? ;
	public final MySQLParser.root_statement_return root_statement() throws RecognitionException {
		MySQLParser.root_statement_return retval = new MySQLParser.root_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SHIFT_LEFT301=null;
		Token SHIFT_RIGHT302=null;
		Token SEMI305=null;
		ParserRuleReturnScope data_manipulation_statements303 =null;
		ParserRuleReturnScope data_definition_statements304 =null;

		Object SHIFT_LEFT301_tree=null;
		Object SHIFT_RIGHT302_tree=null;
		Object SEMI305_tree=null;

		try {
			// MySQL.g:1386:15: ( ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )? )
			// MySQL.g:1387:2: ( SHIFT_LEFT SHIFT_RIGHT )? ( data_manipulation_statements | data_definition_statements ) ( SEMI )?
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1387:2: ( SHIFT_LEFT SHIFT_RIGHT )?
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==SHIFT_LEFT) ) {
				alt78=1;
			}
			switch (alt78) {
				case 1 :
					// MySQL.g:1387:3: SHIFT_LEFT SHIFT_RIGHT
					{
					SHIFT_LEFT301=(Token)match(input,SHIFT_LEFT,FOLLOW_SHIFT_LEFT_in_root_statement21518); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHIFT_LEFT301_tree = (Object)adaptor.create(SHIFT_LEFT301);
					adaptor.addChild(root_0, SHIFT_LEFT301_tree);
					}

					SHIFT_RIGHT302=(Token)match(input,SHIFT_RIGHT,FOLLOW_SHIFT_RIGHT_in_root_statement21520); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHIFT_RIGHT302_tree = (Object)adaptor.create(SHIFT_RIGHT302);
					adaptor.addChild(root_0, SHIFT_RIGHT302_tree);
					}

					}
					break;

			}

			// MySQL.g:1388:2: ( data_manipulation_statements | data_definition_statements )
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==CALL_SYM||LA79_0==DELETE_SYM||LA79_0==DO_SYM||LA79_0==HANDLER_SYM||LA79_0==INSERT||LA79_0==LOAD||LA79_0==REPLACE||LA79_0==SELECT||LA79_0==UPDATE) ) {
				alt79=1;
			}
			else if ( (LA79_0==ALTER||LA79_0==CREATE||LA79_0==DROP||LA79_0==RENAME||LA79_0==TRUNCATE) ) {
				alt79=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}

			switch (alt79) {
				case 1 :
					// MySQL.g:1388:4: data_manipulation_statements
					{
					pushFollow(FOLLOW_data_manipulation_statements_in_root_statement21529);
					data_manipulation_statements303=data_manipulation_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_manipulation_statements303.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1388:35: data_definition_statements
					{
					pushFollow(FOLLOW_data_definition_statements_in_root_statement21533);
					data_definition_statements304=data_definition_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_definition_statements304.getTree());

					}
					break;

			}

			// MySQL.g:1389:2: ( SEMI )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==SEMI) ) {
				int LA80_1 = input.LA(2);
				if ( (synpred373_MySQL()) ) {
					alt80=1;
				}
			}
			switch (alt80) {
				case 1 :
					// MySQL.g:1389:3: SEMI
					{
					SEMI305=(Token)match(input,SEMI,FOLLOW_SEMI_in_root_statement21541); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SEMI305_tree = (Object)adaptor.create(SEMI305);
					adaptor.addChild(root_0, SEMI305_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "root_statement"


	public static class data_manipulation_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "data_manipulation_statements"
	// MySQL.g:1392:1: data_manipulation_statements : ( select_statement | delete_statements | insert_statements | update_statements | call_statement | do_statement | handler_statements | load_data_statement | load_xml_statement | replace_statement );
	public final MySQLParser.data_manipulation_statements_return data_manipulation_statements() throws RecognitionException {
		MySQLParser.data_manipulation_statements_return retval = new MySQLParser.data_manipulation_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope select_statement306 =null;
		ParserRuleReturnScope delete_statements307 =null;
		ParserRuleReturnScope insert_statements308 =null;
		ParserRuleReturnScope update_statements309 =null;
		ParserRuleReturnScope call_statement310 =null;
		ParserRuleReturnScope do_statement311 =null;
		ParserRuleReturnScope handler_statements312 =null;
		ParserRuleReturnScope load_data_statement313 =null;
		ParserRuleReturnScope load_xml_statement314 =null;
		ParserRuleReturnScope replace_statement315 =null;


		try {
			// MySQL.g:1392:29: ( select_statement | delete_statements | insert_statements | update_statements | call_statement | do_statement | handler_statements | load_data_statement | load_xml_statement | replace_statement )
			int alt81=10;
			switch ( input.LA(1) ) {
			case SELECT:
				{
				alt81=1;
				}
				break;
			case DELETE_SYM:
				{
				alt81=2;
				}
				break;
			case INSERT:
				{
				alt81=3;
				}
				break;
			case UPDATE:
				{
				alt81=4;
				}
				break;
			case CALL_SYM:
				{
				alt81=5;
				}
				break;
			case DO_SYM:
				{
				alt81=6;
				}
				break;
			case HANDLER_SYM:
				{
				alt81=7;
				}
				break;
			case LOAD:
				{
				int LA81_8 = input.LA(2);
				if ( (LA81_8==DATA_SYM) ) {
					alt81=8;
				}
				else if ( (LA81_8==XML_SYM) ) {
					alt81=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 81, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REPLACE:
				{
				alt81=10;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// MySQL.g:1393:4: select_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_select_statement_in_data_manipulation_statements21554);
					select_statement306=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement306.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1394:4: delete_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_delete_statements_in_data_manipulation_statements21559);
					delete_statements307=delete_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statements307.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1395:4: insert_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statements_in_data_manipulation_statements21564);
					insert_statements308=insert_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statements308.getTree());

					}
					break;
				case 4 :
					// MySQL.g:1396:4: update_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_update_statements_in_data_manipulation_statements21569);
					update_statements309=update_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statements309.getTree());

					}
					break;
				case 5 :
					// MySQL.g:1398:4: call_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_call_statement_in_data_manipulation_statements21575);
					call_statement310=call_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, call_statement310.getTree());

					}
					break;
				case 6 :
					// MySQL.g:1399:4: do_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_do_statement_in_data_manipulation_statements21580);
					do_statement311=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement311.getTree());

					}
					break;
				case 7 :
					// MySQL.g:1400:4: handler_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_handler_statements_in_data_manipulation_statements21585);
					handler_statements312=handler_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statements312.getTree());

					}
					break;
				case 8 :
					// MySQL.g:1401:4: load_data_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_load_data_statement_in_data_manipulation_statements21590);
					load_data_statement313=load_data_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, load_data_statement313.getTree());

					}
					break;
				case 9 :
					// MySQL.g:1402:4: load_xml_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_load_xml_statement_in_data_manipulation_statements21595);
					load_xml_statement314=load_xml_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, load_xml_statement314.getTree());

					}
					break;
				case 10 :
					// MySQL.g:1403:4: replace_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_replace_statement_in_data_manipulation_statements21600);
					replace_statement315=replace_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement315.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_statements"


	public static class data_definition_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "data_definition_statements"
	// MySQL.g:1406:1: data_definition_statements : ( create_database_statement | alter_database_statements | drop_database_statement | create_event_statement | alter_event_statement | drop_event_statement | create_server_statement | alter_server_statement | drop_server_statement | create_table_statement | alter_table_statement | drop_table_statement | create_view_statement | alter_view_statement | rename_table_statement | drop_view_statement | truncate_table_statement | create_index_statement | drop_index_statement );
	public final MySQLParser.data_definition_statements_return data_definition_statements() throws RecognitionException {
		MySQLParser.data_definition_statements_return retval = new MySQLParser.data_definition_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope create_database_statement316 =null;
		ParserRuleReturnScope alter_database_statements317 =null;
		ParserRuleReturnScope drop_database_statement318 =null;
		ParserRuleReturnScope create_event_statement319 =null;
		ParserRuleReturnScope alter_event_statement320 =null;
		ParserRuleReturnScope drop_event_statement321 =null;
		ParserRuleReturnScope create_server_statement322 =null;
		ParserRuleReturnScope alter_server_statement323 =null;
		ParserRuleReturnScope drop_server_statement324 =null;
		ParserRuleReturnScope create_table_statement325 =null;
		ParserRuleReturnScope alter_table_statement326 =null;
		ParserRuleReturnScope drop_table_statement327 =null;
		ParserRuleReturnScope create_view_statement328 =null;
		ParserRuleReturnScope alter_view_statement329 =null;
		ParserRuleReturnScope rename_table_statement330 =null;
		ParserRuleReturnScope drop_view_statement331 =null;
		ParserRuleReturnScope truncate_table_statement332 =null;
		ParserRuleReturnScope create_index_statement333 =null;
		ParserRuleReturnScope drop_index_statement334 =null;


		try {
			// MySQL.g:1406:27: ( create_database_statement | alter_database_statements | drop_database_statement | create_event_statement | alter_event_statement | drop_event_statement | create_server_statement | alter_server_statement | drop_server_statement | create_table_statement | alter_table_statement | drop_table_statement | create_view_statement | alter_view_statement | rename_table_statement | drop_view_statement | truncate_table_statement | create_index_statement | drop_index_statement )
			int alt82=19;
			switch ( input.LA(1) ) {
			case CREATE:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=1;
					}
					break;
				case SERVER_SYM:
					{
					alt82=7;
					}
					break;
				case DEFINER:
					{
					int LA82_8 = input.LA(3);
					if ( (LA82_8==EQ_SYM) ) {
						int LA82_25 = input.LA(4);
						if ( (LA82_25==ID) ) {
							int LA82_27 = input.LA(5);
							if ( (LA82_27==EVENT_SYM) ) {
								alt82=4;
							}
							else if ( (LA82_27==SQL_SYM||LA82_27==VIEW_SYM) ) {
								alt82=13;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 27, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA82_25==CURRENT_USER) ) {
							int LA82_28 = input.LA(5);
							if ( (LA82_28==EVENT_SYM) ) {
								alt82=4;
							}
							else if ( (LA82_28==SQL_SYM||LA82_28==VIEW_SYM) ) {
								alt82=13;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 28, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 25, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 8, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EVENT_SYM:
					{
					alt82=4;
					}
					break;
				case TABLE:
				case TEMPORARY:
					{
					alt82=10;
					}
					break;
				case ALGORITHM_SYM:
				case OR_SYM:
				case SQL_SYM:
				case VIEW_SYM:
					{
					alt82=13;
					}
					break;
				case FULLTEXT_SYM:
				case INDEX_SYM:
				case SPATIAL_SYM:
				case UNIQUE_SYM:
					{
					alt82=18;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case ALTER:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=2;
					}
					break;
				case SERVER_SYM:
					{
					alt82=8;
					}
					break;
				case DEFINER:
					{
					int LA82_15 = input.LA(3);
					if ( (LA82_15==EQ_SYM) ) {
						int LA82_26 = input.LA(4);
						if ( (LA82_26==ID) ) {
							int LA82_29 = input.LA(5);
							if ( (LA82_29==EVENT_SYM) ) {
								alt82=5;
							}
							else if ( (LA82_29==SQL_SYM||LA82_29==VIEW_SYM) ) {
								alt82=14;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 29, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA82_26==CURRENT_USER) ) {
							int LA82_30 = input.LA(5);
							if ( (LA82_30==EVENT_SYM) ) {
								alt82=5;
							}
							else if ( (LA82_30==SQL_SYM||LA82_30==VIEW_SYM) ) {
								alt82=14;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 82, 30, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 82, 26, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 82, 15, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case EVENT_SYM:
					{
					alt82=5;
					}
					break;
				case IGNORE_SYM:
				case TABLE:
					{
					alt82=11;
					}
					break;
				case ALGORITHM_SYM:
				case SQL_SYM:
				case VIEW_SYM:
					{
					alt82=14;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DROP:
				{
				switch ( input.LA(2) ) {
				case DATABASE:
				case SCHEMA:
					{
					alt82=3;
					}
					break;
				case EVENT_SYM:
					{
					alt82=6;
					}
					break;
				case SERVER_SYM:
					{
					alt82=9;
					}
					break;
				case VIEW_SYM:
					{
					alt82=16;
					}
					break;
				case INDEX_SYM:
					{
					alt82=19;
					}
					break;
				case TABLE:
				case TEMPORARY:
					{
					alt82=12;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 82, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case RENAME:
				{
				alt82=15;
				}
				break;
			case TRUNCATE:
				{
				alt82=17;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				throw nvae;
			}
			switch (alt82) {
				case 1 :
					// MySQL.g:1407:4: create_database_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_database_statement_in_data_definition_statements21612);
					create_database_statement316=create_database_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_database_statement316.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1408:4: alter_database_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statements_in_data_definition_statements21617);
					alter_database_statements317=alter_database_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statements317.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1409:4: drop_database_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_database_statement_in_data_definition_statements21622);
					drop_database_statement318=drop_database_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_database_statement318.getTree());

					}
					break;
				case 4 :
					// MySQL.g:1411:4: create_event_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_event_statement_in_data_definition_statements21629);
					create_event_statement319=create_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_event_statement319.getTree());

					}
					break;
				case 5 :
					// MySQL.g:1412:4: alter_event_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_event_statement_in_data_definition_statements21634);
					alter_event_statement320=alter_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_event_statement320.getTree());

					}
					break;
				case 6 :
					// MySQL.g:1413:4: drop_event_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_event_statement_in_data_definition_statements21639);
					drop_event_statement321=drop_event_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_event_statement321.getTree());

					}
					break;
				case 7 :
					// MySQL.g:1426:4: create_server_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_server_statement_in_data_definition_statements21668);
					create_server_statement322=create_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_statement322.getTree());

					}
					break;
				case 8 :
					// MySQL.g:1427:4: alter_server_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_server_statement_in_data_definition_statements21673);
					alter_server_statement323=alter_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_statement323.getTree());

					}
					break;
				case 9 :
					// MySQL.g:1428:4: drop_server_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_server_statement_in_data_definition_statements21678);
					drop_server_statement324=drop_server_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_server_statement324.getTree());

					}
					break;
				case 10 :
					// MySQL.g:1430:4: create_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement_in_data_definition_statements21685);
					create_table_statement325=create_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement325.getTree());

					}
					break;
				case 11 :
					// MySQL.g:1431:4: alter_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_table_statement_in_data_definition_statements21690);
					alter_table_statement326=alter_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_statement326.getTree());

					}
					break;
				case 12 :
					// MySQL.g:1432:4: drop_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_table_statement_in_data_definition_statements21695);
					drop_table_statement327=drop_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_table_statement327.getTree());

					}
					break;
				case 13 :
					// MySQL.g:1434:4: create_view_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_view_statement_in_data_definition_statements21702);
					create_view_statement328=create_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_statement328.getTree());

					}
					break;
				case 14 :
					// MySQL.g:1435:4: alter_view_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_view_statement_in_data_definition_statements21707);
					alter_view_statement329=alter_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_view_statement329.getTree());

					}
					break;
				case 15 :
					// MySQL.g:1436:4: rename_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_rename_table_statement_in_data_definition_statements21712);
					rename_table_statement330=rename_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rename_table_statement330.getTree());

					}
					break;
				case 16 :
					// MySQL.g:1437:4: drop_view_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_view_statement_in_data_definition_statements21717);
					drop_view_statement331=drop_view_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_view_statement331.getTree());

					}
					break;
				case 17 :
					// MySQL.g:1438:4: truncate_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_truncate_table_statement_in_data_definition_statements21722);
					truncate_table_statement332=truncate_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_table_statement332.getTree());

					}
					break;
				case 18 :
					// MySQL.g:1440:4: create_index_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_index_statement_in_data_definition_statements21729);
					create_index_statement333=create_index_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_index_statement333.getTree());

					}
					break;
				case 19 :
					// MySQL.g:1441:4: drop_index_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_index_statement_in_data_definition_statements21734);
					drop_index_statement334=drop_index_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_index_statement334.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_definition_statements"


	public static class select_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_statement"
	// MySQL.g:1474:1: select_statement : select_expression ( ( UNION_SYM ( ALL )? ) select_expression )* ;
	public final MySQLParser.select_statement_return select_statement() throws RecognitionException {
		MySQLParser.select_statement_return retval = new MySQLParser.select_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UNION_SYM336=null;
		Token ALL337=null;
		ParserRuleReturnScope select_expression335 =null;
		ParserRuleReturnScope select_expression338 =null;

		Object UNION_SYM336_tree=null;
		Object ALL337_tree=null;

		try {
			// MySQL.g:1474:17: ( select_expression ( ( UNION_SYM ( ALL )? ) select_expression )* )
			// MySQL.g:1475:9: select_expression ( ( UNION_SYM ( ALL )? ) select_expression )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_select_expression_in_select_statement21760);
			select_expression335=select_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression335.getTree());

			// MySQL.g:1475:27: ( ( UNION_SYM ( ALL )? ) select_expression )*
			loop84:
			while (true) {
				int alt84=2;
				int LA84_0 = input.LA(1);
				if ( (LA84_0==UNION_SYM) ) {
					alt84=1;
				}

				switch (alt84) {
				case 1 :
					// MySQL.g:1475:29: ( UNION_SYM ( ALL )? ) select_expression
					{
					// MySQL.g:1475:29: ( UNION_SYM ( ALL )? )
					// MySQL.g:1475:30: UNION_SYM ( ALL )?
					{
					UNION_SYM336=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_select_statement21765); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNION_SYM336_tree = (Object)adaptor.create(UNION_SYM336);
					adaptor.addChild(root_0, UNION_SYM336_tree);
					}

					// MySQL.g:1475:40: ( ALL )?
					int alt83=2;
					int LA83_0 = input.LA(1);
					if ( (LA83_0==ALL) ) {
						alt83=1;
					}
					switch (alt83) {
						case 1 :
							// MySQL.g:1475:41: ALL
							{
							ALL337=(Token)match(input,ALL,FOLLOW_ALL_in_select_statement21768); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL337_tree = (Object)adaptor.create(ALL337);
							adaptor.addChild(root_0, ALL337_tree);
							}

							}
							break;

					}

					}

					pushFollow(FOLLOW_select_expression_in_select_statement21773);
					select_expression338=select_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression338.getTree());

					}
					break;

				default :
					break loop84;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class select_expression_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_expression"
	// MySQL.g:1478:1: select_expression : SELECT ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list ( FROM table_references ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )? ;
	public final MySQLParser.select_expression_return select_expression() throws RecognitionException {
		MySQLParser.select_expression_return retval = new MySQLParser.select_expression_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SELECT339=null;
		Token set340=null;
		Token HIGH_PRIORITY341=null;
		Token STRAIGHT_JOIN342=null;
		Token SQL_SMALL_RESULT343=null;
		Token SQL_BIG_RESULT344=null;
		Token SQL_BUFFER_RESULT345=null;
		Token set346=null;
		Token SQL_CALC_FOUND_ROWS347=null;
		Token FROM349=null;
		Token FOR_SYM357=null;
		Token UPDATE358=null;
		Token LOCK359=null;
		Token IN_SYM360=null;
		Token SHARE_SYM361=null;
		Token MODE_SYM362=null;
		ParserRuleReturnScope select_list348 =null;
		ParserRuleReturnScope table_references350 =null;
		ParserRuleReturnScope partition_clause351 =null;
		ParserRuleReturnScope where_clause352 =null;
		ParserRuleReturnScope groupby_clause353 =null;
		ParserRuleReturnScope having_clause354 =null;
		ParserRuleReturnScope orderby_clause355 =null;
		ParserRuleReturnScope limit_clause356 =null;

		Object SELECT339_tree=null;
		Object set340_tree=null;
		Object HIGH_PRIORITY341_tree=null;
		Object STRAIGHT_JOIN342_tree=null;
		Object SQL_SMALL_RESULT343_tree=null;
		Object SQL_BIG_RESULT344_tree=null;
		Object SQL_BUFFER_RESULT345_tree=null;
		Object set346_tree=null;
		Object SQL_CALC_FOUND_ROWS347_tree=null;
		Object FROM349_tree=null;
		Object FOR_SYM357_tree=null;
		Object UPDATE358_tree=null;
		Object LOCK359_tree=null;
		Object IN_SYM360_tree=null;
		Object SHARE_SYM361_tree=null;
		Object MODE_SYM362_tree=null;

		try {
			// MySQL.g:1478:18: ( SELECT ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list ( FROM table_references ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )? )
			// MySQL.g:1479:2: SELECT ( ALL | DISTINCT | DISTINCTROW )? ( HIGH_PRIORITY )? ( STRAIGHT_JOIN )? ( SQL_SMALL_RESULT )? ( SQL_BIG_RESULT )? ( SQL_BUFFER_RESULT )? ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )? ( SQL_CALC_FOUND_ROWS )? select_list ( FROM table_references ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )? ( orderby_clause )? ( limit_clause )? ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )?
			{
			root_0 = (Object)adaptor.nil();


			SELECT339=(Token)match(input,SELECT,FOLLOW_SELECT_in_select_expression21786); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SELECT339_tree = (Object)adaptor.create(SELECT339);
			adaptor.addChild(root_0, SELECT339_tree);
			}

			// MySQL.g:1481:2: ( ALL | DISTINCT | DISTINCTROW )?
			int alt85=2;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==ALL||(LA85_0 >= DISTINCT && LA85_0 <= DISTINCTROW)) ) {
				alt85=1;
			}
			switch (alt85) {
				case 1 :
					// MySQL.g:
					{
					set340=input.LT(1);
					if ( input.LA(1)==ALL||(input.LA(1) >= DISTINCT && input.LA(1) <= DISTINCTROW) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set340));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1482:2: ( HIGH_PRIORITY )?
			int alt86=2;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==HIGH_PRIORITY) ) {
				alt86=1;
			}
			switch (alt86) {
				case 1 :
					// MySQL.g:1482:3: HIGH_PRIORITY
					{
					HIGH_PRIORITY341=(Token)match(input,HIGH_PRIORITY,FOLLOW_HIGH_PRIORITY_in_select_expression21810); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HIGH_PRIORITY341_tree = (Object)adaptor.create(HIGH_PRIORITY341);
					adaptor.addChild(root_0, HIGH_PRIORITY341_tree);
					}

					}
					break;

			}

			// MySQL.g:1483:2: ( STRAIGHT_JOIN )?
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==STRAIGHT_JOIN) ) {
				alt87=1;
			}
			switch (alt87) {
				case 1 :
					// MySQL.g:1483:3: STRAIGHT_JOIN
					{
					STRAIGHT_JOIN342=(Token)match(input,STRAIGHT_JOIN,FOLLOW_STRAIGHT_JOIN_in_select_expression21816); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STRAIGHT_JOIN342_tree = (Object)adaptor.create(STRAIGHT_JOIN342);
					adaptor.addChild(root_0, STRAIGHT_JOIN342_tree);
					}

					}
					break;

			}

			// MySQL.g:1484:2: ( SQL_SMALL_RESULT )?
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==SQL_SMALL_RESULT) ) {
				alt88=1;
			}
			switch (alt88) {
				case 1 :
					// MySQL.g:1484:3: SQL_SMALL_RESULT
					{
					SQL_SMALL_RESULT343=(Token)match(input,SQL_SMALL_RESULT,FOLLOW_SQL_SMALL_RESULT_in_select_expression21822); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_SMALL_RESULT343_tree = (Object)adaptor.create(SQL_SMALL_RESULT343);
					adaptor.addChild(root_0, SQL_SMALL_RESULT343_tree);
					}

					}
					break;

			}

			// MySQL.g:1484:22: ( SQL_BIG_RESULT )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==SQL_BIG_RESULT) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// MySQL.g:1484:23: SQL_BIG_RESULT
					{
					SQL_BIG_RESULT344=(Token)match(input,SQL_BIG_RESULT,FOLLOW_SQL_BIG_RESULT_in_select_expression21827); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_BIG_RESULT344_tree = (Object)adaptor.create(SQL_BIG_RESULT344);
					adaptor.addChild(root_0, SQL_BIG_RESULT344_tree);
					}

					}
					break;

			}

			// MySQL.g:1484:40: ( SQL_BUFFER_RESULT )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==SQL_BUFFER_RESULT) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// MySQL.g:1484:41: SQL_BUFFER_RESULT
					{
					SQL_BUFFER_RESULT345=(Token)match(input,SQL_BUFFER_RESULT,FOLLOW_SQL_BUFFER_RESULT_in_select_expression21832); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_BUFFER_RESULT345_tree = (Object)adaptor.create(SQL_BUFFER_RESULT345);
					adaptor.addChild(root_0, SQL_BUFFER_RESULT345_tree);
					}

					}
					break;

			}

			// MySQL.g:1485:2: ( SQL_CACHE_SYM | SQL_NO_CACHE_SYM )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==SQL_CACHE_SYM||LA91_0==SQL_NO_CACHE_SYM) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// MySQL.g:
					{
					set346=input.LT(1);
					if ( input.LA(1)==SQL_CACHE_SYM||input.LA(1)==SQL_NO_CACHE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set346));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1485:38: ( SQL_CALC_FOUND_ROWS )?
			int alt92=2;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==SQL_CALC_FOUND_ROWS) ) {
				alt92=1;
			}
			switch (alt92) {
				case 1 :
					// MySQL.g:1485:39: SQL_CALC_FOUND_ROWS
					{
					SQL_CALC_FOUND_ROWS347=(Token)match(input,SQL_CALC_FOUND_ROWS,FOLLOW_SQL_CALC_FOUND_ROWS_in_select_expression21847); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_CALC_FOUND_ROWS347_tree = (Object)adaptor.create(SQL_CALC_FOUND_ROWS347);
					adaptor.addChild(root_0, SQL_CALC_FOUND_ROWS347_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_select_list_in_select_expression21853);
			select_list348=select_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list348.getTree());

			// MySQL.g:1489:2: ( FROM table_references ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )? )?
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==FROM) ) {
				alt97=1;
			}
			switch (alt97) {
				case 1 :
					// MySQL.g:1490:3: FROM table_references ( partition_clause )? ( where_clause )? ( groupby_clause )? ( having_clause )?
					{
					FROM349=(Token)match(input,FROM,FOLLOW_FROM_in_select_expression21863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FROM349_tree = (Object)adaptor.create(FROM349);
					adaptor.addChild(root_0, FROM349_tree);
					}

					pushFollow(FOLLOW_table_references_in_select_expression21865);
					table_references350=table_references();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references350.getTree());

					// MySQL.g:1491:3: ( partition_clause )?
					int alt93=2;
					int LA93_0 = input.LA(1);
					if ( (LA93_0==PARTITION_SYM) ) {
						alt93=1;
					}
					switch (alt93) {
						case 1 :
							// MySQL.g:1491:5: partition_clause
							{
							pushFollow(FOLLOW_partition_clause_in_select_expression21872);
							partition_clause351=partition_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause351.getTree());

							}
							break;

					}

					// MySQL.g:1492:3: ( where_clause )?
					int alt94=2;
					int LA94_0 = input.LA(1);
					if ( (LA94_0==WHERE) ) {
						alt94=1;
					}
					switch (alt94) {
						case 1 :
							// MySQL.g:1492:5: where_clause
							{
							pushFollow(FOLLOW_where_clause_in_select_expression21881);
							where_clause352=where_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause352.getTree());

							}
							break;

					}

					// MySQL.g:1493:3: ( groupby_clause )?
					int alt95=2;
					int LA95_0 = input.LA(1);
					if ( (LA95_0==GROUP_SYM) ) {
						alt95=1;
					}
					switch (alt95) {
						case 1 :
							// MySQL.g:1493:5: groupby_clause
							{
							pushFollow(FOLLOW_groupby_clause_in_select_expression21891);
							groupby_clause353=groupby_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_clause353.getTree());

							}
							break;

					}

					// MySQL.g:1494:3: ( having_clause )?
					int alt96=2;
					int LA96_0 = input.LA(1);
					if ( (LA96_0==HAVING) ) {
						alt96=1;
					}
					switch (alt96) {
						case 1 :
							// MySQL.g:1494:5: having_clause
							{
							pushFollow(FOLLOW_having_clause_in_select_expression21900);
							having_clause354=having_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, having_clause354.getTree());

							}
							break;

					}

					}
					break;

			}

			// MySQL.g:1497:2: ( orderby_clause )?
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==ORDER_SYM) ) {
				alt98=1;
			}
			switch (alt98) {
				case 1 :
					// MySQL.g:1497:4: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_select_expression21915);
					orderby_clause355=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause355.getTree());

					}
					break;

			}

			// MySQL.g:1498:2: ( limit_clause )?
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==INTEGER_NUM||LA99_0==LIMIT) ) {
				alt99=1;
			}
			switch (alt99) {
				case 1 :
					// MySQL.g:1498:4: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_select_expression21923);
					limit_clause356=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause356.getTree());

					}
					break;

			}

			// MySQL.g:1499:2: ( ( FOR_SYM UPDATE ) | ( LOCK IN_SYM SHARE_SYM MODE_SYM ) )?
			int alt100=3;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==FOR_SYM) ) {
				alt100=1;
			}
			else if ( (LA100_0==LOCK) ) {
				alt100=2;
			}
			switch (alt100) {
				case 1 :
					// MySQL.g:1499:4: ( FOR_SYM UPDATE )
					{
					// MySQL.g:1499:4: ( FOR_SYM UPDATE )
					// MySQL.g:1499:6: FOR_SYM UPDATE
					{
					FOR_SYM357=(Token)match(input,FOR_SYM,FOLLOW_FOR_SYM_in_select_expression21933); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOR_SYM357_tree = (Object)adaptor.create(FOR_SYM357);
					adaptor.addChild(root_0, FOR_SYM357_tree);
					}

					UPDATE358=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_select_expression21935); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UPDATE358_tree = (Object)adaptor.create(UPDATE358);
					adaptor.addChild(root_0, UPDATE358_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1499:24: ( LOCK IN_SYM SHARE_SYM MODE_SYM )
					{
					// MySQL.g:1499:24: ( LOCK IN_SYM SHARE_SYM MODE_SYM )
					// MySQL.g:1499:25: LOCK IN_SYM SHARE_SYM MODE_SYM
					{
					LOCK359=(Token)match(input,LOCK,FOLLOW_LOCK_in_select_expression21941); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCK359_tree = (Object)adaptor.create(LOCK359);
					adaptor.addChild(root_0, LOCK359_tree);
					}

					IN_SYM360=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_select_expression21943); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IN_SYM360_tree = (Object)adaptor.create(IN_SYM360);
					adaptor.addChild(root_0, IN_SYM360_tree);
					}

					SHARE_SYM361=(Token)match(input,SHARE_SYM,FOLLOW_SHARE_SYM_in_select_expression21945); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHARE_SYM361_tree = (Object)adaptor.create(SHARE_SYM361);
					adaptor.addChild(root_0, SHARE_SYM361_tree);
					}

					MODE_SYM362=(Token)match(input,MODE_SYM,FOLLOW_MODE_SYM_in_select_expression21947); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODE_SYM362_tree = (Object)adaptor.create(MODE_SYM362);
					adaptor.addChild(root_0, MODE_SYM362_tree);
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_expression"


	public static class where_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "where_clause"
	// MySQL.g:1502:1: where_clause : WHERE expression ;
	public final MySQLParser.where_clause_return where_clause() throws RecognitionException {
		MySQLParser.where_clause_return retval = new MySQLParser.where_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token WHERE363=null;
		ParserRuleReturnScope expression364 =null;

		Object WHERE363_tree=null;

		try {
			// MySQL.g:1502:13: ( WHERE expression )
			// MySQL.g:1503:2: WHERE expression
			{
			root_0 = (Object)adaptor.nil();


			WHERE363=(Token)match(input,WHERE,FOLLOW_WHERE_in_where_clause21961); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			WHERE363_tree = (Object)adaptor.create(WHERE363);
			adaptor.addChild(root_0, WHERE363_tree);
			}

			pushFollow(FOLLOW_expression_in_where_clause21963);
			expression364=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression364.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class groupby_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "groupby_clause"
	// MySQL.g:1506:1: groupby_clause : GROUP_SYM BY_SYM groupby_item ( COMMA groupby_item )* ( WITH ROLLUP_SYM )? ;
	public final MySQLParser.groupby_clause_return groupby_clause() throws RecognitionException {
		MySQLParser.groupby_clause_return retval = new MySQLParser.groupby_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token GROUP_SYM365=null;
		Token BY_SYM366=null;
		Token COMMA368=null;
		Token WITH370=null;
		Token ROLLUP_SYM371=null;
		ParserRuleReturnScope groupby_item367 =null;
		ParserRuleReturnScope groupby_item369 =null;

		Object GROUP_SYM365_tree=null;
		Object BY_SYM366_tree=null;
		Object COMMA368_tree=null;
		Object WITH370_tree=null;
		Object ROLLUP_SYM371_tree=null;

		try {
			// MySQL.g:1506:15: ( GROUP_SYM BY_SYM groupby_item ( COMMA groupby_item )* ( WITH ROLLUP_SYM )? )
			// MySQL.g:1507:2: GROUP_SYM BY_SYM groupby_item ( COMMA groupby_item )* ( WITH ROLLUP_SYM )?
			{
			root_0 = (Object)adaptor.nil();


			GROUP_SYM365=(Token)match(input,GROUP_SYM,FOLLOW_GROUP_SYM_in_groupby_clause21972); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			GROUP_SYM365_tree = (Object)adaptor.create(GROUP_SYM365);
			adaptor.addChild(root_0, GROUP_SYM365_tree);
			}

			BY_SYM366=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_groupby_clause21974); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM366_tree = (Object)adaptor.create(BY_SYM366);
			adaptor.addChild(root_0, BY_SYM366_tree);
			}

			pushFollow(FOLLOW_groupby_item_in_groupby_clause21976);
			groupby_item367=groupby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item367.getTree());

			// MySQL.g:1507:32: ( COMMA groupby_item )*
			loop101:
			while (true) {
				int alt101=2;
				int LA101_0 = input.LA(1);
				if ( (LA101_0==COMMA) ) {
					switch ( input.LA(2) ) {
					case INSERT:
						{
						int LA101_3 = input.LA(3);
						if ( (LA101_3==EOF||LA101_3==ASTERISK||LA101_3==BITAND||LA101_3==COMMA||LA101_3==DIVIDE||LA101_3==FOR_SYM||LA101_3==HAVING||LA101_3==INTEGER_NUM||LA101_3==LIMIT||LA101_3==LOCK||LA101_3==LPAREN||LA101_3==MINUS||LA101_3==MOD_SYM||LA101_3==ON||LA101_3==ORDER_SYM||LA101_3==PLUS||LA101_3==POWER_OP||LA101_3==RPAREN||LA101_3==SEMI||(LA101_3 >= SHIFT_LEFT && LA101_3 <= SHIFT_RIGHT)||LA101_3==UNION_SYM||LA101_3==VERTBAR||LA101_3==WITH) ) {
							alt101=1;
						}

						}
						break;
					case REPLACE:
						{
						int LA101_4 = input.LA(3);
						if ( (LA101_4==EOF||LA101_4==ASTERISK||LA101_4==BITAND||LA101_4==COMMA||LA101_4==DIVIDE||LA101_4==FOR_SYM||LA101_4==HAVING||LA101_4==INTEGER_NUM||LA101_4==LIMIT||LA101_4==LOCK||LA101_4==LPAREN||LA101_4==MINUS||LA101_4==MOD_SYM||LA101_4==ON||LA101_4==ORDER_SYM||LA101_4==PLUS||LA101_4==POWER_OP||LA101_4==RPAREN||LA101_4==SEMI||(LA101_4 >= SHIFT_LEFT && LA101_4 <= SHIFT_RIGHT)||LA101_4==UNION_SYM||LA101_4==VERTBAR||LA101_4==WITH) ) {
							alt101=1;
						}

						}
						break;
					case TRUNCATE:
						{
						int LA101_5 = input.LA(3);
						if ( (LA101_5==EOF||LA101_5==ASTERISK||LA101_5==BITAND||LA101_5==COMMA||LA101_5==DIVIDE||LA101_5==FOR_SYM||LA101_5==HAVING||LA101_5==INTEGER_NUM||LA101_5==LIMIT||LA101_5==LOCK||LA101_5==LPAREN||LA101_5==MINUS||LA101_5==MOD_SYM||LA101_5==ON||LA101_5==ORDER_SYM||LA101_5==PLUS||LA101_5==POWER_OP||LA101_5==RPAREN||LA101_5==SEMI||(LA101_5 >= SHIFT_LEFT && LA101_5 <= SHIFT_RIGHT)||LA101_5==UNION_SYM||LA101_5==VERTBAR||LA101_5==WITH) ) {
							alt101=1;
						}

						}
						break;
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case ASCII_SYM:
					case ASIN:
					case ATAN:
					case ATAN2:
					case AVG:
					case BENCHMARK:
					case BIN:
					case BINARY:
					case BIT_AND:
					case BIT_LENGTH:
					case BIT_NUM:
					case BIT_OR:
					case BIT_XOR:
					case CASE_SYM:
					case CAST_SYM:
					case CEIL:
					case CEILING:
					case CHAR:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_SYM:
					case CONVERT_TZ:
					case COS:
					case COT:
					case COUNT:
					case CRC32:
					case CURDATE:
					case CURRENT_USER:
					case CURTIME:
					case DATABASE:
					case DATEDIFF:
					case DATE_ADD:
					case DATE_FORMAT:
					case DATE_SUB:
					case DATE_SYM:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEFAULT:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case EXISTS:
					case EXP:
					case EXPORT_SET:
					case EXTRACT:
					case FALSE_SYM:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GET_FORMAT:
					case GET_LOCK:
					case GROUP_CONCAT:
					case HEX:
					case HEX_DIGIT:
					case HOUR:
					case ID:
					case IF:
					case IFNULL:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTEGER_NUM:
					case INTERVAL_SYM:
					case IS_FREE_LOCK:
					case IS_USED_LOCK:
					case LAST_DAY:
					case LAST_INSERT_ID:
					case LEFT:
					case LENGTH:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LPAREN:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MATCH:
					case MAX_SYM:
					case MD5:
					case MICROSECOND:
					case MID:
					case MINUS:
					case MINUTE:
					case MIN_SYM:
					case MOD:
					case MONTH:
					case MONTHNAME:
					case NAME_CONST:
					case NEGATION:
					case NOW:
					case NULL_SYM:
					case OCT:
					case OLD_PASSWORD:
					case ORD:
					case PASSWORD:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case PLUS:
					case POW:
					case POWER:
					case QUARTER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case REAL_NUMBER:
					case RELEASE_LOCK:
					case REPEAT:
					case REVERSE:
					case RIGHT:
					case ROUND:
					case ROW_SYM:
					case RPAD:
					case RTRIM:
					case SCHEMA:
					case SECOND:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STD:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STRCMP:
					case STR_TO_DATE:
					case SUBSTRING:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SUM:
					case SYSDATE:
					case SYSTEM_USER:
					case TAN:
					case TEXT_STRING:
					case TIMEDIFF:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_SYM:
					case TIME_TO_SEC:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case TRIM:
					case TRUE_SYM:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPPER:
					case USER:
					case USER_VAR:
					case UTC_DATE:
					case UTC_TIME:
					case UTC_TIMESTAMP:
					case UUID:
					case VALUES:
					case VARIANCE:
					case VAR_POP:
					case VAR_SAMP:
					case VERSION_SYM:
					case WEEK:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case YEAR:
					case YEARWEEK:
						{
						alt101=1;
						}
						break;
					}
				}

				switch (alt101) {
				case 1 :
					// MySQL.g:1507:33: COMMA groupby_item
					{
					COMMA368=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupby_clause21979); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA368_tree = (Object)adaptor.create(COMMA368);
					adaptor.addChild(root_0, COMMA368_tree);
					}

					pushFollow(FOLLOW_groupby_item_in_groupby_clause21981);
					groupby_item369=groupby_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item369.getTree());

					}
					break;

				default :
					break loop101;
				}
			}

			// MySQL.g:1507:54: ( WITH ROLLUP_SYM )?
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==WITH) ) {
				int LA102_1 = input.LA(2);
				if ( (LA102_1==ROLLUP_SYM) ) {
					alt102=1;
				}
			}
			switch (alt102) {
				case 1 :
					// MySQL.g:1507:55: WITH ROLLUP_SYM
					{
					WITH370=(Token)match(input,WITH,FOLLOW_WITH_in_groupby_clause21986); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH370_tree = (Object)adaptor.create(WITH370);
					adaptor.addChild(root_0, WITH370_tree);
					}

					ROLLUP_SYM371=(Token)match(input,ROLLUP_SYM,FOLLOW_ROLLUP_SYM_in_groupby_clause21988); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROLLUP_SYM371_tree = (Object)adaptor.create(ROLLUP_SYM371);
					adaptor.addChild(root_0, ROLLUP_SYM371_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupby_clause"


	public static class groupby_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "groupby_item"
	// MySQL.g:1509:1: groupby_item : ( column_spec | INTEGER_NUM | bit_expr );
	public final MySQLParser.groupby_item_return groupby_item() throws RecognitionException {
		MySQLParser.groupby_item_return retval = new MySQLParser.groupby_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM373=null;
		ParserRuleReturnScope column_spec372 =null;
		ParserRuleReturnScope bit_expr374 =null;

		Object INTEGER_NUM373_tree=null;

		try {
			// MySQL.g:1509:13: ( column_spec | INTEGER_NUM | bit_expr )
			int alt103=3;
			switch ( input.LA(1) ) {
			case ID:
				{
				int LA103_1 = input.LA(2);
				if ( (synpred425_MySQL()) ) {
					alt103=1;
				}
				else if ( (true) ) {
					alt103=3;
				}

				}
				break;
			case INTEGER_NUM:
				{
				int LA103_2 = input.LA(2);
				if ( (synpred426_MySQL()) ) {
					alt103=2;
				}
				else if ( (true) ) {
					alt103=3;
				}

				}
				break;
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case ASCII_SYM:
			case ASIN:
			case ATAN:
			case ATAN2:
			case AVG:
			case BENCHMARK:
			case BIN:
			case BINARY:
			case BIT_AND:
			case BIT_LENGTH:
			case BIT_NUM:
			case BIT_OR:
			case BIT_XOR:
			case CASE_SYM:
			case CAST_SYM:
			case CEIL:
			case CEILING:
			case CHAR:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_SYM:
			case CONVERT_TZ:
			case COS:
			case COT:
			case COUNT:
			case CRC32:
			case CURDATE:
			case CURRENT_USER:
			case CURTIME:
			case DATABASE:
			case DATEDIFF:
			case DATE_ADD:
			case DATE_FORMAT:
			case DATE_SUB:
			case DATE_SYM:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEFAULT:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case EXISTS:
			case EXP:
			case EXPORT_SET:
			case EXTRACT:
			case FALSE_SYM:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GET_FORMAT:
			case GET_LOCK:
			case GROUP_CONCAT:
			case HEX:
			case HEX_DIGIT:
			case HOUR:
			case IF:
			case IFNULL:
			case INET_ATON:
			case INET_NTOA:
			case INSERT:
			case INSTR:
			case INTERVAL_SYM:
			case IS_FREE_LOCK:
			case IS_USED_LOCK:
			case LAST_DAY:
			case LAST_INSERT_ID:
			case LEFT:
			case LENGTH:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LPAREN:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MATCH:
			case MAX_SYM:
			case MD5:
			case MICROSECOND:
			case MID:
			case MINUS:
			case MINUTE:
			case MIN_SYM:
			case MOD:
			case MONTH:
			case MONTHNAME:
			case NAME_CONST:
			case NEGATION:
			case NOW:
			case NULL_SYM:
			case OCT:
			case OLD_PASSWORD:
			case ORD:
			case PASSWORD:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case PLUS:
			case POW:
			case POWER:
			case QUARTER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case REAL_NUMBER:
			case RELEASE_LOCK:
			case REPEAT:
			case REPLACE:
			case REVERSE:
			case RIGHT:
			case ROUND:
			case ROW_SYM:
			case RPAD:
			case RTRIM:
			case SCHEMA:
			case SECOND:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SPACE:
			case SQRT:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRCMP:
			case STR_TO_DATE:
			case SUBSTRING:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SUM:
			case SYSDATE:
			case SYSTEM_USER:
			case TAN:
			case TEXT_STRING:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_SYM:
			case TIME_TO_SEC:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TRIM:
			case TRUE_SYM:
			case TRUNCATE:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPPER:
			case USER:
			case USER_VAR:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case UUID:
			case VALUES:
			case VARIANCE:
			case VAR_POP:
			case VAR_SAMP:
			case VERSION_SYM:
			case WEEK:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case YEAR:
			case YEARWEEK:
				{
				alt103=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 103, 0, input);
				throw nvae;
			}
			switch (alt103) {
				case 1 :
					// MySQL.g:1509:15: column_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_column_spec_in_groupby_item21997);
					column_spec372=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec372.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1509:29: INTEGER_NUM
					{
					root_0 = (Object)adaptor.nil();


					INTEGER_NUM373=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_groupby_item22001); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM373_tree = (Object)adaptor.create(INTEGER_NUM373);
					adaptor.addChild(root_0, INTEGER_NUM373_tree);
					}

					}
					break;
				case 3 :
					// MySQL.g:1509:43: bit_expr
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_bit_expr_in_groupby_item22005);
					bit_expr374=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr374.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupby_item"


	public static class having_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "having_clause"
	// MySQL.g:1511:1: having_clause : HAVING expression ;
	public final MySQLParser.having_clause_return having_clause() throws RecognitionException {
		MySQLParser.having_clause_return retval = new MySQLParser.having_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HAVING375=null;
		ParserRuleReturnScope expression376 =null;

		Object HAVING375_tree=null;

		try {
			// MySQL.g:1511:14: ( HAVING expression )
			// MySQL.g:1512:2: HAVING expression
			{
			root_0 = (Object)adaptor.nil();


			HAVING375=(Token)match(input,HAVING,FOLLOW_HAVING_in_having_clause22014); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HAVING375_tree = (Object)adaptor.create(HAVING375);
			adaptor.addChild(root_0, HAVING375_tree);
			}

			pushFollow(FOLLOW_expression_in_having_clause22016);
			expression376=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression376.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class orderby_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "orderby_clause"
	// MySQL.g:1515:1: orderby_clause : ORDER_SYM BY_SYM orderby_item ( COMMA orderby_item )* ;
	public final MySQLParser.orderby_clause_return orderby_clause() throws RecognitionException {
		MySQLParser.orderby_clause_return retval = new MySQLParser.orderby_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ORDER_SYM377=null;
		Token BY_SYM378=null;
		Token COMMA380=null;
		ParserRuleReturnScope orderby_item379 =null;
		ParserRuleReturnScope orderby_item381 =null;

		Object ORDER_SYM377_tree=null;
		Object BY_SYM378_tree=null;
		Object COMMA380_tree=null;

		try {
			// MySQL.g:1515:15: ( ORDER_SYM BY_SYM orderby_item ( COMMA orderby_item )* )
			// MySQL.g:1516:2: ORDER_SYM BY_SYM orderby_item ( COMMA orderby_item )*
			{
			root_0 = (Object)adaptor.nil();


			ORDER_SYM377=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_orderby_clause22025); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ORDER_SYM377_tree = (Object)adaptor.create(ORDER_SYM377);
			adaptor.addChild(root_0, ORDER_SYM377_tree);
			}

			BY_SYM378=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_orderby_clause22027); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM378_tree = (Object)adaptor.create(BY_SYM378);
			adaptor.addChild(root_0, BY_SYM378_tree);
			}

			pushFollow(FOLLOW_orderby_item_in_orderby_clause22029);
			orderby_item379=orderby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_item379.getTree());

			// MySQL.g:1516:32: ( COMMA orderby_item )*
			loop104:
			while (true) {
				int alt104=2;
				int LA104_0 = input.LA(1);
				if ( (LA104_0==COMMA) ) {
					switch ( input.LA(2) ) {
					case INSERT:
						{
						int LA104_3 = input.LA(3);
						if ( (LA104_3==EOF||LA104_3==ASC||LA104_3==ASTERISK||LA104_3==BITAND||LA104_3==COMMA||LA104_3==DESC||LA104_3==DIVIDE||LA104_3==FOR_SYM||LA104_3==INTEGER_NUM||LA104_3==LIMIT||LA104_3==LOCK||LA104_3==LPAREN||LA104_3==MINUS||LA104_3==MOD_SYM||LA104_3==ON||LA104_3==PLUS||LA104_3==POWER_OP||LA104_3==RPAREN||LA104_3==SEMI||(LA104_3 >= SHIFT_LEFT && LA104_3 <= SHIFT_RIGHT)||LA104_3==UNION_SYM||LA104_3==VERTBAR||LA104_3==WITH) ) {
							alt104=1;
						}

						}
						break;
					case REPLACE:
						{
						int LA104_4 = input.LA(3);
						if ( (LA104_4==EOF||LA104_4==ASC||LA104_4==ASTERISK||LA104_4==BITAND||LA104_4==COMMA||LA104_4==DESC||LA104_4==DIVIDE||LA104_4==FOR_SYM||LA104_4==INTEGER_NUM||LA104_4==LIMIT||LA104_4==LOCK||LA104_4==LPAREN||LA104_4==MINUS||LA104_4==MOD_SYM||LA104_4==ON||LA104_4==PLUS||LA104_4==POWER_OP||LA104_4==RPAREN||LA104_4==SEMI||(LA104_4 >= SHIFT_LEFT && LA104_4 <= SHIFT_RIGHT)||LA104_4==UNION_SYM||LA104_4==VERTBAR||LA104_4==WITH) ) {
							alt104=1;
						}

						}
						break;
					case TRUNCATE:
						{
						int LA104_5 = input.LA(3);
						if ( (LA104_5==EOF||LA104_5==ASC||LA104_5==ASTERISK||LA104_5==BITAND||LA104_5==COMMA||LA104_5==DESC||LA104_5==DIVIDE||LA104_5==FOR_SYM||LA104_5==INTEGER_NUM||LA104_5==LIMIT||LA104_5==LOCK||LA104_5==LPAREN||LA104_5==MINUS||LA104_5==MOD_SYM||LA104_5==ON||LA104_5==PLUS||LA104_5==POWER_OP||LA104_5==RPAREN||LA104_5==SEMI||(LA104_5 >= SHIFT_LEFT && LA104_5 <= SHIFT_RIGHT)||LA104_5==UNION_SYM||LA104_5==VERTBAR||LA104_5==WITH) ) {
							alt104=1;
						}

						}
						break;
					case ABS:
					case ACOS:
					case ADDDATE:
					case ADDTIME:
					case AES_DECRYPT:
					case AES_ENCRYPT:
					case ASCII_SYM:
					case ASIN:
					case ATAN:
					case ATAN2:
					case AVG:
					case BENCHMARK:
					case BIN:
					case BINARY:
					case BIT_AND:
					case BIT_LENGTH:
					case BIT_NUM:
					case BIT_OR:
					case BIT_XOR:
					case CASE_SYM:
					case CAST_SYM:
					case CEIL:
					case CEILING:
					case CHAR:
					case CHARSET:
					case CHAR_LENGTH:
					case COERCIBILITY:
					case COLLATION:
					case CONCAT:
					case CONCAT_WS:
					case CONNECTION_ID:
					case CONV:
					case CONVERT_SYM:
					case CONVERT_TZ:
					case COS:
					case COT:
					case COUNT:
					case CRC32:
					case CURDATE:
					case CURRENT_USER:
					case CURTIME:
					case DATABASE:
					case DATEDIFF:
					case DATE_ADD:
					case DATE_FORMAT:
					case DATE_SUB:
					case DATE_SYM:
					case DAYNAME:
					case DAYOFMONTH:
					case DAYOFWEEK:
					case DAYOFYEAR:
					case DECODE:
					case DEFAULT:
					case DEGREES:
					case DES_DECRYPT:
					case DES_ENCRYPT:
					case ELT:
					case ENCODE:
					case ENCRYPT:
					case EXISTS:
					case EXP:
					case EXPORT_SET:
					case EXTRACT:
					case FALSE_SYM:
					case FIELD:
					case FIND_IN_SET:
					case FLOOR:
					case FORMAT:
					case FOUND_ROWS:
					case FROM_BASE64:
					case FROM_DAYS:
					case FROM_UNIXTIME:
					case GET_FORMAT:
					case GET_LOCK:
					case GROUP_CONCAT:
					case HEX:
					case HEX_DIGIT:
					case HOUR:
					case ID:
					case IF:
					case IFNULL:
					case INET_ATON:
					case INET_NTOA:
					case INSTR:
					case INTEGER_NUM:
					case INTERVAL_SYM:
					case IS_FREE_LOCK:
					case IS_USED_LOCK:
					case LAST_DAY:
					case LAST_INSERT_ID:
					case LEFT:
					case LENGTH:
					case LN:
					case LOAD_FILE:
					case LOCATE:
					case LOG:
					case LOG10:
					case LOG2:
					case LOWER:
					case LPAD:
					case LPAREN:
					case LTRIM:
					case MAKEDATE:
					case MAKETIME:
					case MAKE_SET:
					case MASTER_POS_WAIT:
					case MATCH:
					case MAX_SYM:
					case MD5:
					case MICROSECOND:
					case MID:
					case MINUS:
					case MINUTE:
					case MIN_SYM:
					case MOD:
					case MONTH:
					case MONTHNAME:
					case NAME_CONST:
					case NEGATION:
					case NOW:
					case NULL_SYM:
					case OCT:
					case OLD_PASSWORD:
					case ORD:
					case PASSWORD:
					case PERIOD_ADD:
					case PERIOD_DIFF:
					case PI:
					case PLUS:
					case POW:
					case POWER:
					case QUARTER:
					case QUOTE:
					case RADIANS:
					case RAND:
					case REAL_NUMBER:
					case RELEASE_LOCK:
					case REPEAT:
					case REVERSE:
					case RIGHT:
					case ROUND:
					case ROW_SYM:
					case RPAD:
					case RTRIM:
					case SCHEMA:
					case SECOND:
					case SEC_TO_TIME:
					case SESSION_USER:
					case SIGN:
					case SIN:
					case SLEEP:
					case SOUNDEX:
					case SPACE:
					case SQRT:
					case STD:
					case STDDEV:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STRCMP:
					case STR_TO_DATE:
					case SUBSTRING:
					case SUBSTRING_INDEX:
					case SUBTIME:
					case SUM:
					case SYSDATE:
					case SYSTEM_USER:
					case TAN:
					case TEXT_STRING:
					case TIMEDIFF:
					case TIMESTAMP:
					case TIMESTAMPADD:
					case TIMESTAMPDIFF:
					case TIME_FORMAT:
					case TIME_SYM:
					case TIME_TO_SEC:
					case TO_BASE64:
					case TO_DAYS:
					case TO_SECONDS:
					case TRIM:
					case TRUE_SYM:
					case UNHEX:
					case UNIX_TIMESTAMP:
					case UPPER:
					case USER:
					case USER_VAR:
					case UTC_DATE:
					case UTC_TIME:
					case UTC_TIMESTAMP:
					case UUID:
					case VALUES:
					case VARIANCE:
					case VAR_POP:
					case VAR_SAMP:
					case VERSION_SYM:
					case WEEK:
					case WEEKDAY:
					case WEEKOFYEAR:
					case WEIGHT_STRING:
					case YEAR:
					case YEARWEEK:
						{
						alt104=1;
						}
						break;
					}
				}

				switch (alt104) {
				case 1 :
					// MySQL.g:1516:33: COMMA orderby_item
					{
					COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderby_clause22032); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA380_tree = (Object)adaptor.create(COMMA380);
					adaptor.addChild(root_0, COMMA380_tree);
					}

					pushFollow(FOLLOW_orderby_item_in_orderby_clause22034);
					orderby_item381=orderby_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_item381.getTree());

					}
					break;

				default :
					break loop104;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderby_clause"


	public static class orderby_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "orderby_item"
	// MySQL.g:1518:1: orderby_item : groupby_item ( ASC | DESC )? ;
	public final MySQLParser.orderby_item_return orderby_item() throws RecognitionException {
		MySQLParser.orderby_item_return retval = new MySQLParser.orderby_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set383=null;
		ParserRuleReturnScope groupby_item382 =null;

		Object set383_tree=null;

		try {
			// MySQL.g:1518:13: ( groupby_item ( ASC | DESC )? )
			// MySQL.g:1518:15: groupby_item ( ASC | DESC )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_groupby_item_in_orderby_item22043);
			groupby_item382=groupby_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, groupby_item382.getTree());

			// MySQL.g:1518:28: ( ASC | DESC )?
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==ASC||LA105_0==DESC) ) {
				alt105=1;
			}
			switch (alt105) {
				case 1 :
					// MySQL.g:
					{
					set383=input.LT(1);
					if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set383));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderby_item"


	public static class limit_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "limit_clause"
	// MySQL.g:1520:1: limit_clause : ( LIMIT ( ( offset COMMA )? row_count ) | ( row_count OFFSET_SYM offset ) );
	public final MySQLParser.limit_clause_return limit_clause() throws RecognitionException {
		MySQLParser.limit_clause_return retval = new MySQLParser.limit_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LIMIT384=null;
		Token COMMA386=null;
		Token OFFSET_SYM389=null;
		ParserRuleReturnScope offset385 =null;
		ParserRuleReturnScope row_count387 =null;
		ParserRuleReturnScope row_count388 =null;
		ParserRuleReturnScope offset390 =null;

		Object LIMIT384_tree=null;
		Object COMMA386_tree=null;
		Object OFFSET_SYM389_tree=null;

		try {
			// MySQL.g:1520:13: ( LIMIT ( ( offset COMMA )? row_count ) | ( row_count OFFSET_SYM offset ) )
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==LIMIT) ) {
				alt107=1;
			}
			else if ( (LA107_0==INTEGER_NUM) ) {
				alt107=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}

			switch (alt107) {
				case 1 :
					// MySQL.g:1521:2: LIMIT ( ( offset COMMA )? row_count )
					{
					root_0 = (Object)adaptor.nil();


					LIMIT384=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limit_clause22061); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIMIT384_tree = (Object)adaptor.create(LIMIT384);
					adaptor.addChild(root_0, LIMIT384_tree);
					}

					// MySQL.g:1521:8: ( ( offset COMMA )? row_count )
					// MySQL.g:1521:9: ( offset COMMA )? row_count
					{
					// MySQL.g:1521:9: ( offset COMMA )?
					int alt106=2;
					int LA106_0 = input.LA(1);
					if ( (LA106_0==INTEGER_NUM) ) {
						int LA106_1 = input.LA(2);
						if ( (LA106_1==COMMA) ) {
							int LA106_2 = input.LA(3);
							if ( (LA106_2==INTEGER_NUM) ) {
								alt106=1;
							}
						}
					}
					switch (alt106) {
						case 1 :
							// MySQL.g:1521:10: offset COMMA
							{
							pushFollow(FOLLOW_offset_in_limit_clause22065);
							offset385=offset();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, offset385.getTree());

							COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_limit_clause22067); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA386_tree = (Object)adaptor.create(COMMA386);
							adaptor.addChild(root_0, COMMA386_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_row_count_in_limit_clause22071);
					row_count387=row_count();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, row_count387.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:1521:38: ( row_count OFFSET_SYM offset )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1521:38: ( row_count OFFSET_SYM offset )
					// MySQL.g:1521:39: row_count OFFSET_SYM offset
					{
					pushFollow(FOLLOW_row_count_in_limit_clause22077);
					row_count388=row_count();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, row_count388.getTree());

					OFFSET_SYM389=(Token)match(input,OFFSET_SYM,FOLLOW_OFFSET_SYM_in_limit_clause22079); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OFFSET_SYM389_tree = (Object)adaptor.create(OFFSET_SYM389);
					adaptor.addChild(root_0, OFFSET_SYM389_tree);
					}

					pushFollow(FOLLOW_offset_in_limit_clause22081);
					offset390=offset();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, offset390.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limit_clause"


	public static class offset_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "offset"
	// MySQL.g:1523:1: offset : INTEGER_NUM ;
	public final MySQLParser.offset_return offset() throws RecognitionException {
		MySQLParser.offset_return retval = new MySQLParser.offset_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM391=null;

		Object INTEGER_NUM391_tree=null;

		try {
			// MySQL.g:1523:7: ( INTEGER_NUM )
			// MySQL.g:1523:10: INTEGER_NUM
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM391=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_offset22090); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM391_tree = (Object)adaptor.create(INTEGER_NUM391);
			adaptor.addChild(root_0, INTEGER_NUM391_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "offset"


	public static class row_count_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "row_count"
	// MySQL.g:1524:1: row_count : INTEGER_NUM ;
	public final MySQLParser.row_count_return row_count() throws RecognitionException {
		MySQLParser.row_count_return retval = new MySQLParser.row_count_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM392=null;

		Object INTEGER_NUM392_tree=null;

		try {
			// MySQL.g:1524:10: ( INTEGER_NUM )
			// MySQL.g:1524:12: INTEGER_NUM
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM392=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_row_count22097); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM392_tree = (Object)adaptor.create(INTEGER_NUM392);
			adaptor.addChild(root_0, INTEGER_NUM392_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "row_count"


	public static class select_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "select_list"
	// MySQL.g:1526:1: select_list : ( ( displayed_column ( COMMA displayed_column )* ) | ASTERISK ) ;
	public final MySQLParser.select_list_return select_list() throws RecognitionException {
		MySQLParser.select_list_return retval = new MySQLParser.select_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA394=null;
		Token ASTERISK396=null;
		ParserRuleReturnScope displayed_column393 =null;
		ParserRuleReturnScope displayed_column395 =null;

		Object COMMA394_tree=null;
		Object ASTERISK396_tree=null;

		try {
			// MySQL.g:1526:12: ( ( ( displayed_column ( COMMA displayed_column )* ) | ASTERISK ) )
			// MySQL.g:1527:2: ( ( displayed_column ( COMMA displayed_column )* ) | ASTERISK )
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1527:2: ( ( displayed_column ( COMMA displayed_column )* ) | ASTERISK )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==ABS||LA109_0==ACOS||(LA109_0 >= ADDDATE && LA109_0 <= ADDTIME)||(LA109_0 >= AES_DECRYPT && LA109_0 <= AES_ENCRYPT)||LA109_0==ASCII_SYM||LA109_0==ASIN||(LA109_0 >= ATAN && LA109_0 <= ATAN2)||LA109_0==AVG||LA109_0==BENCHMARK||(LA109_0 >= BIN && LA109_0 <= BINARY)||(LA109_0 >= BIT_AND && LA109_0 <= BIT_OR)||LA109_0==BIT_XOR||(LA109_0 >= CASE_SYM && LA109_0 <= CEILING)||LA109_0==CHAR||(LA109_0 >= CHARSET && LA109_0 <= CHAR_LENGTH)||LA109_0==COERCIBILITY||LA109_0==COLLATION||(LA109_0 >= CONCAT && LA109_0 <= CONCAT_WS)||LA109_0==CONNECTION_ID||(LA109_0 >= CONV && LA109_0 <= CONVERT_TZ)||(LA109_0 >= COS && LA109_0 <= COUNT)||LA109_0==CRC32||LA109_0==CURDATE||LA109_0==CURRENT_USER||LA109_0==CURTIME||LA109_0==DATABASE||LA109_0==DATEDIFF||(LA109_0 >= DATE_ADD && LA109_0 <= DAYOFYEAR)||(LA109_0 >= DECODE && LA109_0 <= DEFAULT)||LA109_0==DEGREES||(LA109_0 >= DES_DECRYPT && LA109_0 <= DES_ENCRYPT)||LA109_0==ELT||(LA109_0 >= ENCODE && LA109_0 <= ENCRYPT)||LA109_0==EXISTS||LA109_0==EXP||LA109_0==EXPORT_SET||LA109_0==EXTRACT||LA109_0==FALSE_SYM||LA109_0==FIELD||LA109_0==FIND_IN_SET||LA109_0==FLOOR||LA109_0==FORMAT||LA109_0==FOUND_ROWS||(LA109_0 >= FROM_BASE64 && LA109_0 <= FROM_UNIXTIME)||(LA109_0 >= GET_FORMAT && LA109_0 <= GET_LOCK)||LA109_0==GROUP_CONCAT||(LA109_0 >= HEX && LA109_0 <= HEX_DIGIT)||LA109_0==HOUR||LA109_0==ID||(LA109_0 >= IF && LA109_0 <= IFNULL)||(LA109_0 >= INET_ATON && LA109_0 <= INET_NTOA)||LA109_0==INSERT||(LA109_0 >= INSTR && LA109_0 <= INTEGER_NUM)||LA109_0==INTERVAL_SYM||LA109_0==IS_FREE_LOCK||LA109_0==IS_USED_LOCK||(LA109_0 >= LAST_DAY && LA109_0 <= LAST_INSERT_ID)||(LA109_0 >= LEFT && LA109_0 <= LENGTH)||LA109_0==LN||LA109_0==LOAD_FILE||LA109_0==LOCATE||(LA109_0 >= LOG && LA109_0 <= LOG2)||LA109_0==LOWER||(LA109_0 >= LPAD && LA109_0 <= LPAREN)||LA109_0==LTRIM||(LA109_0 >= MAKEDATE && LA109_0 <= MAKE_SET)||LA109_0==MASTER_POS_WAIT||LA109_0==MATCH||LA109_0==MAX_SYM||LA109_0==MD5||(LA109_0 >= MICROSECOND && LA109_0 <= MID)||(LA109_0 >= MINUS && LA109_0 <= MINUTE)||LA109_0==MIN_SYM||LA109_0==MOD||(LA109_0 >= MONTH && LA109_0 <= MONTHNAME)||LA109_0==NAME_CONST||LA109_0==NEGATION||LA109_0==NOW||LA109_0==NULL_SYM||LA109_0==OCT||LA109_0==OLD_PASSWORD||LA109_0==ORD||(LA109_0 >= PASSWORD && LA109_0 <= PERIOD_DIFF)||LA109_0==PI||LA109_0==PLUS||(LA109_0 >= POW && LA109_0 <= POWER)||LA109_0==QUARTER||LA109_0==QUOTE||(LA109_0 >= RADIANS && LA109_0 <= RAND)||LA109_0==REAL_NUMBER||LA109_0==RELEASE_LOCK||LA109_0==REPEAT||LA109_0==REPLACE||LA109_0==REVERSE||LA109_0==RIGHT||LA109_0==ROUND||(LA109_0 >= ROW_SYM && LA109_0 <= RPAD)||LA109_0==RTRIM||(LA109_0 >= SCHEMA && LA109_0 <= SECOND)||LA109_0==SEC_TO_TIME||LA109_0==SESSION_USER||LA109_0==SIGN||LA109_0==SIN||LA109_0==SLEEP||LA109_0==SOUNDEX||LA109_0==SPACE||LA109_0==SQRT||(LA109_0 >= STD && LA109_0 <= STDDEV_SAMP)||LA109_0==STRCMP||LA109_0==STR_TO_DATE||(LA109_0 >= SUBSTRING && LA109_0 <= SUM)||(LA109_0 >= SYSDATE && LA109_0 <= SYSTEM_USER)||LA109_0==TAN||LA109_0==TEXT_STRING||(LA109_0 >= TIMEDIFF && LA109_0 <= TIME_TO_SEC)||(LA109_0 >= TO_BASE64 && LA109_0 <= TO_SECONDS)||(LA109_0 >= TRIM && LA109_0 <= TRUNCATE)||LA109_0==UNHEX||LA109_0==UNIX_TIMESTAMP||LA109_0==UPPER||(LA109_0 >= USER && LA109_0 <= USER_VAR)||(LA109_0 >= UTC_DATE && LA109_0 <= UTC_TIMESTAMP)||LA109_0==UUID||LA109_0==VALUES||LA109_0==VARIANCE||(LA109_0 >= VAR_POP && LA109_0 <= VERSION_SYM)||(LA109_0 >= WEEK && LA109_0 <= WEIGHT_STRING)||(LA109_0 >= YEAR && LA109_0 <= YEARWEEK)) ) {
				alt109=1;
			}
			else if ( (LA109_0==ASTERISK) ) {
				alt109=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// MySQL.g:1527:4: ( displayed_column ( COMMA displayed_column )* )
					{
					// MySQL.g:1527:4: ( displayed_column ( COMMA displayed_column )* )
					// MySQL.g:1527:6: displayed_column ( COMMA displayed_column )*
					{
					pushFollow(FOLLOW_displayed_column_in_select_list22110);
					displayed_column393=displayed_column();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column393.getTree());

					// MySQL.g:1527:23: ( COMMA displayed_column )*
					loop108:
					while (true) {
						int alt108=2;
						int LA108_0 = input.LA(1);
						if ( (LA108_0==COMMA) ) {
							switch ( input.LA(2) ) {
							case INSERT:
								{
								int LA108_3 = input.LA(3);
								if ( (LA108_3==ID) ) {
									int LA108_7 = input.LA(4);
									if ( (LA108_7==EOF||LA108_7==COMMA||LA108_7==FOR_SYM||LA108_7==FROM||LA108_7==INTEGER_NUM||LA108_7==LIMIT||LA108_7==LOCK||LA108_7==ON||LA108_7==ORDER_SYM||LA108_7==RPAREN||LA108_7==SEMI||LA108_7==UNION_SYM||LA108_7==WITH) ) {
										alt108=1;
									}

								}
								else if ( (LA108_3==EOF||(LA108_3 >= ASTERISK && LA108_3 <= AS_SYM)||LA108_3==BITAND||LA108_3==COMMA||LA108_3==DIVIDE||LA108_3==FOR_SYM||LA108_3==FROM||LA108_3==INTEGER_NUM||LA108_3==LIMIT||LA108_3==LOCK||LA108_3==LPAREN||LA108_3==MINUS||LA108_3==MOD_SYM||LA108_3==ON||LA108_3==ORDER_SYM||LA108_3==PLUS||LA108_3==POWER_OP||LA108_3==RPAREN||LA108_3==SEMI||(LA108_3 >= SHIFT_LEFT && LA108_3 <= SHIFT_RIGHT)||LA108_3==UNION_SYM||LA108_3==VERTBAR||LA108_3==WITH) ) {
									alt108=1;
								}

								}
								break;
							case REPLACE:
								{
								int LA108_4 = input.LA(3);
								if ( (LA108_4==ID) ) {
									int LA108_8 = input.LA(4);
									if ( (LA108_8==EOF||LA108_8==COMMA||LA108_8==FOR_SYM||LA108_8==FROM||LA108_8==INTEGER_NUM||LA108_8==LIMIT||LA108_8==LOCK||LA108_8==ON||LA108_8==ORDER_SYM||LA108_8==RPAREN||LA108_8==SEMI||LA108_8==UNION_SYM||LA108_8==WITH) ) {
										alt108=1;
									}

								}
								else if ( (LA108_4==EOF||(LA108_4 >= ASTERISK && LA108_4 <= AS_SYM)||LA108_4==BITAND||LA108_4==COMMA||LA108_4==DIVIDE||LA108_4==FOR_SYM||LA108_4==FROM||LA108_4==INTEGER_NUM||LA108_4==LIMIT||LA108_4==LOCK||LA108_4==LPAREN||LA108_4==MINUS||LA108_4==MOD_SYM||LA108_4==ON||LA108_4==ORDER_SYM||LA108_4==PLUS||LA108_4==POWER_OP||LA108_4==RPAREN||LA108_4==SEMI||(LA108_4 >= SHIFT_LEFT && LA108_4 <= SHIFT_RIGHT)||LA108_4==UNION_SYM||LA108_4==VERTBAR||LA108_4==WITH) ) {
									alt108=1;
								}

								}
								break;
							case TRUNCATE:
								{
								int LA108_5 = input.LA(3);
								if ( (LA108_5==ID) ) {
									int LA108_9 = input.LA(4);
									if ( (synpred432_MySQL()) ) {
										alt108=1;
									}

								}
								else if ( (LA108_5==EOF||(LA108_5 >= ASTERISK && LA108_5 <= AS_SYM)||LA108_5==BITAND||LA108_5==COMMA||LA108_5==DIVIDE||LA108_5==FOR_SYM||LA108_5==FROM||LA108_5==INTEGER_NUM||LA108_5==LIMIT||LA108_5==LOCK||LA108_5==LPAREN||LA108_5==MINUS||LA108_5==MOD_SYM||LA108_5==ON||LA108_5==ORDER_SYM||LA108_5==PLUS||LA108_5==POWER_OP||LA108_5==RPAREN||LA108_5==SEMI||(LA108_5 >= SHIFT_LEFT && LA108_5 <= SHIFT_RIGHT)||LA108_5==UNION_SYM||LA108_5==VERTBAR||LA108_5==WITH) ) {
									alt108=1;
								}

								}
								break;
							case ABS:
							case ACOS:
							case ADDDATE:
							case ADDTIME:
							case AES_DECRYPT:
							case AES_ENCRYPT:
							case ASCII_SYM:
							case ASIN:
							case ATAN:
							case ATAN2:
							case AVG:
							case BENCHMARK:
							case BIN:
							case BINARY:
							case BIT_AND:
							case BIT_LENGTH:
							case BIT_NUM:
							case BIT_OR:
							case BIT_XOR:
							case CASE_SYM:
							case CAST_SYM:
							case CEIL:
							case CEILING:
							case CHAR:
							case CHARSET:
							case CHAR_LENGTH:
							case COERCIBILITY:
							case COLLATION:
							case CONCAT:
							case CONCAT_WS:
							case CONNECTION_ID:
							case CONV:
							case CONVERT_SYM:
							case CONVERT_TZ:
							case COS:
							case COT:
							case COUNT:
							case CRC32:
							case CURDATE:
							case CURRENT_USER:
							case CURTIME:
							case DATABASE:
							case DATEDIFF:
							case DATE_ADD:
							case DATE_FORMAT:
							case DATE_SUB:
							case DATE_SYM:
							case DAYNAME:
							case DAYOFMONTH:
							case DAYOFWEEK:
							case DAYOFYEAR:
							case DECODE:
							case DEFAULT:
							case DEGREES:
							case DES_DECRYPT:
							case DES_ENCRYPT:
							case ELT:
							case ENCODE:
							case ENCRYPT:
							case EXISTS:
							case EXP:
							case EXPORT_SET:
							case EXTRACT:
							case FALSE_SYM:
							case FIELD:
							case FIND_IN_SET:
							case FLOOR:
							case FORMAT:
							case FOUND_ROWS:
							case FROM_BASE64:
							case FROM_DAYS:
							case FROM_UNIXTIME:
							case GET_FORMAT:
							case GET_LOCK:
							case GROUP_CONCAT:
							case HEX:
							case HEX_DIGIT:
							case HOUR:
							case ID:
							case IF:
							case IFNULL:
							case INET_ATON:
							case INET_NTOA:
							case INSTR:
							case INTEGER_NUM:
							case INTERVAL_SYM:
							case IS_FREE_LOCK:
							case IS_USED_LOCK:
							case LAST_DAY:
							case LAST_INSERT_ID:
							case LEFT:
							case LENGTH:
							case LN:
							case LOAD_FILE:
							case LOCATE:
							case LOG:
							case LOG10:
							case LOG2:
							case LOWER:
							case LPAD:
							case LPAREN:
							case LTRIM:
							case MAKEDATE:
							case MAKETIME:
							case MAKE_SET:
							case MASTER_POS_WAIT:
							case MATCH:
							case MAX_SYM:
							case MD5:
							case MICROSECOND:
							case MID:
							case MINUS:
							case MINUTE:
							case MIN_SYM:
							case MOD:
							case MONTH:
							case MONTHNAME:
							case NAME_CONST:
							case NEGATION:
							case NOW:
							case NULL_SYM:
							case OCT:
							case OLD_PASSWORD:
							case ORD:
							case PASSWORD:
							case PERIOD_ADD:
							case PERIOD_DIFF:
							case PI:
							case PLUS:
							case POW:
							case POWER:
							case QUARTER:
							case QUOTE:
							case RADIANS:
							case RAND:
							case REAL_NUMBER:
							case RELEASE_LOCK:
							case REPEAT:
							case REVERSE:
							case RIGHT:
							case ROUND:
							case ROW_SYM:
							case RPAD:
							case RTRIM:
							case SCHEMA:
							case SECOND:
							case SEC_TO_TIME:
							case SESSION_USER:
							case SIGN:
							case SIN:
							case SLEEP:
							case SOUNDEX:
							case SPACE:
							case SQRT:
							case STD:
							case STDDEV:
							case STDDEV_POP:
							case STDDEV_SAMP:
							case STRCMP:
							case STR_TO_DATE:
							case SUBSTRING:
							case SUBSTRING_INDEX:
							case SUBTIME:
							case SUM:
							case SYSDATE:
							case SYSTEM_USER:
							case TAN:
							case TEXT_STRING:
							case TIMEDIFF:
							case TIMESTAMP:
							case TIMESTAMPADD:
							case TIMESTAMPDIFF:
							case TIME_FORMAT:
							case TIME_SYM:
							case TIME_TO_SEC:
							case TO_BASE64:
							case TO_DAYS:
							case TO_SECONDS:
							case TRIM:
							case TRUE_SYM:
							case UNHEX:
							case UNIX_TIMESTAMP:
							case UPPER:
							case USER:
							case USER_VAR:
							case UTC_DATE:
							case UTC_TIME:
							case UTC_TIMESTAMP:
							case UUID:
							case VALUES:
							case VARIANCE:
							case VAR_POP:
							case VAR_SAMP:
							case VERSION_SYM:
							case WEEK:
							case WEEKDAY:
							case WEEKOFYEAR:
							case WEIGHT_STRING:
							case YEAR:
							case YEARWEEK:
								{
								alt108=1;
								}
								break;
							}
						}

						switch (alt108) {
						case 1 :
							// MySQL.g:1527:25: COMMA displayed_column
							{
							COMMA394=(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list22114); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA394_tree = (Object)adaptor.create(COMMA394);
							adaptor.addChild(root_0, COMMA394_tree);
							}

							pushFollow(FOLLOW_displayed_column_in_select_list22116);
							displayed_column395=displayed_column();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column395.getTree());

							}
							break;

						default :
							break loop108;
						}
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1528:4: ASTERISK
					{
					ASTERISK396=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list22125); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASTERISK396_tree = (Object)adaptor.create(ASTERISK396);
					adaptor.addChild(root_0, ASTERISK396_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_list"


	public static class column_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_list"
	// MySQL.g:1531:1: column_list : LPAREN column_spec ( COMMA column_spec )* RPAREN ;
	public final MySQLParser.column_list_return column_list() throws RecognitionException {
		MySQLParser.column_list_return retval = new MySQLParser.column_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN397=null;
		Token COMMA399=null;
		Token RPAREN401=null;
		ParserRuleReturnScope column_spec398 =null;
		ParserRuleReturnScope column_spec400 =null;

		Object LPAREN397_tree=null;
		Object COMMA399_tree=null;
		Object RPAREN401_tree=null;

		try {
			// MySQL.g:1531:12: ( LPAREN column_spec ( COMMA column_spec )* RPAREN )
			// MySQL.g:1532:2: LPAREN column_spec ( COMMA column_spec )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN397=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_list22137); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN397_tree = (Object)adaptor.create(LPAREN397);
			adaptor.addChild(root_0, LPAREN397_tree);
			}

			pushFollow(FOLLOW_column_spec_in_column_list22139);
			column_spec398=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec398.getTree());

			// MySQL.g:1532:21: ( COMMA column_spec )*
			loop110:
			while (true) {
				int alt110=2;
				int LA110_0 = input.LA(1);
				if ( (LA110_0==COMMA) ) {
					alt110=1;
				}

				switch (alt110) {
				case 1 :
					// MySQL.g:1532:22: COMMA column_spec
					{
					COMMA399=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_list22142); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA399_tree = (Object)adaptor.create(COMMA399);
					adaptor.addChild(root_0, COMMA399_tree);
					}

					pushFollow(FOLLOW_column_spec_in_column_list22144);
					column_spec400=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec400.getTree());

					}
					break;

				default :
					break loop110;
				}
			}

			RPAREN401=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_list22148); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN401_tree = (Object)adaptor.create(RPAREN401);
			adaptor.addChild(root_0, RPAREN401_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_list"


	public static class subquery_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subquery"
	// MySQL.g:1535:1: subquery : LPAREN select_statement RPAREN ;
	public final MySQLParser.subquery_return subquery() throws RecognitionException {
		MySQLParser.subquery_return retval = new MySQLParser.subquery_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN402=null;
		Token RPAREN404=null;
		ParserRuleReturnScope select_statement403 =null;

		Object LPAREN402_tree=null;
		Object RPAREN404_tree=null;

		try {
			// MySQL.g:1535:9: ( LPAREN select_statement RPAREN )
			// MySQL.g:1536:2: LPAREN select_statement RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN402=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subquery22157); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN402_tree = (Object)adaptor.create(LPAREN402);
			adaptor.addChild(root_0, LPAREN402_tree);
			}

			pushFollow(FOLLOW_select_statement_in_subquery22159);
			select_statement403=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement403.getTree());

			RPAREN404=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery22161); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN404_tree = (Object)adaptor.create(RPAREN404);
			adaptor.addChild(root_0, RPAREN404_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class table_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_spec"
	// MySQL.g:1539:1: table_spec : ( schema_name DOT )? table_name ;
	public final MySQLParser.table_spec_return table_spec() throws RecognitionException {
		MySQLParser.table_spec_return retval = new MySQLParser.table_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOT406=null;
		ParserRuleReturnScope schema_name405 =null;
		ParserRuleReturnScope table_name407 =null;

		Object DOT406_tree=null;

		try {
			// MySQL.g:1539:11: ( ( schema_name DOT )? table_name )
			// MySQL.g:1540:2: ( schema_name DOT )? table_name
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1540:2: ( schema_name DOT )?
			int alt111=2;
			int LA111_0 = input.LA(1);
			if ( (LA111_0==ID) ) {
				int LA111_1 = input.LA(2);
				if ( (LA111_1==DOT) ) {
					int LA111_2 = input.LA(3);
					if ( (LA111_2==ID) ) {
						alt111=1;
					}
				}
			}
			switch (alt111) {
				case 1 :
					// MySQL.g:1540:4: schema_name DOT
					{
					pushFollow(FOLLOW_schema_name_in_table_spec22172);
					schema_name405=schema_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name405.getTree());

					DOT406=(Token)match(input,DOT,FOLLOW_DOT_in_table_spec22174); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT406_tree = (Object)adaptor.create(DOT406);
					adaptor.addChild(root_0, DOT406_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_table_spec22179);
			table_name407=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name407.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_spec"


	public static class displayed_column_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "displayed_column"
	// MySQL.g:1543:1: displayed_column : ( ( table_spec DOT ASTERISK ) | ( column_spec ( alias )? ) | ( bit_expr ( alias )? ) );
	public final MySQLParser.displayed_column_return displayed_column() throws RecognitionException {
		MySQLParser.displayed_column_return retval = new MySQLParser.displayed_column_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOT409=null;
		Token ASTERISK410=null;
		ParserRuleReturnScope table_spec408 =null;
		ParserRuleReturnScope column_spec411 =null;
		ParserRuleReturnScope alias412 =null;
		ParserRuleReturnScope bit_expr413 =null;
		ParserRuleReturnScope alias414 =null;

		Object DOT409_tree=null;
		Object ASTERISK410_tree=null;

		try {
			// MySQL.g:1543:18: ( ( table_spec DOT ASTERISK ) | ( column_spec ( alias )? ) | ( bit_expr ( alias )? ) )
			int alt114=3;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==ID) ) {
				int LA114_1 = input.LA(2);
				if ( (LA114_1==DOT) ) {
					alt114=1;
				}
				else if ( (synpred438_MySQL()) ) {
					alt114=2;
				}
				else if ( (true) ) {
					alt114=3;
				}

			}
			else if ( (LA114_0==ABS||LA114_0==ACOS||(LA114_0 >= ADDDATE && LA114_0 <= ADDTIME)||(LA114_0 >= AES_DECRYPT && LA114_0 <= AES_ENCRYPT)||LA114_0==ASCII_SYM||LA114_0==ASIN||(LA114_0 >= ATAN && LA114_0 <= ATAN2)||LA114_0==AVG||LA114_0==BENCHMARK||(LA114_0 >= BIN && LA114_0 <= BINARY)||(LA114_0 >= BIT_AND && LA114_0 <= BIT_OR)||LA114_0==BIT_XOR||(LA114_0 >= CASE_SYM && LA114_0 <= CEILING)||LA114_0==CHAR||(LA114_0 >= CHARSET && LA114_0 <= CHAR_LENGTH)||LA114_0==COERCIBILITY||LA114_0==COLLATION||(LA114_0 >= CONCAT && LA114_0 <= CONCAT_WS)||LA114_0==CONNECTION_ID||(LA114_0 >= CONV && LA114_0 <= CONVERT_TZ)||(LA114_0 >= COS && LA114_0 <= COUNT)||LA114_0==CRC32||LA114_0==CURDATE||LA114_0==CURRENT_USER||LA114_0==CURTIME||LA114_0==DATABASE||LA114_0==DATEDIFF||(LA114_0 >= DATE_ADD && LA114_0 <= DAYOFYEAR)||(LA114_0 >= DECODE && LA114_0 <= DEFAULT)||LA114_0==DEGREES||(LA114_0 >= DES_DECRYPT && LA114_0 <= DES_ENCRYPT)||LA114_0==ELT||(LA114_0 >= ENCODE && LA114_0 <= ENCRYPT)||LA114_0==EXISTS||LA114_0==EXP||LA114_0==EXPORT_SET||LA114_0==EXTRACT||LA114_0==FALSE_SYM||LA114_0==FIELD||LA114_0==FIND_IN_SET||LA114_0==FLOOR||LA114_0==FORMAT||LA114_0==FOUND_ROWS||(LA114_0 >= FROM_BASE64 && LA114_0 <= FROM_UNIXTIME)||(LA114_0 >= GET_FORMAT && LA114_0 <= GET_LOCK)||LA114_0==GROUP_CONCAT||(LA114_0 >= HEX && LA114_0 <= HEX_DIGIT)||LA114_0==HOUR||(LA114_0 >= IF && LA114_0 <= IFNULL)||(LA114_0 >= INET_ATON && LA114_0 <= INET_NTOA)||LA114_0==INSERT||(LA114_0 >= INSTR && LA114_0 <= INTEGER_NUM)||LA114_0==INTERVAL_SYM||LA114_0==IS_FREE_LOCK||LA114_0==IS_USED_LOCK||(LA114_0 >= LAST_DAY && LA114_0 <= LAST_INSERT_ID)||(LA114_0 >= LEFT && LA114_0 <= LENGTH)||LA114_0==LN||LA114_0==LOAD_FILE||LA114_0==LOCATE||(LA114_0 >= LOG && LA114_0 <= LOG2)||LA114_0==LOWER||(LA114_0 >= LPAD && LA114_0 <= LPAREN)||LA114_0==LTRIM||(LA114_0 >= MAKEDATE && LA114_0 <= MAKE_SET)||LA114_0==MASTER_POS_WAIT||LA114_0==MATCH||LA114_0==MAX_SYM||LA114_0==MD5||(LA114_0 >= MICROSECOND && LA114_0 <= MID)||(LA114_0 >= MINUS && LA114_0 <= MINUTE)||LA114_0==MIN_SYM||LA114_0==MOD||(LA114_0 >= MONTH && LA114_0 <= MONTHNAME)||LA114_0==NAME_CONST||LA114_0==NEGATION||LA114_0==NOW||LA114_0==NULL_SYM||LA114_0==OCT||LA114_0==OLD_PASSWORD||LA114_0==ORD||(LA114_0 >= PASSWORD && LA114_0 <= PERIOD_DIFF)||LA114_0==PI||LA114_0==PLUS||(LA114_0 >= POW && LA114_0 <= POWER)||LA114_0==QUARTER||LA114_0==QUOTE||(LA114_0 >= RADIANS && LA114_0 <= RAND)||LA114_0==REAL_NUMBER||LA114_0==RELEASE_LOCK||LA114_0==REPEAT||LA114_0==REPLACE||LA114_0==REVERSE||LA114_0==RIGHT||LA114_0==ROUND||(LA114_0 >= ROW_SYM && LA114_0 <= RPAD)||LA114_0==RTRIM||(LA114_0 >= SCHEMA && LA114_0 <= SECOND)||LA114_0==SEC_TO_TIME||LA114_0==SESSION_USER||LA114_0==SIGN||LA114_0==SIN||LA114_0==SLEEP||LA114_0==SOUNDEX||LA114_0==SPACE||LA114_0==SQRT||(LA114_0 >= STD && LA114_0 <= STDDEV_SAMP)||LA114_0==STRCMP||LA114_0==STR_TO_DATE||(LA114_0 >= SUBSTRING && LA114_0 <= SUM)||(LA114_0 >= SYSDATE && LA114_0 <= SYSTEM_USER)||LA114_0==TAN||LA114_0==TEXT_STRING||(LA114_0 >= TIMEDIFF && LA114_0 <= TIME_TO_SEC)||(LA114_0 >= TO_BASE64 && LA114_0 <= TO_SECONDS)||(LA114_0 >= TRIM && LA114_0 <= TRUNCATE)||LA114_0==UNHEX||LA114_0==UNIX_TIMESTAMP||LA114_0==UPPER||(LA114_0 >= USER && LA114_0 <= USER_VAR)||(LA114_0 >= UTC_DATE && LA114_0 <= UTC_TIMESTAMP)||LA114_0==UUID||LA114_0==VALUES||LA114_0==VARIANCE||(LA114_0 >= VAR_POP && LA114_0 <= VERSION_SYM)||(LA114_0 >= WEEK && LA114_0 <= WEIGHT_STRING)||(LA114_0 >= YEAR && LA114_0 <= YEARWEEK)) ) {
				alt114=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 114, 0, input);
				throw nvae;
			}

			switch (alt114) {
				case 1 :
					// MySQL.g:1544:2: ( table_spec DOT ASTERISK )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1544:2: ( table_spec DOT ASTERISK )
					// MySQL.g:1544:4: table_spec DOT ASTERISK
					{
					pushFollow(FOLLOW_table_spec_in_displayed_column22191);
					table_spec408=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec408.getTree());

					DOT409=(Token)match(input,DOT,FOLLOW_DOT_in_displayed_column22193); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT409_tree = (Object)adaptor.create(DOT409);
					adaptor.addChild(root_0, DOT409_tree);
					}

					ASTERISK410=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column22195); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ASTERISK410_tree = (Object)adaptor.create(ASTERISK410);
					adaptor.addChild(root_0, ASTERISK410_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1546:2: ( column_spec ( alias )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1546:2: ( column_spec ( alias )? )
					// MySQL.g:1546:4: column_spec ( alias )?
					{
					pushFollow(FOLLOW_column_spec_in_displayed_column22205);
					column_spec411=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec411.getTree());

					// MySQL.g:1546:16: ( alias )?
					int alt112=2;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==AS_SYM||LA112_0==ID) ) {
						alt112=1;
					}
					switch (alt112) {
						case 1 :
							// MySQL.g:1546:17: alias
							{
							pushFollow(FOLLOW_alias_in_displayed_column22208);
							alias412=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias412.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// MySQL.g:1548:2: ( bit_expr ( alias )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1548:2: ( bit_expr ( alias )? )
					// MySQL.g:1548:4: bit_expr ( alias )?
					{
					pushFollow(FOLLOW_bit_expr_in_displayed_column22221);
					bit_expr413=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr413.getTree());

					// MySQL.g:1548:13: ( alias )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==AS_SYM||LA113_0==ID) ) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// MySQL.g:1548:14: alias
							{
							pushFollow(FOLLOW_alias_in_displayed_column22224);
							alias414=alias();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alias414.getTree());

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "displayed_column"


	public static class delete_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_statements"
	// MySQL.g:1558:1: delete_statements : DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 ) ;
	public final MySQLParser.delete_statements_return delete_statements() throws RecognitionException {
		MySQLParser.delete_statements_return retval = new MySQLParser.delete_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DELETE_SYM415=null;
		Token LOW_PRIORITY416=null;
		Token QUICK417=null;
		Token IGNORE_SYM418=null;
		ParserRuleReturnScope delete_single_table_statement419 =null;
		ParserRuleReturnScope delete_multiple_table_statement1420 =null;
		ParserRuleReturnScope delete_multiple_table_statement2421 =null;

		Object DELETE_SYM415_tree=null;
		Object LOW_PRIORITY416_tree=null;
		Object QUICK417_tree=null;
		Object IGNORE_SYM418_tree=null;

		try {
			// MySQL.g:1558:18: ( DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 ) )
			// MySQL.g:1559:2: DELETE_SYM ( LOW_PRIORITY )? ( QUICK )? ( IGNORE_SYM )? ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 )
			{
			root_0 = (Object)adaptor.nil();


			DELETE_SYM415=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_delete_statements22244); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DELETE_SYM415_tree = (Object)adaptor.create(DELETE_SYM415);
			adaptor.addChild(root_0, DELETE_SYM415_tree);
			}

			// MySQL.g:1559:13: ( LOW_PRIORITY )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==LOW_PRIORITY) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// MySQL.g:1559:14: LOW_PRIORITY
					{
					LOW_PRIORITY416=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_delete_statements22247); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY416_tree = (Object)adaptor.create(LOW_PRIORITY416);
					adaptor.addChild(root_0, LOW_PRIORITY416_tree);
					}

					}
					break;

			}

			// MySQL.g:1559:29: ( QUICK )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==QUICK) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// MySQL.g:1559:30: QUICK
					{
					QUICK417=(Token)match(input,QUICK,FOLLOW_QUICK_in_delete_statements22252); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					QUICK417_tree = (Object)adaptor.create(QUICK417);
					adaptor.addChild(root_0, QUICK417_tree);
					}

					}
					break;

			}

			// MySQL.g:1559:38: ( IGNORE_SYM )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==IGNORE_SYM) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// MySQL.g:1559:39: IGNORE_SYM
					{
					IGNORE_SYM418=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_delete_statements22257); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM418_tree = (Object)adaptor.create(IGNORE_SYM418);
					adaptor.addChild(root_0, IGNORE_SYM418_tree);
					}

					}
					break;

			}

			// MySQL.g:1560:2: ( delete_single_table_statement | delete_multiple_table_statement1 | delete_multiple_table_statement2 )
			int alt118=3;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==FROM) ) {
				int LA118_1 = input.LA(2);
				if ( (LA118_1==ID) ) {
					switch ( input.LA(3) ) {
					case DOT:
						{
						int LA118_4 = input.LA(4);
						if ( (LA118_4==ID) ) {
							switch ( input.LA(5) ) {
							case EOF:
							case INTEGER_NUM:
							case LIMIT:
							case ORDER_SYM:
							case PARTITION_SYM:
							case SEMI:
							case WHERE:
								{
								alt118=1;
								}
								break;
							case COMMA:
								{
								int LA118_6 = input.LA(6);
								if ( (LA118_6==ALTER||LA118_6==CALL_SYM||LA118_6==CREATE||LA118_6==DELETE_SYM||(LA118_6 >= DO_SYM && LA118_6 <= DROP)||LA118_6==HANDLER_SYM||LA118_6==INSERT||LA118_6==LOAD||LA118_6==RENAME||LA118_6==REPLACE||LA118_6==SELECT||LA118_6==SHIFT_LEFT||LA118_6==TRUNCATE||LA118_6==UPDATE) ) {
									alt118=1;
								}
								else if ( (LA118_6==ID) ) {
									alt118=3;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 118, 6, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

								}
								break;
							case ALL_FIELDS:
							case USING_SYM:
								{
								alt118=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 118, 8, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case EOF:
					case INTEGER_NUM:
					case LIMIT:
					case ORDER_SYM:
					case PARTITION_SYM:
					case SEMI:
					case WHERE:
						{
						alt118=1;
						}
						break;
					case COMMA:
						{
						int LA118_6 = input.LA(4);
						if ( (LA118_6==ALTER||LA118_6==CALL_SYM||LA118_6==CREATE||LA118_6==DELETE_SYM||(LA118_6 >= DO_SYM && LA118_6 <= DROP)||LA118_6==HANDLER_SYM||LA118_6==INSERT||LA118_6==LOAD||LA118_6==RENAME||LA118_6==REPLACE||LA118_6==SELECT||LA118_6==SHIFT_LEFT||LA118_6==TRUNCATE||LA118_6==UPDATE) ) {
							alt118=1;
						}
						else if ( (LA118_6==ID) ) {
							alt118=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 118, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case ALL_FIELDS:
					case USING_SYM:
						{
						alt118=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 118, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA118_0==ID) ) {
				alt118=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}

			switch (alt118) {
				case 1 :
					// MySQL.g:1560:4: delete_single_table_statement
					{
					pushFollow(FOLLOW_delete_single_table_statement_in_delete_statements22264);
					delete_single_table_statement419=delete_single_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_single_table_statement419.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1560:36: delete_multiple_table_statement1
					{
					pushFollow(FOLLOW_delete_multiple_table_statement1_in_delete_statements22268);
					delete_multiple_table_statement1420=delete_multiple_table_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_multiple_table_statement1420.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1560:71: delete_multiple_table_statement2
					{
					pushFollow(FOLLOW_delete_multiple_table_statement2_in_delete_statements22272);
					delete_multiple_table_statement2421=delete_multiple_table_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_multiple_table_statement2421.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statements"


	public static class delete_single_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_single_table_statement"
	// MySQL.g:1562:1: delete_single_table_statement : FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )? ;
	public final MySQLParser.delete_single_table_statement_return delete_single_table_statement() throws RecognitionException {
		MySQLParser.delete_single_table_statement_return retval = new MySQLParser.delete_single_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token FROM422=null;
		ParserRuleReturnScope table_spec423 =null;
		ParserRuleReturnScope partition_clause424 =null;
		ParserRuleReturnScope where_clause425 =null;
		ParserRuleReturnScope orderby_clause426 =null;
		ParserRuleReturnScope limit_clause427 =null;

		Object FROM422_tree=null;

		try {
			// MySQL.g:1562:30: ( FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )? )
			// MySQL.g:1563:2: FROM table_spec ( partition_clause )? ( where_clause )? ( orderby_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			FROM422=(Token)match(input,FROM,FOLLOW_FROM_in_delete_single_table_statement22282); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM422_tree = (Object)adaptor.create(FROM422);
			adaptor.addChild(root_0, FROM422_tree);
			}

			pushFollow(FOLLOW_table_spec_in_delete_single_table_statement22284);
			table_spec423=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec423.getTree());

			// MySQL.g:1564:2: ( partition_clause )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==PARTITION_SYM) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// MySQL.g:1564:3: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_delete_single_table_statement22288);
					partition_clause424=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause424.getTree());

					}
					break;

			}

			// MySQL.g:1565:2: ( where_clause )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==WHERE) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// MySQL.g:1565:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_single_table_statement22294);
					where_clause425=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause425.getTree());

					}
					break;

			}

			// MySQL.g:1566:2: ( orderby_clause )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==ORDER_SYM) ) {
				alt121=1;
			}
			switch (alt121) {
				case 1 :
					// MySQL.g:1566:3: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_delete_single_table_statement22300);
					orderby_clause426=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause426.getTree());

					}
					break;

			}

			// MySQL.g:1567:2: ( limit_clause )?
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==INTEGER_NUM||LA122_0==LIMIT) ) {
				alt122=1;
			}
			switch (alt122) {
				case 1 :
					// MySQL.g:1567:3: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_delete_single_table_statement22306);
					limit_clause427=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause427.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_single_table_statement"


	public static class delete_multiple_table_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_multiple_table_statement1"
	// MySQL.g:1569:1: delete_multiple_table_statement1 : table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )? ;
	public final MySQLParser.delete_multiple_table_statement1_return delete_multiple_table_statement1() throws RecognitionException {
		MySQLParser.delete_multiple_table_statement1_return retval = new MySQLParser.delete_multiple_table_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALL_FIELDS429=null;
		Token COMMA430=null;
		Token ALL_FIELDS432=null;
		Token FROM433=null;
		ParserRuleReturnScope table_spec428 =null;
		ParserRuleReturnScope table_spec431 =null;
		ParserRuleReturnScope table_references434 =null;
		ParserRuleReturnScope where_clause435 =null;

		Object ALL_FIELDS429_tree=null;
		Object COMMA430_tree=null;
		Object ALL_FIELDS432_tree=null;
		Object FROM433_tree=null;

		try {
			// MySQL.g:1569:33: ( table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )? )
			// MySQL.g:1570:2: table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* FROM table_references ( where_clause )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement122316);
			table_spec428=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec428.getTree());

			// MySQL.g:1570:13: ( ALL_FIELDS )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==ALL_FIELDS) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// MySQL.g:1570:14: ALL_FIELDS
					{
					ALL_FIELDS429=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement122319); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL_FIELDS429_tree = (Object)adaptor.create(ALL_FIELDS429);
					adaptor.addChild(root_0, ALL_FIELDS429_tree);
					}

					}
					break;

			}

			// MySQL.g:1570:27: ( COMMA table_spec ( ALL_FIELDS )? )*
			loop125:
			while (true) {
				int alt125=2;
				int LA125_0 = input.LA(1);
				if ( (LA125_0==COMMA) ) {
					alt125=1;
				}

				switch (alt125) {
				case 1 :
					// MySQL.g:1570:28: COMMA table_spec ( ALL_FIELDS )?
					{
					COMMA430=(Token)match(input,COMMA,FOLLOW_COMMA_in_delete_multiple_table_statement122324); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA430_tree = (Object)adaptor.create(COMMA430);
					adaptor.addChild(root_0, COMMA430_tree);
					}

					pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement122326);
					table_spec431=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec431.getTree());

					// MySQL.g:1570:45: ( ALL_FIELDS )?
					int alt124=2;
					int LA124_0 = input.LA(1);
					if ( (LA124_0==ALL_FIELDS) ) {
						alt124=1;
					}
					switch (alt124) {
						case 1 :
							// MySQL.g:1570:46: ALL_FIELDS
							{
							ALL_FIELDS432=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement122329); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL_FIELDS432_tree = (Object)adaptor.create(ALL_FIELDS432);
							adaptor.addChild(root_0, ALL_FIELDS432_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop125;
				}
			}

			FROM433=(Token)match(input,FROM,FOLLOW_FROM_in_delete_multiple_table_statement122336); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM433_tree = (Object)adaptor.create(FROM433);
			adaptor.addChild(root_0, FROM433_tree);
			}

			pushFollow(FOLLOW_table_references_in_delete_multiple_table_statement122338);
			table_references434=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references434.getTree());

			// MySQL.g:1572:2: ( where_clause )?
			int alt126=2;
			int LA126_0 = input.LA(1);
			if ( (LA126_0==WHERE) ) {
				alt126=1;
			}
			switch (alt126) {
				case 1 :
					// MySQL.g:1572:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_multiple_table_statement122342);
					where_clause435=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause435.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_multiple_table_statement1"


	public static class delete_multiple_table_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "delete_multiple_table_statement2"
	// MySQL.g:1574:1: delete_multiple_table_statement2 : FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )? ;
	public final MySQLParser.delete_multiple_table_statement2_return delete_multiple_table_statement2() throws RecognitionException {
		MySQLParser.delete_multiple_table_statement2_return retval = new MySQLParser.delete_multiple_table_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token FROM436=null;
		Token ALL_FIELDS438=null;
		Token COMMA439=null;
		Token ALL_FIELDS441=null;
		Token USING_SYM442=null;
		ParserRuleReturnScope table_spec437 =null;
		ParserRuleReturnScope table_spec440 =null;
		ParserRuleReturnScope table_references443 =null;
		ParserRuleReturnScope where_clause444 =null;

		Object FROM436_tree=null;
		Object ALL_FIELDS438_tree=null;
		Object COMMA439_tree=null;
		Object ALL_FIELDS441_tree=null;
		Object USING_SYM442_tree=null;

		try {
			// MySQL.g:1574:33: ( FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )? )
			// MySQL.g:1575:2: FROM table_spec ( ALL_FIELDS )? ( COMMA table_spec ( ALL_FIELDS )? )* USING_SYM table_references ( where_clause )?
			{
			root_0 = (Object)adaptor.nil();


			FROM436=(Token)match(input,FROM,FOLLOW_FROM_in_delete_multiple_table_statement222352); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FROM436_tree = (Object)adaptor.create(FROM436);
			adaptor.addChild(root_0, FROM436_tree);
			}

			pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement222354);
			table_spec437=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec437.getTree());

			// MySQL.g:1575:18: ( ALL_FIELDS )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==ALL_FIELDS) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// MySQL.g:1575:19: ALL_FIELDS
					{
					ALL_FIELDS438=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement222357); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALL_FIELDS438_tree = (Object)adaptor.create(ALL_FIELDS438);
					adaptor.addChild(root_0, ALL_FIELDS438_tree);
					}

					}
					break;

			}

			// MySQL.g:1575:32: ( COMMA table_spec ( ALL_FIELDS )? )*
			loop129:
			while (true) {
				int alt129=2;
				int LA129_0 = input.LA(1);
				if ( (LA129_0==COMMA) ) {
					alt129=1;
				}

				switch (alt129) {
				case 1 :
					// MySQL.g:1575:33: COMMA table_spec ( ALL_FIELDS )?
					{
					COMMA439=(Token)match(input,COMMA,FOLLOW_COMMA_in_delete_multiple_table_statement222362); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA439_tree = (Object)adaptor.create(COMMA439);
					adaptor.addChild(root_0, COMMA439_tree);
					}

					pushFollow(FOLLOW_table_spec_in_delete_multiple_table_statement222364);
					table_spec440=table_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec440.getTree());

					// MySQL.g:1575:50: ( ALL_FIELDS )?
					int alt128=2;
					int LA128_0 = input.LA(1);
					if ( (LA128_0==ALL_FIELDS) ) {
						alt128=1;
					}
					switch (alt128) {
						case 1 :
							// MySQL.g:1575:51: ALL_FIELDS
							{
							ALL_FIELDS441=(Token)match(input,ALL_FIELDS,FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement222367); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL_FIELDS441_tree = (Object)adaptor.create(ALL_FIELDS441);
							adaptor.addChild(root_0, ALL_FIELDS441_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop129;
				}
			}

			USING_SYM442=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_delete_multiple_table_statement222374); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USING_SYM442_tree = (Object)adaptor.create(USING_SYM442);
			adaptor.addChild(root_0, USING_SYM442_tree);
			}

			pushFollow(FOLLOW_table_references_in_delete_multiple_table_statement222376);
			table_references443=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references443.getTree());

			// MySQL.g:1577:2: ( where_clause )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==WHERE) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// MySQL.g:1577:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_multiple_table_statement222380);
					where_clause444=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause444.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_multiple_table_statement2"


	public static class insert_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statements"
	// MySQL.g:1585:1: insert_statements : ( insert_statement1 | insert_statement2 | insert_statement3 );
	public final MySQLParser.insert_statements_return insert_statements() throws RecognitionException {
		MySQLParser.insert_statements_return retval = new MySQLParser.insert_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_statement1445 =null;
		ParserRuleReturnScope insert_statement2446 =null;
		ParserRuleReturnScope insert_statement3447 =null;


		try {
			// MySQL.g:1585:19: ( insert_statement1 | insert_statement2 | insert_statement3 )
			int alt131=3;
			alt131 = dfa131.predict(input);
			switch (alt131) {
				case 1 :
					// MySQL.g:1586:2: insert_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement1_in_insert_statements22397);
					insert_statement1445=insert_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement1445.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1586:22: insert_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement2_in_insert_statements22401);
					insert_statement2446=insert_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement2446.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1586:42: insert_statement3
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement3_in_insert_statements22405);
					insert_statement3447=insert_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement3447.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statements"


	public static class insert_header_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_header"
	// MySQL.g:1589:1: insert_header : INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )? ;
	public final MySQLParser.insert_header_return insert_header() throws RecognitionException {
		MySQLParser.insert_header_return retval = new MySQLParser.insert_header_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INSERT448=null;
		Token set449=null;
		Token IGNORE_SYM450=null;
		Token INTO451=null;
		ParserRuleReturnScope table_spec452 =null;
		ParserRuleReturnScope partition_clause453 =null;

		Object INSERT448_tree=null;
		Object set449_tree=null;
		Object IGNORE_SYM450_tree=null;
		Object INTO451_tree=null;

		try {
			// MySQL.g:1589:14: ( INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )? )
			// MySQL.g:1590:2: INSERT ( LOW_PRIORITY | HIGH_PRIORITY )? ( IGNORE_SYM )? ( INTO )? table_spec ( partition_clause )?
			{
			root_0 = (Object)adaptor.nil();


			INSERT448=(Token)match(input,INSERT,FOLLOW_INSERT_in_insert_header22414); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INSERT448_tree = (Object)adaptor.create(INSERT448);
			adaptor.addChild(root_0, INSERT448_tree);
			}

			// MySQL.g:1590:9: ( LOW_PRIORITY | HIGH_PRIORITY )?
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==HIGH_PRIORITY||LA132_0==LOW_PRIORITY) ) {
				alt132=1;
			}
			switch (alt132) {
				case 1 :
					// MySQL.g:
					{
					set449=input.LT(1);
					if ( input.LA(1)==HIGH_PRIORITY||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set449));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1590:41: ( IGNORE_SYM )?
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==IGNORE_SYM) ) {
				alt133=1;
			}
			switch (alt133) {
				case 1 :
					// MySQL.g:1590:42: IGNORE_SYM
					{
					IGNORE_SYM450=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_insert_header22426); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM450_tree = (Object)adaptor.create(IGNORE_SYM450);
					adaptor.addChild(root_0, IGNORE_SYM450_tree);
					}

					}
					break;

			}

			// MySQL.g:1591:2: ( INTO )?
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==INTO) ) {
				alt134=1;
			}
			switch (alt134) {
				case 1 :
					// MySQL.g:1591:3: INTO
					{
					INTO451=(Token)match(input,INTO,FOLLOW_INTO_in_insert_header22432); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO451_tree = (Object)adaptor.create(INTO451);
					adaptor.addChild(root_0, INTO451_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_spec_in_insert_header22436);
			table_spec452=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec452.getTree());

			// MySQL.g:1592:2: ( partition_clause )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==PARTITION_SYM) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// MySQL.g:1592:3: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_insert_header22441);
					partition_clause453=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause453.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_header"


	public static class insert_subfix_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_subfix"
	// MySQL.g:1595:1: insert_subfix : ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )* ;
	public final MySQLParser.insert_subfix_return insert_subfix() throws RecognitionException {
		MySQLParser.insert_subfix_return retval = new MySQLParser.insert_subfix_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ON454=null;
		Token DUPLICATE_SYM455=null;
		Token KEY_SYM456=null;
		Token UPDATE457=null;
		Token EQ_SYM459=null;
		Token COMMA461=null;
		Token EQ_SYM463=null;
		ParserRuleReturnScope column_spec458 =null;
		ParserRuleReturnScope expression460 =null;
		ParserRuleReturnScope column_spec462 =null;
		ParserRuleReturnScope expression464 =null;

		Object ON454_tree=null;
		Object DUPLICATE_SYM455_tree=null;
		Object KEY_SYM456_tree=null;
		Object UPDATE457_tree=null;
		Object EQ_SYM459_tree=null;
		Object COMMA461_tree=null;
		Object EQ_SYM463_tree=null;

		try {
			// MySQL.g:1595:14: ( ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )* )
			// MySQL.g:1596:2: ON DUPLICATE_SYM KEY_SYM UPDATE column_spec EQ_SYM expression ( COMMA column_spec EQ_SYM expression )*
			{
			root_0 = (Object)adaptor.nil();


			ON454=(Token)match(input,ON,FOLLOW_ON_in_insert_subfix22452); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON454_tree = (Object)adaptor.create(ON454);
			adaptor.addChild(root_0, ON454_tree);
			}

			DUPLICATE_SYM455=(Token)match(input,DUPLICATE_SYM,FOLLOW_DUPLICATE_SYM_in_insert_subfix22454); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DUPLICATE_SYM455_tree = (Object)adaptor.create(DUPLICATE_SYM455);
			adaptor.addChild(root_0, DUPLICATE_SYM455_tree);
			}

			KEY_SYM456=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_insert_subfix22456); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			KEY_SYM456_tree = (Object)adaptor.create(KEY_SYM456);
			adaptor.addChild(root_0, KEY_SYM456_tree);
			}

			UPDATE457=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_insert_subfix22458); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE457_tree = (Object)adaptor.create(UPDATE457);
			adaptor.addChild(root_0, UPDATE457_tree);
			}

			pushFollow(FOLLOW_column_spec_in_insert_subfix22460);
			column_spec458=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec458.getTree());

			EQ_SYM459=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_insert_subfix22462); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQ_SYM459_tree = (Object)adaptor.create(EQ_SYM459);
			adaptor.addChild(root_0, EQ_SYM459_tree);
			}

			pushFollow(FOLLOW_expression_in_insert_subfix22464);
			expression460=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, expression460.getTree());

			// MySQL.g:1596:64: ( COMMA column_spec EQ_SYM expression )*
			loop136:
			while (true) {
				int alt136=2;
				int LA136_0 = input.LA(1);
				if ( (LA136_0==COMMA) ) {
					int LA136_2 = input.LA(2);
					if ( (LA136_2==ID) ) {
						alt136=1;
					}

				}

				switch (alt136) {
				case 1 :
					// MySQL.g:1596:65: COMMA column_spec EQ_SYM expression
					{
					COMMA461=(Token)match(input,COMMA,FOLLOW_COMMA_in_insert_subfix22467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA461_tree = (Object)adaptor.create(COMMA461);
					adaptor.addChild(root_0, COMMA461_tree);
					}

					pushFollow(FOLLOW_column_spec_in_insert_subfix22469);
					column_spec462=column_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec462.getTree());

					EQ_SYM463=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_insert_subfix22471); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM463_tree = (Object)adaptor.create(EQ_SYM463);
					adaptor.addChild(root_0, EQ_SYM463_tree);
					}

					pushFollow(FOLLOW_expression_in_insert_subfix22473);
					expression464=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression464.getTree());

					}
					break;

				default :
					break loop136;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_subfix"


	public static class insert_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statement1"
	// MySQL.g:1599:1: insert_statement1 : insert_header ( column_list )? value_list_clause ( insert_subfix )? ;
	public final MySQLParser.insert_statement1_return insert_statement1() throws RecognitionException {
		MySQLParser.insert_statement1_return retval = new MySQLParser.insert_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_header465 =null;
		ParserRuleReturnScope column_list466 =null;
		ParserRuleReturnScope value_list_clause467 =null;
		ParserRuleReturnScope insert_subfix468 =null;


		try {
			// MySQL.g:1599:18: ( insert_header ( column_list )? value_list_clause ( insert_subfix )? )
			// MySQL.g:1600:2: insert_header ( column_list )? value_list_clause ( insert_subfix )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement122484);
			insert_header465=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header465.getTree());

			// MySQL.g:1601:2: ( column_list )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==LPAREN) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// MySQL.g:1601:3: column_list
					{
					pushFollow(FOLLOW_column_list_in_insert_statement122488);
					column_list466=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list466.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_value_list_clause_in_insert_statement122494);
			value_list_clause467=value_list_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, value_list_clause467.getTree());

			// MySQL.g:1603:2: ( insert_subfix )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==ON) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// MySQL.g:1603:4: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement122499);
					insert_subfix468=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix468.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement1"


	public static class value_list_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "value_list_clause"
	// MySQL.g:1605:1: value_list_clause : ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )* ;
	public final MySQLParser.value_list_clause_return value_list_clause() throws RecognitionException {
		MySQLParser.value_list_clause_return retval = new MySQLParser.value_list_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set469=null;
		Token COMMA471=null;
		ParserRuleReturnScope column_value_list470 =null;
		ParserRuleReturnScope column_value_list472 =null;

		Object set469_tree=null;
		Object COMMA471_tree=null;

		try {
			// MySQL.g:1605:18: ( ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )* )
			// MySQL.g:1605:20: ( VALUES | VALUE_SYM ) column_value_list ( COMMA column_value_list )*
			{
			root_0 = (Object)adaptor.nil();


			set469=input.LT(1);
			if ( (input.LA(1) >= VALUES && input.LA(1) <= VALUE_SYM) ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set469));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_column_value_list_in_value_list_clause22517);
			column_value_list470=column_value_list();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_value_list470.getTree());

			// MySQL.g:1605:59: ( COMMA column_value_list )*
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==COMMA) ) {
					int LA139_2 = input.LA(2);
					if ( (LA139_2==LPAREN) ) {
						alt139=1;
					}

				}

				switch (alt139) {
				case 1 :
					// MySQL.g:1605:60: COMMA column_value_list
					{
					COMMA471=(Token)match(input,COMMA,FOLLOW_COMMA_in_value_list_clause22520); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA471_tree = (Object)adaptor.create(COMMA471);
					adaptor.addChild(root_0, COMMA471_tree);
					}

					pushFollow(FOLLOW_column_value_list_in_value_list_clause22522);
					column_value_list472=column_value_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_value_list472.getTree());

					}
					break;

				default :
					break loop139;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "value_list_clause"


	public static class column_value_list_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_value_list"
	// MySQL.g:1606:1: column_value_list : LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN ;
	public final MySQLParser.column_value_list_return column_value_list() throws RecognitionException {
		MySQLParser.column_value_list_return retval = new MySQLParser.column_value_list_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN473=null;
		Token DEFAULT475=null;
		Token COMMA476=null;
		Token DEFAULT478=null;
		Token RPAREN479=null;
		ParserRuleReturnScope bit_expr474 =null;
		ParserRuleReturnScope bit_expr477 =null;

		Object LPAREN473_tree=null;
		Object DEFAULT475_tree=null;
		Object COMMA476_tree=null;
		Object DEFAULT478_tree=null;
		Object RPAREN479_tree=null;

		try {
			// MySQL.g:1606:18: ( LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN )
			// MySQL.g:1606:20: LPAREN ( bit_expr | DEFAULT ) ( COMMA ( bit_expr | DEFAULT ) )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			LPAREN473=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_value_list22530); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN473_tree = (Object)adaptor.create(LPAREN473);
			adaptor.addChild(root_0, LPAREN473_tree);
			}

			// MySQL.g:1606:27: ( bit_expr | DEFAULT )
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==ABS||LA140_0==ACOS||(LA140_0 >= ADDDATE && LA140_0 <= ADDTIME)||(LA140_0 >= AES_DECRYPT && LA140_0 <= AES_ENCRYPT)||LA140_0==ASCII_SYM||LA140_0==ASIN||(LA140_0 >= ATAN && LA140_0 <= ATAN2)||LA140_0==AVG||LA140_0==BENCHMARK||(LA140_0 >= BIN && LA140_0 <= BINARY)||(LA140_0 >= BIT_AND && LA140_0 <= BIT_OR)||LA140_0==BIT_XOR||(LA140_0 >= CASE_SYM && LA140_0 <= CEILING)||LA140_0==CHAR||(LA140_0 >= CHARSET && LA140_0 <= CHAR_LENGTH)||LA140_0==COERCIBILITY||LA140_0==COLLATION||(LA140_0 >= CONCAT && LA140_0 <= CONCAT_WS)||LA140_0==CONNECTION_ID||(LA140_0 >= CONV && LA140_0 <= CONVERT_TZ)||(LA140_0 >= COS && LA140_0 <= COUNT)||LA140_0==CRC32||LA140_0==CURDATE||LA140_0==CURRENT_USER||LA140_0==CURTIME||LA140_0==DATABASE||LA140_0==DATEDIFF||(LA140_0 >= DATE_ADD && LA140_0 <= DAYOFYEAR)||LA140_0==DECODE||LA140_0==DEGREES||(LA140_0 >= DES_DECRYPT && LA140_0 <= DES_ENCRYPT)||LA140_0==ELT||(LA140_0 >= ENCODE && LA140_0 <= ENCRYPT)||LA140_0==EXISTS||LA140_0==EXP||LA140_0==EXPORT_SET||LA140_0==EXTRACT||LA140_0==FALSE_SYM||LA140_0==FIELD||LA140_0==FIND_IN_SET||LA140_0==FLOOR||LA140_0==FORMAT||LA140_0==FOUND_ROWS||(LA140_0 >= FROM_BASE64 && LA140_0 <= FROM_UNIXTIME)||(LA140_0 >= GET_FORMAT && LA140_0 <= GET_LOCK)||LA140_0==GROUP_CONCAT||(LA140_0 >= HEX && LA140_0 <= HEX_DIGIT)||LA140_0==HOUR||LA140_0==ID||(LA140_0 >= IF && LA140_0 <= IFNULL)||(LA140_0 >= INET_ATON && LA140_0 <= INET_NTOA)||LA140_0==INSERT||(LA140_0 >= INSTR && LA140_0 <= INTEGER_NUM)||LA140_0==INTERVAL_SYM||LA140_0==IS_FREE_LOCK||LA140_0==IS_USED_LOCK||(LA140_0 >= LAST_DAY && LA140_0 <= LAST_INSERT_ID)||(LA140_0 >= LEFT && LA140_0 <= LENGTH)||LA140_0==LN||LA140_0==LOAD_FILE||LA140_0==LOCATE||(LA140_0 >= LOG && LA140_0 <= LOG2)||LA140_0==LOWER||(LA140_0 >= LPAD && LA140_0 <= LPAREN)||LA140_0==LTRIM||(LA140_0 >= MAKEDATE && LA140_0 <= MAKE_SET)||LA140_0==MASTER_POS_WAIT||LA140_0==MATCH||LA140_0==MAX_SYM||LA140_0==MD5||(LA140_0 >= MICROSECOND && LA140_0 <= MID)||(LA140_0 >= MINUS && LA140_0 <= MINUTE)||LA140_0==MIN_SYM||LA140_0==MOD||(LA140_0 >= MONTH && LA140_0 <= MONTHNAME)||LA140_0==NAME_CONST||LA140_0==NEGATION||LA140_0==NOW||LA140_0==NULL_SYM||LA140_0==OCT||LA140_0==OLD_PASSWORD||LA140_0==ORD||(LA140_0 >= PASSWORD && LA140_0 <= PERIOD_DIFF)||LA140_0==PI||LA140_0==PLUS||(LA140_0 >= POW && LA140_0 <= POWER)||LA140_0==QUARTER||LA140_0==QUOTE||(LA140_0 >= RADIANS && LA140_0 <= RAND)||LA140_0==REAL_NUMBER||LA140_0==RELEASE_LOCK||LA140_0==REPEAT||LA140_0==REPLACE||LA140_0==REVERSE||LA140_0==RIGHT||LA140_0==ROUND||(LA140_0 >= ROW_SYM && LA140_0 <= RPAD)||LA140_0==RTRIM||(LA140_0 >= SCHEMA && LA140_0 <= SECOND)||LA140_0==SEC_TO_TIME||LA140_0==SESSION_USER||LA140_0==SIGN||LA140_0==SIN||LA140_0==SLEEP||LA140_0==SOUNDEX||LA140_0==SPACE||LA140_0==SQRT||(LA140_0 >= STD && LA140_0 <= STDDEV_SAMP)||LA140_0==STRCMP||LA140_0==STR_TO_DATE||(LA140_0 >= SUBSTRING && LA140_0 <= SUM)||(LA140_0 >= SYSDATE && LA140_0 <= SYSTEM_USER)||LA140_0==TAN||LA140_0==TEXT_STRING||(LA140_0 >= TIMEDIFF && LA140_0 <= TIME_TO_SEC)||(LA140_0 >= TO_BASE64 && LA140_0 <= TO_SECONDS)||(LA140_0 >= TRIM && LA140_0 <= TRUNCATE)||LA140_0==UNHEX||LA140_0==UNIX_TIMESTAMP||LA140_0==UPPER||(LA140_0 >= USER && LA140_0 <= USER_VAR)||(LA140_0 >= UTC_DATE && LA140_0 <= UTC_TIMESTAMP)||LA140_0==UUID||LA140_0==VALUES||LA140_0==VARIANCE||(LA140_0 >= VAR_POP && LA140_0 <= VERSION_SYM)||(LA140_0 >= WEEK && LA140_0 <= WEIGHT_STRING)||(LA140_0 >= YEAR && LA140_0 <= YEARWEEK)) ) {
				alt140=1;
			}
			else if ( (LA140_0==DEFAULT) ) {
				int LA140_2 = input.LA(2);
				if ( (synpred469_MySQL()) ) {
					alt140=1;
				}
				else if ( (true) ) {
					alt140=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}

			switch (alt140) {
				case 1 :
					// MySQL.g:1606:28: bit_expr
					{
					pushFollow(FOLLOW_bit_expr_in_column_value_list22533);
					bit_expr474=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr474.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1606:37: DEFAULT
					{
					DEFAULT475=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_value_list22535); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT475_tree = (Object)adaptor.create(DEFAULT475);
					adaptor.addChild(root_0, DEFAULT475_tree);
					}

					}
					break;

			}

			// MySQL.g:1606:46: ( COMMA ( bit_expr | DEFAULT ) )*
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==COMMA) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// MySQL.g:1606:47: COMMA ( bit_expr | DEFAULT )
					{
					COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_value_list22539); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA476_tree = (Object)adaptor.create(COMMA476);
					adaptor.addChild(root_0, COMMA476_tree);
					}

					// MySQL.g:1606:53: ( bit_expr | DEFAULT )
					int alt141=2;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==ABS||LA141_0==ACOS||(LA141_0 >= ADDDATE && LA141_0 <= ADDTIME)||(LA141_0 >= AES_DECRYPT && LA141_0 <= AES_ENCRYPT)||LA141_0==ASCII_SYM||LA141_0==ASIN||(LA141_0 >= ATAN && LA141_0 <= ATAN2)||LA141_0==AVG||LA141_0==BENCHMARK||(LA141_0 >= BIN && LA141_0 <= BINARY)||(LA141_0 >= BIT_AND && LA141_0 <= BIT_OR)||LA141_0==BIT_XOR||(LA141_0 >= CASE_SYM && LA141_0 <= CEILING)||LA141_0==CHAR||(LA141_0 >= CHARSET && LA141_0 <= CHAR_LENGTH)||LA141_0==COERCIBILITY||LA141_0==COLLATION||(LA141_0 >= CONCAT && LA141_0 <= CONCAT_WS)||LA141_0==CONNECTION_ID||(LA141_0 >= CONV && LA141_0 <= CONVERT_TZ)||(LA141_0 >= COS && LA141_0 <= COUNT)||LA141_0==CRC32||LA141_0==CURDATE||LA141_0==CURRENT_USER||LA141_0==CURTIME||LA141_0==DATABASE||LA141_0==DATEDIFF||(LA141_0 >= DATE_ADD && LA141_0 <= DAYOFYEAR)||LA141_0==DECODE||LA141_0==DEGREES||(LA141_0 >= DES_DECRYPT && LA141_0 <= DES_ENCRYPT)||LA141_0==ELT||(LA141_0 >= ENCODE && LA141_0 <= ENCRYPT)||LA141_0==EXISTS||LA141_0==EXP||LA141_0==EXPORT_SET||LA141_0==EXTRACT||LA141_0==FALSE_SYM||LA141_0==FIELD||LA141_0==FIND_IN_SET||LA141_0==FLOOR||LA141_0==FORMAT||LA141_0==FOUND_ROWS||(LA141_0 >= FROM_BASE64 && LA141_0 <= FROM_UNIXTIME)||(LA141_0 >= GET_FORMAT && LA141_0 <= GET_LOCK)||LA141_0==GROUP_CONCAT||(LA141_0 >= HEX && LA141_0 <= HEX_DIGIT)||LA141_0==HOUR||LA141_0==ID||(LA141_0 >= IF && LA141_0 <= IFNULL)||(LA141_0 >= INET_ATON && LA141_0 <= INET_NTOA)||LA141_0==INSERT||(LA141_0 >= INSTR && LA141_0 <= INTEGER_NUM)||LA141_0==INTERVAL_SYM||LA141_0==IS_FREE_LOCK||LA141_0==IS_USED_LOCK||(LA141_0 >= LAST_DAY && LA141_0 <= LAST_INSERT_ID)||(LA141_0 >= LEFT && LA141_0 <= LENGTH)||LA141_0==LN||LA141_0==LOAD_FILE||LA141_0==LOCATE||(LA141_0 >= LOG && LA141_0 <= LOG2)||LA141_0==LOWER||(LA141_0 >= LPAD && LA141_0 <= LPAREN)||LA141_0==LTRIM||(LA141_0 >= MAKEDATE && LA141_0 <= MAKE_SET)||LA141_0==MASTER_POS_WAIT||LA141_0==MATCH||LA141_0==MAX_SYM||LA141_0==MD5||(LA141_0 >= MICROSECOND && LA141_0 <= MID)||(LA141_0 >= MINUS && LA141_0 <= MINUTE)||LA141_0==MIN_SYM||LA141_0==MOD||(LA141_0 >= MONTH && LA141_0 <= MONTHNAME)||LA141_0==NAME_CONST||LA141_0==NEGATION||LA141_0==NOW||LA141_0==NULL_SYM||LA141_0==OCT||LA141_0==OLD_PASSWORD||LA141_0==ORD||(LA141_0 >= PASSWORD && LA141_0 <= PERIOD_DIFF)||LA141_0==PI||LA141_0==PLUS||(LA141_0 >= POW && LA141_0 <= POWER)||LA141_0==QUARTER||LA141_0==QUOTE||(LA141_0 >= RADIANS && LA141_0 <= RAND)||LA141_0==REAL_NUMBER||LA141_0==RELEASE_LOCK||LA141_0==REPEAT||LA141_0==REPLACE||LA141_0==REVERSE||LA141_0==RIGHT||LA141_0==ROUND||(LA141_0 >= ROW_SYM && LA141_0 <= RPAD)||LA141_0==RTRIM||(LA141_0 >= SCHEMA && LA141_0 <= SECOND)||LA141_0==SEC_TO_TIME||LA141_0==SESSION_USER||LA141_0==SIGN||LA141_0==SIN||LA141_0==SLEEP||LA141_0==SOUNDEX||LA141_0==SPACE||LA141_0==SQRT||(LA141_0 >= STD && LA141_0 <= STDDEV_SAMP)||LA141_0==STRCMP||LA141_0==STR_TO_DATE||(LA141_0 >= SUBSTRING && LA141_0 <= SUM)||(LA141_0 >= SYSDATE && LA141_0 <= SYSTEM_USER)||LA141_0==TAN||LA141_0==TEXT_STRING||(LA141_0 >= TIMEDIFF && LA141_0 <= TIME_TO_SEC)||(LA141_0 >= TO_BASE64 && LA141_0 <= TO_SECONDS)||(LA141_0 >= TRIM && LA141_0 <= TRUNCATE)||LA141_0==UNHEX||LA141_0==UNIX_TIMESTAMP||LA141_0==UPPER||(LA141_0 >= USER && LA141_0 <= USER_VAR)||(LA141_0 >= UTC_DATE && LA141_0 <= UTC_TIMESTAMP)||LA141_0==UUID||LA141_0==VALUES||LA141_0==VARIANCE||(LA141_0 >= VAR_POP && LA141_0 <= VERSION_SYM)||(LA141_0 >= WEEK && LA141_0 <= WEIGHT_STRING)||(LA141_0 >= YEAR && LA141_0 <= YEARWEEK)) ) {
						alt141=1;
					}
					else if ( (LA141_0==DEFAULT) ) {
						int LA141_2 = input.LA(2);
						if ( (synpred470_MySQL()) ) {
							alt141=1;
						}
						else if ( (true) ) {
							alt141=2;
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 141, 0, input);
						throw nvae;
					}

					switch (alt141) {
						case 1 :
							// MySQL.g:1606:54: bit_expr
							{
							pushFollow(FOLLOW_bit_expr_in_column_value_list22542);
							bit_expr477=bit_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr477.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1606:63: DEFAULT
							{
							DEFAULT478=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_value_list22544); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT478_tree = (Object)adaptor.create(DEFAULT478);
							adaptor.addChild(root_0, DEFAULT478_tree);
							}

							}
							break;

					}

					}
					break;

				default :
					break loop142;
				}
			}

			RPAREN479=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_value_list22550); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN479_tree = (Object)adaptor.create(RPAREN479);
			adaptor.addChild(root_0, RPAREN479_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_value_list"


	public static class insert_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statement2"
	// MySQL.g:1608:1: insert_statement2 : insert_header set_columns_cluase ( insert_subfix )? ;
	public final MySQLParser.insert_statement2_return insert_statement2() throws RecognitionException {
		MySQLParser.insert_statement2_return retval = new MySQLParser.insert_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_header480 =null;
		ParserRuleReturnScope set_columns_cluase481 =null;
		ParserRuleReturnScope insert_subfix482 =null;


		try {
			// MySQL.g:1608:18: ( insert_header set_columns_cluase ( insert_subfix )? )
			// MySQL.g:1609:2: insert_header set_columns_cluase ( insert_subfix )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement222559);
			insert_header480=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header480.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_insert_statement222562);
			set_columns_cluase481=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase481.getTree());

			// MySQL.g:1611:2: ( insert_subfix )?
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==ON) ) {
				alt143=1;
			}
			switch (alt143) {
				case 1 :
					// MySQL.g:1611:4: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement222567);
					insert_subfix482=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix482.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement2"


	public static class set_columns_cluase_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "set_columns_cluase"
	// MySQL.g:1613:1: set_columns_cluase : SET_SYM set_column_cluase ( COMMA set_column_cluase )* ;
	public final MySQLParser.set_columns_cluase_return set_columns_cluase() throws RecognitionException {
		MySQLParser.set_columns_cluase_return retval = new MySQLParser.set_columns_cluase_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SET_SYM483=null;
		Token COMMA485=null;
		ParserRuleReturnScope set_column_cluase484 =null;
		ParserRuleReturnScope set_column_cluase486 =null;

		Object SET_SYM483_tree=null;
		Object COMMA485_tree=null;

		try {
			// MySQL.g:1613:19: ( SET_SYM set_column_cluase ( COMMA set_column_cluase )* )
			// MySQL.g:1613:21: SET_SYM set_column_cluase ( COMMA set_column_cluase )*
			{
			root_0 = (Object)adaptor.nil();


			SET_SYM483=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_set_columns_cluase22577); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SET_SYM483_tree = (Object)adaptor.create(SET_SYM483);
			adaptor.addChild(root_0, SET_SYM483_tree);
			}

			pushFollow(FOLLOW_set_column_cluase_in_set_columns_cluase22579);
			set_column_cluase484=set_column_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_column_cluase484.getTree());

			// MySQL.g:1613:47: ( COMMA set_column_cluase )*
			loop144:
			while (true) {
				int alt144=2;
				int LA144_0 = input.LA(1);
				if ( (LA144_0==COMMA) ) {
					int LA144_2 = input.LA(2);
					if ( (LA144_2==ID) ) {
						alt144=1;
					}

				}

				switch (alt144) {
				case 1 :
					// MySQL.g:1613:49: COMMA set_column_cluase
					{
					COMMA485=(Token)match(input,COMMA,FOLLOW_COMMA_in_set_columns_cluase22583); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA485_tree = (Object)adaptor.create(COMMA485);
					adaptor.addChild(root_0, COMMA485_tree);
					}

					pushFollow(FOLLOW_set_column_cluase_in_set_columns_cluase22585);
					set_column_cluase486=set_column_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_column_cluase486.getTree());

					}
					break;

				default :
					break loop144;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_columns_cluase"


	public static class set_column_cluase_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "set_column_cluase"
	// MySQL.g:1614:1: set_column_cluase : column_spec EQ_SYM ( expression | DEFAULT ) ;
	public final MySQLParser.set_column_cluase_return set_column_cluase() throws RecognitionException {
		MySQLParser.set_column_cluase_return retval = new MySQLParser.set_column_cluase_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token EQ_SYM488=null;
		Token DEFAULT490=null;
		ParserRuleReturnScope column_spec487 =null;
		ParserRuleReturnScope expression489 =null;

		Object EQ_SYM488_tree=null;
		Object DEFAULT490_tree=null;

		try {
			// MySQL.g:1614:18: ( column_spec EQ_SYM ( expression | DEFAULT ) )
			// MySQL.g:1614:20: column_spec EQ_SYM ( expression | DEFAULT )
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_spec_in_set_column_cluase22594);
			column_spec487=column_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec487.getTree());

			EQ_SYM488=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_set_column_cluase22596); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQ_SYM488_tree = (Object)adaptor.create(EQ_SYM488);
			adaptor.addChild(root_0, EQ_SYM488_tree);
			}

			// MySQL.g:1614:39: ( expression | DEFAULT )
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==ABS||LA145_0==ACOS||(LA145_0 >= ADDDATE && LA145_0 <= ADDTIME)||(LA145_0 >= AES_DECRYPT && LA145_0 <= AES_ENCRYPT)||LA145_0==ASCII_SYM||LA145_0==ASIN||(LA145_0 >= ATAN && LA145_0 <= ATAN2)||LA145_0==AVG||LA145_0==BENCHMARK||(LA145_0 >= BIN && LA145_0 <= BINARY)||(LA145_0 >= BIT_AND && LA145_0 <= BIT_OR)||LA145_0==BIT_XOR||(LA145_0 >= CASE_SYM && LA145_0 <= CEILING)||LA145_0==CHAR||(LA145_0 >= CHARSET && LA145_0 <= CHAR_LENGTH)||LA145_0==COERCIBILITY||LA145_0==COLLATION||(LA145_0 >= CONCAT && LA145_0 <= CONCAT_WS)||LA145_0==CONNECTION_ID||(LA145_0 >= CONV && LA145_0 <= CONVERT_TZ)||(LA145_0 >= COS && LA145_0 <= COUNT)||LA145_0==CRC32||LA145_0==CURDATE||LA145_0==CURRENT_USER||LA145_0==CURTIME||LA145_0==DATABASE||LA145_0==DATEDIFF||(LA145_0 >= DATE_ADD && LA145_0 <= DAYOFYEAR)||LA145_0==DECODE||LA145_0==DEGREES||(LA145_0 >= DES_DECRYPT && LA145_0 <= DES_ENCRYPT)||LA145_0==ELT||(LA145_0 >= ENCODE && LA145_0 <= ENCRYPT)||LA145_0==EXISTS||LA145_0==EXP||LA145_0==EXPORT_SET||LA145_0==EXTRACT||LA145_0==FALSE_SYM||LA145_0==FIELD||LA145_0==FIND_IN_SET||LA145_0==FLOOR||LA145_0==FORMAT||LA145_0==FOUND_ROWS||(LA145_0 >= FROM_BASE64 && LA145_0 <= FROM_UNIXTIME)||(LA145_0 >= GET_FORMAT && LA145_0 <= GET_LOCK)||LA145_0==GROUP_CONCAT||(LA145_0 >= HEX && LA145_0 <= HEX_DIGIT)||LA145_0==HOUR||LA145_0==ID||(LA145_0 >= IF && LA145_0 <= IFNULL)||(LA145_0 >= INET_ATON && LA145_0 <= INET_NTOA)||LA145_0==INSERT||(LA145_0 >= INSTR && LA145_0 <= INTEGER_NUM)||LA145_0==INTERVAL_SYM||LA145_0==IS_FREE_LOCK||LA145_0==IS_USED_LOCK||(LA145_0 >= LAST_DAY && LA145_0 <= LAST_INSERT_ID)||(LA145_0 >= LEFT && LA145_0 <= LENGTH)||LA145_0==LN||LA145_0==LOAD_FILE||LA145_0==LOCATE||(LA145_0 >= LOG && LA145_0 <= LOG2)||LA145_0==LOWER||(LA145_0 >= LPAD && LA145_0 <= LPAREN)||LA145_0==LTRIM||(LA145_0 >= MAKEDATE && LA145_0 <= MAKE_SET)||LA145_0==MASTER_POS_WAIT||LA145_0==MATCH||LA145_0==MAX_SYM||LA145_0==MD5||(LA145_0 >= MICROSECOND && LA145_0 <= MID)||(LA145_0 >= MINUS && LA145_0 <= MINUTE)||LA145_0==MIN_SYM||LA145_0==MOD||(LA145_0 >= MONTH && LA145_0 <= MONTHNAME)||LA145_0==NAME_CONST||LA145_0==NEGATION||(LA145_0 >= NOT_SYM && LA145_0 <= NOW)||LA145_0==NULL_SYM||LA145_0==OCT||LA145_0==OLD_PASSWORD||LA145_0==ORD||(LA145_0 >= PASSWORD && LA145_0 <= PERIOD_DIFF)||LA145_0==PI||LA145_0==PLUS||(LA145_0 >= POW && LA145_0 <= POWER)||LA145_0==QUARTER||LA145_0==QUOTE||(LA145_0 >= RADIANS && LA145_0 <= RAND)||LA145_0==REAL_NUMBER||LA145_0==RELEASE_LOCK||LA145_0==REPEAT||LA145_0==REPLACE||LA145_0==REVERSE||LA145_0==RIGHT||LA145_0==ROUND||(LA145_0 >= ROW_SYM && LA145_0 <= RPAD)||LA145_0==RTRIM||(LA145_0 >= SCHEMA && LA145_0 <= SECOND)||LA145_0==SEC_TO_TIME||LA145_0==SESSION_USER||LA145_0==SIGN||LA145_0==SIN||LA145_0==SLEEP||LA145_0==SOUNDEX||LA145_0==SPACE||LA145_0==SQRT||(LA145_0 >= STD && LA145_0 <= STDDEV_SAMP)||LA145_0==STRCMP||LA145_0==STR_TO_DATE||(LA145_0 >= SUBSTRING && LA145_0 <= SUM)||(LA145_0 >= SYSDATE && LA145_0 <= SYSTEM_USER)||LA145_0==TAN||LA145_0==TEXT_STRING||(LA145_0 >= TIMEDIFF && LA145_0 <= TIME_TO_SEC)||(LA145_0 >= TO_BASE64 && LA145_0 <= TO_SECONDS)||(LA145_0 >= TRIM && LA145_0 <= TRUNCATE)||LA145_0==UNHEX||LA145_0==UNIX_TIMESTAMP||LA145_0==UPPER||(LA145_0 >= USER && LA145_0 <= USER_VAR)||(LA145_0 >= UTC_DATE && LA145_0 <= UTC_TIMESTAMP)||LA145_0==UUID||LA145_0==VALUES||LA145_0==VARIANCE||(LA145_0 >= VAR_POP && LA145_0 <= VERSION_SYM)||(LA145_0 >= WEEK && LA145_0 <= WEIGHT_STRING)||(LA145_0 >= YEAR && LA145_0 <= YEARWEEK)) ) {
				alt145=1;
			}
			else if ( (LA145_0==DEFAULT) ) {
				int LA145_2 = input.LA(2);
				if ( (synpred474_MySQL()) ) {
					alt145=1;
				}
				else if ( (true) ) {
					alt145=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 145, 0, input);
				throw nvae;
			}

			switch (alt145) {
				case 1 :
					// MySQL.g:1614:40: expression
					{
					pushFollow(FOLLOW_expression_in_set_column_cluase22599);
					expression489=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1614:51: DEFAULT
					{
					DEFAULT490=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_set_column_cluase22601); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT490_tree = (Object)adaptor.create(DEFAULT490);
					adaptor.addChild(root_0, DEFAULT490_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_column_cluase"


	public static class insert_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "insert_statement3"
	// MySQL.g:1616:1: insert_statement3 : insert_header ( column_list )? select_expression ( insert_subfix )? ;
	public final MySQLParser.insert_statement3_return insert_statement3() throws RecognitionException {
		MySQLParser.insert_statement3_return retval = new MySQLParser.insert_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope insert_header491 =null;
		ParserRuleReturnScope column_list492 =null;
		ParserRuleReturnScope select_expression493 =null;
		ParserRuleReturnScope insert_subfix494 =null;


		try {
			// MySQL.g:1616:18: ( insert_header ( column_list )? select_expression ( insert_subfix )? )
			// MySQL.g:1617:2: insert_header ( column_list )? select_expression ( insert_subfix )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_insert_header_in_insert_statement322611);
			insert_header491=insert_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_header491.getTree());

			// MySQL.g:1618:2: ( column_list )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==LPAREN) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// MySQL.g:1618:3: column_list
					{
					pushFollow(FOLLOW_column_list_in_insert_statement322615);
					column_list492=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list492.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_expression_in_insert_statement322621);
			select_expression493=select_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression493.getTree());

			// MySQL.g:1620:2: ( insert_subfix )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==ON) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// MySQL.g:1620:4: insert_subfix
					{
					pushFollow(FOLLOW_insert_subfix_in_insert_statement322626);
					insert_subfix494=insert_subfix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_subfix494.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement3"


	public static class update_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "update_statements"
	// MySQL.g:1630:1: update_statements : ( single_table_update_statement | multiple_table_update_statement );
	public final MySQLParser.update_statements_return update_statements() throws RecognitionException {
		MySQLParser.update_statements_return retval = new MySQLParser.update_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope single_table_update_statement495 =null;
		ParserRuleReturnScope multiple_table_update_statement496 =null;


		try {
			// MySQL.g:1630:19: ( single_table_update_statement | multiple_table_update_statement )
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==UPDATE) ) {
				int LA148_1 = input.LA(2);
				if ( (synpred477_MySQL()) ) {
					alt148=1;
				}
				else if ( (true) ) {
					alt148=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 148, 0, input);
				throw nvae;
			}

			switch (alt148) {
				case 1 :
					// MySQL.g:1631:2: single_table_update_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_single_table_update_statement_in_update_statements22646);
					single_table_update_statement495=single_table_update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, single_table_update_statement495.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1631:34: multiple_table_update_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_multiple_table_update_statement_in_update_statements22650);
					multiple_table_update_statement496=multiple_table_update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple_table_update_statement496.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statements"


	public static class single_table_update_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "single_table_update_statement"
	// MySQL.g:1634:1: single_table_update_statement : UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )? ;
	public final MySQLParser.single_table_update_statement_return single_table_update_statement() throws RecognitionException {
		MySQLParser.single_table_update_statement_return retval = new MySQLParser.single_table_update_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UPDATE497=null;
		Token LOW_PRIORITY498=null;
		Token IGNORE_SYM499=null;
		ParserRuleReturnScope table_reference500 =null;
		ParserRuleReturnScope set_columns_cluase501 =null;
		ParserRuleReturnScope where_clause502 =null;
		ParserRuleReturnScope orderby_clause503 =null;
		ParserRuleReturnScope limit_clause504 =null;

		Object UPDATE497_tree=null;
		Object LOW_PRIORITY498_tree=null;
		Object IGNORE_SYM499_tree=null;

		try {
			// MySQL.g:1634:30: ( UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )? )
			// MySQL.g:1635:1: UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_reference set_columns_cluase ( where_clause )? ( orderby_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			UPDATE497=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_single_table_update_statement22659); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE497_tree = (Object)adaptor.create(UPDATE497);
			adaptor.addChild(root_0, UPDATE497_tree);
			}

			// MySQL.g:1635:8: ( LOW_PRIORITY )?
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==LOW_PRIORITY) ) {
				alt149=1;
			}
			switch (alt149) {
				case 1 :
					// MySQL.g:1635:9: LOW_PRIORITY
					{
					LOW_PRIORITY498=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_single_table_update_statement22662); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY498_tree = (Object)adaptor.create(LOW_PRIORITY498);
					adaptor.addChild(root_0, LOW_PRIORITY498_tree);
					}

					}
					break;

			}

			// MySQL.g:1635:24: ( IGNORE_SYM )?
			int alt150=2;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==IGNORE_SYM) ) {
				alt150=1;
			}
			switch (alt150) {
				case 1 :
					// MySQL.g:1635:25: IGNORE_SYM
					{
					IGNORE_SYM499=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_single_table_update_statement22667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM499_tree = (Object)adaptor.create(IGNORE_SYM499);
					adaptor.addChild(root_0, IGNORE_SYM499_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_reference_in_single_table_update_statement22671);
			table_reference500=table_reference();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference500.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_single_table_update_statement22674);
			set_columns_cluase501=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase501.getTree());

			// MySQL.g:1637:2: ( where_clause )?
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==WHERE) ) {
				alt151=1;
			}
			switch (alt151) {
				case 1 :
					// MySQL.g:1637:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_single_table_update_statement22678);
					where_clause502=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause502.getTree());

					}
					break;

			}

			// MySQL.g:1638:2: ( orderby_clause )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==ORDER_SYM) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// MySQL.g:1638:3: orderby_clause
					{
					pushFollow(FOLLOW_orderby_clause_in_single_table_update_statement22684);
					orderby_clause503=orderby_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, orderby_clause503.getTree());

					}
					break;

			}

			// MySQL.g:1639:2: ( limit_clause )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==INTEGER_NUM||LA153_0==LIMIT) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// MySQL.g:1639:3: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_single_table_update_statement22690);
					limit_clause504=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause504.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_update_statement"


	public static class multiple_table_update_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "multiple_table_update_statement"
	// MySQL.g:1642:1: multiple_table_update_statement : UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )? ;
	public final MySQLParser.multiple_table_update_statement_return multiple_table_update_statement() throws RecognitionException {
		MySQLParser.multiple_table_update_statement_return retval = new MySQLParser.multiple_table_update_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UPDATE505=null;
		Token LOW_PRIORITY506=null;
		Token IGNORE_SYM507=null;
		ParserRuleReturnScope table_references508 =null;
		ParserRuleReturnScope set_columns_cluase509 =null;
		ParserRuleReturnScope where_clause510 =null;

		Object UPDATE505_tree=null;
		Object LOW_PRIORITY506_tree=null;
		Object IGNORE_SYM507_tree=null;

		try {
			// MySQL.g:1642:32: ( UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )? )
			// MySQL.g:1643:2: UPDATE ( LOW_PRIORITY )? ( IGNORE_SYM )? table_references set_columns_cluase ( where_clause )?
			{
			root_0 = (Object)adaptor.nil();


			UPDATE505=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_multiple_table_update_statement22702); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPDATE505_tree = (Object)adaptor.create(UPDATE505);
			adaptor.addChild(root_0, UPDATE505_tree);
			}

			// MySQL.g:1643:9: ( LOW_PRIORITY )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==LOW_PRIORITY) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// MySQL.g:1643:10: LOW_PRIORITY
					{
					LOW_PRIORITY506=(Token)match(input,LOW_PRIORITY,FOLLOW_LOW_PRIORITY_in_multiple_table_update_statement22705); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOW_PRIORITY506_tree = (Object)adaptor.create(LOW_PRIORITY506);
					adaptor.addChild(root_0, LOW_PRIORITY506_tree);
					}

					}
					break;

			}

			// MySQL.g:1643:25: ( IGNORE_SYM )?
			int alt155=2;
			int LA155_0 = input.LA(1);
			if ( (LA155_0==IGNORE_SYM) ) {
				alt155=1;
			}
			switch (alt155) {
				case 1 :
					// MySQL.g:1643:26: IGNORE_SYM
					{
					IGNORE_SYM507=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_multiple_table_update_statement22710); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM507_tree = (Object)adaptor.create(IGNORE_SYM507);
					adaptor.addChild(root_0, IGNORE_SYM507_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_references_in_multiple_table_update_statement22714);
			table_references508=table_references();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_references508.getTree());

			pushFollow(FOLLOW_set_columns_cluase_in_multiple_table_update_statement22717);
			set_columns_cluase509=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase509.getTree());

			// MySQL.g:1645:2: ( where_clause )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==WHERE) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// MySQL.g:1645:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_multiple_table_update_statement22721);
					where_clause510=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause510.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multiple_table_update_statement"


	public static class call_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "call_statement"
	// MySQL.g:1654:1: call_statement : CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )? ;
	public final MySQLParser.call_statement_return call_statement() throws RecognitionException {
		MySQLParser.call_statement_return retval = new MySQLParser.call_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CALL_SYM511=null;
		Token LPAREN513=null;
		Token COMMA515=null;
		Token RPAREN517=null;
		ParserRuleReturnScope procedure_name512 =null;
		ParserRuleReturnScope bit_expr514 =null;
		ParserRuleReturnScope bit_expr516 =null;

		Object CALL_SYM511_tree=null;
		Object LPAREN513_tree=null;
		Object COMMA515_tree=null;
		Object RPAREN517_tree=null;

		try {
			// MySQL.g:1654:15: ( CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )? )
			// MySQL.g:1655:2: CALL_SYM procedure_name ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )?
			{
			root_0 = (Object)adaptor.nil();


			CALL_SYM511=(Token)match(input,CALL_SYM,FOLLOW_CALL_SYM_in_call_statement22738); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CALL_SYM511_tree = (Object)adaptor.create(CALL_SYM511);
			adaptor.addChild(root_0, CALL_SYM511_tree);
			}

			pushFollow(FOLLOW_procedure_name_in_call_statement22740);
			procedure_name512=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name512.getTree());

			// MySQL.g:1655:26: ( LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==LPAREN) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// MySQL.g:1655:27: LPAREN ( bit_expr ( COMMA bit_expr )* )? RPAREN
					{
					LPAREN513=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_call_statement22743); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN513_tree = (Object)adaptor.create(LPAREN513);
					adaptor.addChild(root_0, LPAREN513_tree);
					}

					// MySQL.g:1655:34: ( bit_expr ( COMMA bit_expr )* )?
					int alt158=2;
					int LA158_0 = input.LA(1);
					if ( (LA158_0==ABS||LA158_0==ACOS||(LA158_0 >= ADDDATE && LA158_0 <= ADDTIME)||(LA158_0 >= AES_DECRYPT && LA158_0 <= AES_ENCRYPT)||LA158_0==ASCII_SYM||LA158_0==ASIN||(LA158_0 >= ATAN && LA158_0 <= ATAN2)||LA158_0==AVG||LA158_0==BENCHMARK||(LA158_0 >= BIN && LA158_0 <= BINARY)||(LA158_0 >= BIT_AND && LA158_0 <= BIT_OR)||LA158_0==BIT_XOR||(LA158_0 >= CASE_SYM && LA158_0 <= CEILING)||LA158_0==CHAR||(LA158_0 >= CHARSET && LA158_0 <= CHAR_LENGTH)||LA158_0==COERCIBILITY||LA158_0==COLLATION||(LA158_0 >= CONCAT && LA158_0 <= CONCAT_WS)||LA158_0==CONNECTION_ID||(LA158_0 >= CONV && LA158_0 <= CONVERT_TZ)||(LA158_0 >= COS && LA158_0 <= COUNT)||LA158_0==CRC32||LA158_0==CURDATE||LA158_0==CURRENT_USER||LA158_0==CURTIME||LA158_0==DATABASE||LA158_0==DATEDIFF||(LA158_0 >= DATE_ADD && LA158_0 <= DAYOFYEAR)||(LA158_0 >= DECODE && LA158_0 <= DEFAULT)||LA158_0==DEGREES||(LA158_0 >= DES_DECRYPT && LA158_0 <= DES_ENCRYPT)||LA158_0==ELT||(LA158_0 >= ENCODE && LA158_0 <= ENCRYPT)||LA158_0==EXISTS||LA158_0==EXP||LA158_0==EXPORT_SET||LA158_0==EXTRACT||LA158_0==FALSE_SYM||LA158_0==FIELD||LA158_0==FIND_IN_SET||LA158_0==FLOOR||LA158_0==FORMAT||LA158_0==FOUND_ROWS||(LA158_0 >= FROM_BASE64 && LA158_0 <= FROM_UNIXTIME)||(LA158_0 >= GET_FORMAT && LA158_0 <= GET_LOCK)||LA158_0==GROUP_CONCAT||(LA158_0 >= HEX && LA158_0 <= HEX_DIGIT)||LA158_0==HOUR||LA158_0==ID||(LA158_0 >= IF && LA158_0 <= IFNULL)||(LA158_0 >= INET_ATON && LA158_0 <= INET_NTOA)||LA158_0==INSERT||(LA158_0 >= INSTR && LA158_0 <= INTEGER_NUM)||LA158_0==INTERVAL_SYM||LA158_0==IS_FREE_LOCK||LA158_0==IS_USED_LOCK||(LA158_0 >= LAST_DAY && LA158_0 <= LAST_INSERT_ID)||(LA158_0 >= LEFT && LA158_0 <= LENGTH)||LA158_0==LN||LA158_0==LOAD_FILE||LA158_0==LOCATE||(LA158_0 >= LOG && LA158_0 <= LOG2)||LA158_0==LOWER||(LA158_0 >= LPAD && LA158_0 <= LPAREN)||LA158_0==LTRIM||(LA158_0 >= MAKEDATE && LA158_0 <= MAKE_SET)||LA158_0==MASTER_POS_WAIT||LA158_0==MATCH||LA158_0==MAX_SYM||LA158_0==MD5||(LA158_0 >= MICROSECOND && LA158_0 <= MID)||(LA158_0 >= MINUS && LA158_0 <= MINUTE)||LA158_0==MIN_SYM||LA158_0==MOD||(LA158_0 >= MONTH && LA158_0 <= MONTHNAME)||LA158_0==NAME_CONST||LA158_0==NEGATION||LA158_0==NOW||LA158_0==NULL_SYM||LA158_0==OCT||LA158_0==OLD_PASSWORD||LA158_0==ORD||(LA158_0 >= PASSWORD && LA158_0 <= PERIOD_DIFF)||LA158_0==PI||LA158_0==PLUS||(LA158_0 >= POW && LA158_0 <= POWER)||LA158_0==QUARTER||LA158_0==QUOTE||(LA158_0 >= RADIANS && LA158_0 <= RAND)||LA158_0==REAL_NUMBER||LA158_0==RELEASE_LOCK||LA158_0==REPEAT||LA158_0==REPLACE||LA158_0==REVERSE||LA158_0==RIGHT||LA158_0==ROUND||(LA158_0 >= ROW_SYM && LA158_0 <= RPAD)||LA158_0==RTRIM||(LA158_0 >= SCHEMA && LA158_0 <= SECOND)||LA158_0==SEC_TO_TIME||LA158_0==SESSION_USER||LA158_0==SIGN||LA158_0==SIN||LA158_0==SLEEP||LA158_0==SOUNDEX||LA158_0==SPACE||LA158_0==SQRT||(LA158_0 >= STD && LA158_0 <= STDDEV_SAMP)||LA158_0==STRCMP||LA158_0==STR_TO_DATE||(LA158_0 >= SUBSTRING && LA158_0 <= SUM)||(LA158_0 >= SYSDATE && LA158_0 <= SYSTEM_USER)||LA158_0==TAN||LA158_0==TEXT_STRING||(LA158_0 >= TIMEDIFF && LA158_0 <= TIME_TO_SEC)||(LA158_0 >= TO_BASE64 && LA158_0 <= TO_SECONDS)||(LA158_0 >= TRIM && LA158_0 <= TRUNCATE)||LA158_0==UNHEX||LA158_0==UNIX_TIMESTAMP||LA158_0==UPPER||(LA158_0 >= USER && LA158_0 <= USER_VAR)||(LA158_0 >= UTC_DATE && LA158_0 <= UTC_TIMESTAMP)||LA158_0==UUID||LA158_0==VALUES||LA158_0==VARIANCE||(LA158_0 >= VAR_POP && LA158_0 <= VERSION_SYM)||(LA158_0 >= WEEK && LA158_0 <= WEIGHT_STRING)||(LA158_0 >= YEAR && LA158_0 <= YEARWEEK)) ) {
						alt158=1;
					}
					switch (alt158) {
						case 1 :
							// MySQL.g:1655:36: bit_expr ( COMMA bit_expr )*
							{
							pushFollow(FOLLOW_bit_expr_in_call_statement22747);
							bit_expr514=bit_expr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr514.getTree());

							// MySQL.g:1655:45: ( COMMA bit_expr )*
							loop157:
							while (true) {
								int alt157=2;
								int LA157_0 = input.LA(1);
								if ( (LA157_0==COMMA) ) {
									alt157=1;
								}

								switch (alt157) {
								case 1 :
									// MySQL.g:1655:46: COMMA bit_expr
									{
									COMMA515=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_statement22750); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA515_tree = (Object)adaptor.create(COMMA515);
									adaptor.addChild(root_0, COMMA515_tree);
									}

									pushFollow(FOLLOW_bit_expr_in_call_statement22752);
									bit_expr516=bit_expr();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr516.getTree());

									}
									break;

								default :
									break loop157;
								}
							}

							}
							break;

					}

					RPAREN517=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_call_statement22759); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN517_tree = (Object)adaptor.create(RPAREN517);
					adaptor.addChild(root_0, RPAREN517_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_statement"


	public static class do_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "do_statement"
	// MySQL.g:1664:1: do_statement : DO_SYM root_statement ( COMMA root_statement )* ;
	public final MySQLParser.do_statement_return do_statement() throws RecognitionException {
		MySQLParser.do_statement_return retval = new MySQLParser.do_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DO_SYM518=null;
		Token COMMA520=null;
		ParserRuleReturnScope root_statement519 =null;
		ParserRuleReturnScope root_statement521 =null;

		Object DO_SYM518_tree=null;
		Object COMMA520_tree=null;

		try {
			// MySQL.g:1664:13: ( DO_SYM root_statement ( COMMA root_statement )* )
			// MySQL.g:1665:2: DO_SYM root_statement ( COMMA root_statement )*
			{
			root_0 = (Object)adaptor.nil();


			DO_SYM518=(Token)match(input,DO_SYM,FOLLOW_DO_SYM_in_do_statement22776); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DO_SYM518_tree = (Object)adaptor.create(DO_SYM518);
			adaptor.addChild(root_0, DO_SYM518_tree);
			}

			pushFollow(FOLLOW_root_statement_in_do_statement22778);
			root_statement519=root_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, root_statement519.getTree());

			// MySQL.g:1665:24: ( COMMA root_statement )*
			loop160:
			while (true) {
				int alt160=2;
				int LA160_0 = input.LA(1);
				if ( (LA160_0==COMMA) ) {
					int LA160_2 = input.LA(2);
					if ( (synpred489_MySQL()) ) {
						alt160=1;
					}

				}

				switch (alt160) {
				case 1 :
					// MySQL.g:1665:25: COMMA root_statement
					{
					COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_do_statement22781); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA520_tree = (Object)adaptor.create(COMMA520);
					adaptor.addChild(root_0, COMMA520_tree);
					}

					pushFollow(FOLLOW_root_statement_in_do_statement22783);
					root_statement521=root_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, root_statement521.getTree());

					}
					break;

				default :
					break loop160;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "do_statement"


	public static class handler_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statements"
	// MySQL.g:1674:1: handler_statements : HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement ) ;
	public final MySQLParser.handler_statements_return handler_statements() throws RecognitionException {
		MySQLParser.handler_statements_return retval = new MySQLParser.handler_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HANDLER_SYM522=null;
		ParserRuleReturnScope table_name523 =null;
		ParserRuleReturnScope open_handler_statement524 =null;
		ParserRuleReturnScope handler_statement1525 =null;
		ParserRuleReturnScope handler_statement2526 =null;
		ParserRuleReturnScope handler_statement3527 =null;
		ParserRuleReturnScope close_handler_statement528 =null;

		Object HANDLER_SYM522_tree=null;

		try {
			// MySQL.g:1674:19: ( HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement ) )
			// MySQL.g:1675:2: HANDLER_SYM table_name ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement )
			{
			root_0 = (Object)adaptor.nil();


			HANDLER_SYM522=(Token)match(input,HANDLER_SYM,FOLLOW_HANDLER_SYM_in_handler_statements22800); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			HANDLER_SYM522_tree = (Object)adaptor.create(HANDLER_SYM522);
			adaptor.addChild(root_0, HANDLER_SYM522_tree);
			}

			pushFollow(FOLLOW_table_name_in_handler_statements22802);
			table_name523=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name523.getTree());

			// MySQL.g:1676:2: ( open_handler_statement | handler_statement1 | handler_statement2 | handler_statement3 | close_handler_statement )
			int alt161=5;
			switch ( input.LA(1) ) {
			case OPEN_SYM:
				{
				alt161=1;
				}
				break;
			case READ_SYM:
				{
				int LA161_2 = input.LA(2);
				if ( (LA161_2==FIRST_SYM||LA161_2==NEXT_SYM) ) {
					alt161=4;
				}
				else if ( (LA161_2==ID) ) {
					int LA161_5 = input.LA(3);
					if ( (LA161_5==EQ_SYM||LA161_5==GET||LA161_5==GTH||LA161_5==LET||LA161_5==LTH||LA161_5==NOT_EQ) ) {
						alt161=2;
					}
					else if ( (LA161_5==FIRST_SYM||LA161_5==LAST_SYM||LA161_5==NEXT_SYM||LA161_5==PREV_SYM) ) {
						alt161=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 161, 5, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 161, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CLOSE_SYM:
				{
				alt161=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}
			switch (alt161) {
				case 1 :
					// MySQL.g:1676:3: open_handler_statement
					{
					pushFollow(FOLLOW_open_handler_statement_in_handler_statements22806);
					open_handler_statement524=open_handler_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, open_handler_statement524.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1676:28: handler_statement1
					{
					pushFollow(FOLLOW_handler_statement1_in_handler_statements22810);
					handler_statement1525=handler_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement1525.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1676:49: handler_statement2
					{
					pushFollow(FOLLOW_handler_statement2_in_handler_statements22814);
					handler_statement2526=handler_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement2526.getTree());

					}
					break;
				case 4 :
					// MySQL.g:1676:70: handler_statement3
					{
					pushFollow(FOLLOW_handler_statement3_in_handler_statements22818);
					handler_statement3527=handler_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, handler_statement3527.getTree());

					}
					break;
				case 5 :
					// MySQL.g:1676:91: close_handler_statement
					{
					pushFollow(FOLLOW_close_handler_statement_in_handler_statements22822);
					close_handler_statement528=close_handler_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, close_handler_statement528.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statements"


	public static class open_handler_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "open_handler_statement"
	// MySQL.g:1679:1: open_handler_statement : OPEN_SYM ( alias )? ;
	public final MySQLParser.open_handler_statement_return open_handler_statement() throws RecognitionException {
		MySQLParser.open_handler_statement_return retval = new MySQLParser.open_handler_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token OPEN_SYM529=null;
		ParserRuleReturnScope alias530 =null;

		Object OPEN_SYM529_tree=null;

		try {
			// MySQL.g:1679:23: ( OPEN_SYM ( alias )? )
			// MySQL.g:1680:2: OPEN_SYM ( alias )?
			{
			root_0 = (Object)adaptor.nil();


			OPEN_SYM529=(Token)match(input,OPEN_SYM,FOLLOW_OPEN_SYM_in_open_handler_statement22832); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPEN_SYM529_tree = (Object)adaptor.create(OPEN_SYM529);
			adaptor.addChild(root_0, OPEN_SYM529_tree);
			}

			// MySQL.g:1680:11: ( alias )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==AS_SYM||LA162_0==ID) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// MySQL.g:1680:12: alias
					{
					pushFollow(FOLLOW_alias_in_open_handler_statement22835);
					alias530=alias();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alias530.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_handler_statement"


	public static class handler_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statement1"
	// MySQL.g:1683:1: handler_statement1 : READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )? ;
	public final MySQLParser.handler_statement1_return handler_statement1() throws RecognitionException {
		MySQLParser.handler_statement1_return retval = new MySQLParser.handler_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token READ_SYM531=null;
		Token LPAREN534=null;
		Token COMMA536=null;
		Token RPAREN538=null;
		ParserRuleReturnScope index_name532 =null;
		ParserRuleReturnScope relational_op533 =null;
		ParserRuleReturnScope bit_expr535 =null;
		ParserRuleReturnScope bit_expr537 =null;
		ParserRuleReturnScope where_clause539 =null;
		ParserRuleReturnScope limit_clause540 =null;

		Object READ_SYM531_tree=null;
		Object LPAREN534_tree=null;
		Object COMMA536_tree=null;
		Object RPAREN538_tree=null;

		try {
			// MySQL.g:1683:19: ( READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )? )
			// MySQL.g:1684:2: READ_SYM index_name relational_op LPAREN bit_expr ( COMMA bit_expr )* RPAREN ( where_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			READ_SYM531=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement122846); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM531_tree = (Object)adaptor.create(READ_SYM531);
			adaptor.addChild(root_0, READ_SYM531_tree);
			}

			pushFollow(FOLLOW_index_name_in_handler_statement122848);
			index_name532=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name532.getTree());

			pushFollow(FOLLOW_relational_op_in_handler_statement122850);
			relational_op533=relational_op();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op533.getTree());

			LPAREN534=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_handler_statement122852); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN534_tree = (Object)adaptor.create(LPAREN534);
			adaptor.addChild(root_0, LPAREN534_tree);
			}

			pushFollow(FOLLOW_bit_expr_in_handler_statement122854);
			bit_expr535=bit_expr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr535.getTree());

			// MySQL.g:1684:52: ( COMMA bit_expr )*
			loop163:
			while (true) {
				int alt163=2;
				int LA163_0 = input.LA(1);
				if ( (LA163_0==COMMA) ) {
					alt163=1;
				}

				switch (alt163) {
				case 1 :
					// MySQL.g:1684:53: COMMA bit_expr
					{
					COMMA536=(Token)match(input,COMMA,FOLLOW_COMMA_in_handler_statement122857); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA536_tree = (Object)adaptor.create(COMMA536);
					adaptor.addChild(root_0, COMMA536_tree);
					}

					pushFollow(FOLLOW_bit_expr_in_handler_statement122859);
					bit_expr537=bit_expr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_expr537.getTree());

					}
					break;

				default :
					break loop163;
				}
			}

			RPAREN538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_handler_statement122863); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN538_tree = (Object)adaptor.create(RPAREN538);
			adaptor.addChild(root_0, RPAREN538_tree);
			}

			// MySQL.g:1685:2: ( where_clause )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==WHERE) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// MySQL.g:1685:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement122867);
					where_clause539=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause539.getTree());

					}
					break;

			}

			// MySQL.g:1685:18: ( limit_clause )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==INTEGER_NUM||LA165_0==LIMIT) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// MySQL.g:1685:19: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement122872);
					limit_clause540=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause540.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement1"


	public static class handler_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statement2"
	// MySQL.g:1688:1: handler_statement2 : READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )? ;
	public final MySQLParser.handler_statement2_return handler_statement2() throws RecognitionException {
		MySQLParser.handler_statement2_return retval = new MySQLParser.handler_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token READ_SYM541=null;
		Token set543=null;
		ParserRuleReturnScope index_name542 =null;
		ParserRuleReturnScope where_clause544 =null;
		ParserRuleReturnScope limit_clause545 =null;

		Object READ_SYM541_tree=null;
		Object set543_tree=null;

		try {
			// MySQL.g:1688:19: ( READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )? )
			// MySQL.g:1689:2: READ_SYM index_name ( FIRST_SYM | NEXT_SYM | PREV_SYM | LAST_SYM ) ( where_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			READ_SYM541=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement222883); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM541_tree = (Object)adaptor.create(READ_SYM541);
			adaptor.addChild(root_0, READ_SYM541_tree);
			}

			pushFollow(FOLLOW_index_name_in_handler_statement222885);
			index_name542=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name542.getTree());

			set543=input.LT(1);
			if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NEXT_SYM||input.LA(1)==PREV_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set543));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// MySQL.g:1690:2: ( where_clause )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==WHERE) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// MySQL.g:1690:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement222905);
					where_clause544=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause544.getTree());

					}
					break;

			}

			// MySQL.g:1690:18: ( limit_clause )?
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==INTEGER_NUM||LA167_0==LIMIT) ) {
				alt167=1;
			}
			switch (alt167) {
				case 1 :
					// MySQL.g:1690:19: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement222910);
					limit_clause545=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause545.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement2"


	public static class handler_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "handler_statement3"
	// MySQL.g:1693:1: handler_statement3 : READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )? ;
	public final MySQLParser.handler_statement3_return handler_statement3() throws RecognitionException {
		MySQLParser.handler_statement3_return retval = new MySQLParser.handler_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token READ_SYM546=null;
		Token set547=null;
		ParserRuleReturnScope where_clause548 =null;
		ParserRuleReturnScope limit_clause549 =null;

		Object READ_SYM546_tree=null;
		Object set547_tree=null;

		try {
			// MySQL.g:1693:19: ( READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )? )
			// MySQL.g:1694:2: READ_SYM ( FIRST_SYM | NEXT_SYM ) ( where_clause )? ( limit_clause )?
			{
			root_0 = (Object)adaptor.nil();


			READ_SYM546=(Token)match(input,READ_SYM,FOLLOW_READ_SYM_in_handler_statement322921); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			READ_SYM546_tree = (Object)adaptor.create(READ_SYM546);
			adaptor.addChild(root_0, READ_SYM546_tree);
			}

			set547=input.LT(1);
			if ( input.LA(1)==FIRST_SYM||input.LA(1)==NEXT_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set547));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// MySQL.g:1695:2: ( where_clause )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==WHERE) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// MySQL.g:1695:3: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_handler_statement322933);
					where_clause548=where_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause548.getTree());

					}
					break;

			}

			// MySQL.g:1695:18: ( limit_clause )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==INTEGER_NUM||LA169_0==LIMIT) ) {
				alt169=1;
			}
			switch (alt169) {
				case 1 :
					// MySQL.g:1695:19: limit_clause
					{
					pushFollow(FOLLOW_limit_clause_in_handler_statement322938);
					limit_clause549=limit_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, limit_clause549.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "handler_statement3"


	public static class close_handler_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "close_handler_statement"
	// MySQL.g:1698:1: close_handler_statement : CLOSE_SYM ;
	public final MySQLParser.close_handler_statement_return close_handler_statement() throws RecognitionException {
		MySQLParser.close_handler_statement_return retval = new MySQLParser.close_handler_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CLOSE_SYM550=null;

		Object CLOSE_SYM550_tree=null;

		try {
			// MySQL.g:1698:24: ( CLOSE_SYM )
			// MySQL.g:1699:2: CLOSE_SYM
			{
			root_0 = (Object)adaptor.nil();


			CLOSE_SYM550=(Token)match(input,CLOSE_SYM,FOLLOW_CLOSE_SYM_in_close_handler_statement22949); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CLOSE_SYM550_tree = (Object)adaptor.create(CLOSE_SYM550);
			adaptor.addChild(root_0, CLOSE_SYM550_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_handler_statement"


	public static class load_data_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "load_data_statement"
	// MySQL.g:1709:1: load_data_statement : LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? ;
	public final MySQLParser.load_data_statement_return load_data_statement() throws RecognitionException {
		MySQLParser.load_data_statement_return retval = new MySQLParser.load_data_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LOAD551=null;
		Token DATA_SYM552=null;
		Token set553=null;
		Token LOCAL_SYM554=null;
		Token INFILE555=null;
		Token TEXT_STRING556=null;
		Token set557=null;
		Token INTO558=null;
		Token TABLE559=null;
		Token CHARACTER_SYM562=null;
		Token SET_SYM563=null;
		Token set565=null;
		Token TERMINATED566=null;
		Token BY_SYM567=null;
		Token TEXT_STRING568=null;
		Token OPTIONALLY569=null;
		Token ENCLOSED570=null;
		Token BY_SYM571=null;
		Token TEXT_STRING572=null;
		Token ESCAPED573=null;
		Token BY_SYM574=null;
		Token TEXT_STRING575=null;
		Token LINES576=null;
		Token STARTING577=null;
		Token BY_SYM578=null;
		Token TEXT_STRING579=null;
		Token TERMINATED580=null;
		Token BY_SYM581=null;
		Token TEXT_STRING582=null;
		Token IGNORE_SYM583=null;
		Token INTEGER_NUM584=null;
		Token set585=null;
		Token LPAREN586=null;
		Token USER_VAR588=null;
		Token COMMA589=null;
		Token USER_VAR591=null;
		Token RPAREN592=null;
		ParserRuleReturnScope table_spec560 =null;
		ParserRuleReturnScope partition_clause561 =null;
		ParserRuleReturnScope charset_name564 =null;
		ParserRuleReturnScope column_spec587 =null;
		ParserRuleReturnScope column_spec590 =null;
		ParserRuleReturnScope set_columns_cluase593 =null;

		Object LOAD551_tree=null;
		Object DATA_SYM552_tree=null;
		Object set553_tree=null;
		Object LOCAL_SYM554_tree=null;
		Object INFILE555_tree=null;
		Object TEXT_STRING556_tree=null;
		Object set557_tree=null;
		Object INTO558_tree=null;
		Object TABLE559_tree=null;
		Object CHARACTER_SYM562_tree=null;
		Object SET_SYM563_tree=null;
		Object set565_tree=null;
		Object TERMINATED566_tree=null;
		Object BY_SYM567_tree=null;
		Object TEXT_STRING568_tree=null;
		Object OPTIONALLY569_tree=null;
		Object ENCLOSED570_tree=null;
		Object BY_SYM571_tree=null;
		Object TEXT_STRING572_tree=null;
		Object ESCAPED573_tree=null;
		Object BY_SYM574_tree=null;
		Object TEXT_STRING575_tree=null;
		Object LINES576_tree=null;
		Object STARTING577_tree=null;
		Object BY_SYM578_tree=null;
		Object TEXT_STRING579_tree=null;
		Object TERMINATED580_tree=null;
		Object BY_SYM581_tree=null;
		Object TEXT_STRING582_tree=null;
		Object IGNORE_SYM583_tree=null;
		Object INTEGER_NUM584_tree=null;
		Object set585_tree=null;
		Object LPAREN586_tree=null;
		Object USER_VAR588_tree=null;
		Object COMMA589_tree=null;
		Object USER_VAR591_tree=null;
		Object RPAREN592_tree=null;

		try {
			// MySQL.g:1709:20: ( LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? )
			// MySQL.g:1710:2: LOAD DATA_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )? ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )?
			{
			root_0 = (Object)adaptor.nil();


			LOAD551=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_data_statement22965); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOAD551_tree = (Object)adaptor.create(LOAD551);
			adaptor.addChild(root_0, LOAD551_tree);
			}

			DATA_SYM552=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_load_data_statement22967); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM552_tree = (Object)adaptor.create(DATA_SYM552);
			adaptor.addChild(root_0, DATA_SYM552_tree);
			}

			// MySQL.g:1710:16: ( LOW_PRIORITY | CONCURRENT )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==CONCURRENT||LA170_0==LOW_PRIORITY) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// MySQL.g:
					{
					set553=input.LT(1);
					if ( input.LA(1)==CONCURRENT||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set553));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1710:45: ( LOCAL_SYM )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==LOCAL_SYM) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// MySQL.g:1710:46: LOCAL_SYM
					{
					LOCAL_SYM554=(Token)match(input,LOCAL_SYM,FOLLOW_LOCAL_SYM_in_load_data_statement22979); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCAL_SYM554_tree = (Object)adaptor.create(LOCAL_SYM554);
					adaptor.addChild(root_0, LOCAL_SYM554_tree);
					}

					}
					break;

			}

			INFILE555=(Token)match(input,INFILE,FOLLOW_INFILE_in_load_data_statement22983); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INFILE555_tree = (Object)adaptor.create(INFILE555);
			adaptor.addChild(root_0, INFILE555_tree);
			}

			TEXT_STRING556=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement22985); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING556_tree = (Object)adaptor.create(TEXT_STRING556);
			adaptor.addChild(root_0, TEXT_STRING556_tree);
			}

			// MySQL.g:1711:2: ( REPLACE | IGNORE_SYM )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==IGNORE_SYM||LA172_0==REPLACE) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// MySQL.g:
					{
					set557=input.LT(1);
					if ( input.LA(1)==IGNORE_SYM||input.LA(1)==REPLACE ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set557));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INTO558=(Token)match(input,INTO,FOLLOW_INTO_in_load_data_statement22998); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTO558_tree = (Object)adaptor.create(INTO558);
			adaptor.addChild(root_0, INTO558_tree);
			}

			TABLE559=(Token)match(input,TABLE,FOLLOW_TABLE_in_load_data_statement23000); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE559_tree = (Object)adaptor.create(TABLE559);
			adaptor.addChild(root_0, TABLE559_tree);
			}

			pushFollow(FOLLOW_table_spec_in_load_data_statement23002);
			table_spec560=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec560.getTree());

			// MySQL.g:1713:2: ( partition_clause )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==PARTITION_SYM) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// MySQL.g:1713:3: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_load_data_statement23006);
					partition_clause561=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause561.getTree());

					}
					break;

			}

			// MySQL.g:1714:2: ( CHARACTER_SYM SET_SYM charset_name )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==CHARACTER_SYM) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// MySQL.g:1714:3: CHARACTER_SYM SET_SYM charset_name
					{
					CHARACTER_SYM562=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_load_data_statement23012); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM562_tree = (Object)adaptor.create(CHARACTER_SYM562);
					adaptor.addChild(root_0, CHARACTER_SYM562_tree);
					}

					SET_SYM563=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_load_data_statement23014); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM563_tree = (Object)adaptor.create(SET_SYM563);
					adaptor.addChild(root_0, SET_SYM563_tree);
					}

					pushFollow(FOLLOW_charset_name_in_load_data_statement23016);
					charset_name564=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name564.getTree());

					}
					break;

			}

			// MySQL.g:1715:2: ( ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )? )?
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==COLUMNS_SYM||LA179_0==FIELDS_SYM) ) {
				alt179=1;
			}
			switch (alt179) {
				case 1 :
					// MySQL.g:1716:3: ( FIELDS_SYM | COLUMNS_SYM ) ( TERMINATED BY_SYM TEXT_STRING )? ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )? ( ESCAPED BY_SYM TEXT_STRING )?
					{
					set565=input.LT(1);
					if ( input.LA(1)==COLUMNS_SYM||input.LA(1)==FIELDS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set565));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// MySQL.g:1717:3: ( TERMINATED BY_SYM TEXT_STRING )?
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==TERMINATED) ) {
						alt175=1;
					}
					switch (alt175) {
						case 1 :
							// MySQL.g:1717:4: TERMINATED BY_SYM TEXT_STRING
							{
							TERMINATED566=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_load_data_statement23036); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TERMINATED566_tree = (Object)adaptor.create(TERMINATED566);
							adaptor.addChild(root_0, TERMINATED566_tree);
							}

							BY_SYM567=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement23038); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM567_tree = (Object)adaptor.create(BY_SYM567);
							adaptor.addChild(root_0, BY_SYM567_tree);
							}

							TEXT_STRING568=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement23040); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING568_tree = (Object)adaptor.create(TEXT_STRING568);
							adaptor.addChild(root_0, TEXT_STRING568_tree);
							}

							}
							break;

					}

					// MySQL.g:1718:3: ( ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==ENCLOSED||LA177_0==OPTIONALLY) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// MySQL.g:1718:4: ( OPTIONALLY )? ENCLOSED BY_SYM TEXT_STRING
							{
							// MySQL.g:1718:4: ( OPTIONALLY )?
							int alt176=2;
							int LA176_0 = input.LA(1);
							if ( (LA176_0==OPTIONALLY) ) {
								alt176=1;
							}
							switch (alt176) {
								case 1 :
									// MySQL.g:1718:5: OPTIONALLY
									{
									OPTIONALLY569=(Token)match(input,OPTIONALLY,FOLLOW_OPTIONALLY_in_load_data_statement23048); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									OPTIONALLY569_tree = (Object)adaptor.create(OPTIONALLY569);
									adaptor.addChild(root_0, OPTIONALLY569_tree);
									}

									}
									break;

							}

							ENCLOSED570=(Token)match(input,ENCLOSED,FOLLOW_ENCLOSED_in_load_data_statement23052); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ENCLOSED570_tree = (Object)adaptor.create(ENCLOSED570);
							adaptor.addChild(root_0, ENCLOSED570_tree);
							}

							BY_SYM571=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement23054); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM571_tree = (Object)adaptor.create(BY_SYM571);
							adaptor.addChild(root_0, BY_SYM571_tree);
							}

							TEXT_STRING572=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement23056); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING572_tree = (Object)adaptor.create(TEXT_STRING572);
							adaptor.addChild(root_0, TEXT_STRING572_tree);
							}

							}
							break;

					}

					// MySQL.g:1719:3: ( ESCAPED BY_SYM TEXT_STRING )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==ESCAPED) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// MySQL.g:1719:4: ESCAPED BY_SYM TEXT_STRING
							{
							ESCAPED573=(Token)match(input,ESCAPED,FOLLOW_ESCAPED_in_load_data_statement23063); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ESCAPED573_tree = (Object)adaptor.create(ESCAPED573);
							adaptor.addChild(root_0, ESCAPED573_tree);
							}

							BY_SYM574=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement23065); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM574_tree = (Object)adaptor.create(BY_SYM574);
							adaptor.addChild(root_0, BY_SYM574_tree);
							}

							TEXT_STRING575=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement23067); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING575_tree = (Object)adaptor.create(TEXT_STRING575);
							adaptor.addChild(root_0, TEXT_STRING575_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// MySQL.g:1721:2: ( LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )? )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==LINES) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// MySQL.g:1722:3: LINES ( STARTING BY_SYM TEXT_STRING )? ( TERMINATED BY_SYM TEXT_STRING )?
					{
					LINES576=(Token)match(input,LINES,FOLLOW_LINES_in_load_data_statement23080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LINES576_tree = (Object)adaptor.create(LINES576);
					adaptor.addChild(root_0, LINES576_tree);
					}

					// MySQL.g:1723:3: ( STARTING BY_SYM TEXT_STRING )?
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==STARTING) ) {
						alt180=1;
					}
					switch (alt180) {
						case 1 :
							// MySQL.g:1723:4: STARTING BY_SYM TEXT_STRING
							{
							STARTING577=(Token)match(input,STARTING,FOLLOW_STARTING_in_load_data_statement23085); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STARTING577_tree = (Object)adaptor.create(STARTING577);
							adaptor.addChild(root_0, STARTING577_tree);
							}

							BY_SYM578=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement23087); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM578_tree = (Object)adaptor.create(BY_SYM578);
							adaptor.addChild(root_0, BY_SYM578_tree);
							}

							TEXT_STRING579=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement23089); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING579_tree = (Object)adaptor.create(TEXT_STRING579);
							adaptor.addChild(root_0, TEXT_STRING579_tree);
							}

							}
							break;

					}

					// MySQL.g:1724:3: ( TERMINATED BY_SYM TEXT_STRING )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==TERMINATED) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// MySQL.g:1724:4: TERMINATED BY_SYM TEXT_STRING
							{
							TERMINATED580=(Token)match(input,TERMINATED,FOLLOW_TERMINATED_in_load_data_statement23096); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TERMINATED580_tree = (Object)adaptor.create(TERMINATED580);
							adaptor.addChild(root_0, TERMINATED580_tree);
							}

							BY_SYM581=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_data_statement23098); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BY_SYM581_tree = (Object)adaptor.create(BY_SYM581);
							adaptor.addChild(root_0, BY_SYM581_tree);
							}

							TEXT_STRING582=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_data_statement23100); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING582_tree = (Object)adaptor.create(TEXT_STRING582);
							adaptor.addChild(root_0, TEXT_STRING582_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// MySQL.g:1726:2: ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==IGNORE_SYM) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// MySQL.g:1726:3: IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM )
					{
					IGNORE_SYM583=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_load_data_statement23110); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM583_tree = (Object)adaptor.create(IGNORE_SYM583);
					adaptor.addChild(root_0, IGNORE_SYM583_tree);
					}

					INTEGER_NUM584=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_load_data_statement23112); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM584_tree = (Object)adaptor.create(INTEGER_NUM584);
					adaptor.addChild(root_0, INTEGER_NUM584_tree);
					}

					set585=input.LT(1);
					if ( input.LA(1)==LINES||input.LA(1)==ROWS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set585));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1727:2: ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==LPAREN) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// MySQL.g:1727:3: LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN
					{
					LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_load_data_statement23126); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN586_tree = (Object)adaptor.create(LPAREN586);
					adaptor.addChild(root_0, LPAREN586_tree);
					}

					// MySQL.g:1727:10: ( column_spec | USER_VAR )
					int alt184=2;
					int LA184_0 = input.LA(1);
					if ( (LA184_0==ID) ) {
						alt184=1;
					}
					else if ( (LA184_0==USER_VAR) ) {
						alt184=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 184, 0, input);
						throw nvae;
					}

					switch (alt184) {
						case 1 :
							// MySQL.g:1727:11: column_spec
							{
							pushFollow(FOLLOW_column_spec_in_load_data_statement23129);
							column_spec587=column_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec587.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1727:23: USER_VAR
							{
							USER_VAR588=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_data_statement23131); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							USER_VAR588_tree = (Object)adaptor.create(USER_VAR588);
							adaptor.addChild(root_0, USER_VAR588_tree);
							}

							}
							break;

					}

					// MySQL.g:1727:33: ( COMMA ( column_spec | USER_VAR ) )*
					loop186:
					while (true) {
						int alt186=2;
						int LA186_0 = input.LA(1);
						if ( (LA186_0==COMMA) ) {
							alt186=1;
						}

						switch (alt186) {
						case 1 :
							// MySQL.g:1727:34: COMMA ( column_spec | USER_VAR )
							{
							COMMA589=(Token)match(input,COMMA,FOLLOW_COMMA_in_load_data_statement23135); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA589_tree = (Object)adaptor.create(COMMA589);
							adaptor.addChild(root_0, COMMA589_tree);
							}

							// MySQL.g:1727:40: ( column_spec | USER_VAR )
							int alt185=2;
							int LA185_0 = input.LA(1);
							if ( (LA185_0==ID) ) {
								alt185=1;
							}
							else if ( (LA185_0==USER_VAR) ) {
								alt185=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 185, 0, input);
								throw nvae;
							}

							switch (alt185) {
								case 1 :
									// MySQL.g:1727:41: column_spec
									{
									pushFollow(FOLLOW_column_spec_in_load_data_statement23138);
									column_spec590=column_spec();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec590.getTree());

									}
									break;
								case 2 :
									// MySQL.g:1727:53: USER_VAR
									{
									USER_VAR591=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_data_statement23140); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									USER_VAR591_tree = (Object)adaptor.create(USER_VAR591);
									adaptor.addChild(root_0, USER_VAR591_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop186;
						}
					}

					RPAREN592=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_load_data_statement23145); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN592_tree = (Object)adaptor.create(RPAREN592);
					adaptor.addChild(root_0, RPAREN592_tree);
					}

					}
					break;

			}

			// MySQL.g:1728:2: ( set_columns_cluase )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==SET_SYM) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// MySQL.g:1728:3: set_columns_cluase
					{
					pushFollow(FOLLOW_set_columns_cluase_in_load_data_statement23151);
					set_columns_cluase593=set_columns_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase593.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "load_data_statement"


	public static class load_xml_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "load_xml_statement"
	// MySQL.g:1737:1: load_xml_statement : LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? ;
	public final MySQLParser.load_xml_statement_return load_xml_statement() throws RecognitionException {
		MySQLParser.load_xml_statement_return retval = new MySQLParser.load_xml_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LOAD594=null;
		Token XML_SYM595=null;
		Token set596=null;
		Token LOCAL_SYM597=null;
		Token INFILE598=null;
		Token TEXT_STRING599=null;
		Token set600=null;
		Token INTO601=null;
		Token TABLE602=null;
		Token CHARACTER_SYM605=null;
		Token SET_SYM606=null;
		Token ROWS_SYM608=null;
		Token IDENTIFIED_SYM609=null;
		Token BY_SYM610=null;
		Token TEXT_STRING611=null;
		Token IGNORE_SYM612=null;
		Token INTEGER_NUM613=null;
		Token set614=null;
		Token LPAREN615=null;
		Token USER_VAR617=null;
		Token COMMA618=null;
		Token USER_VAR620=null;
		Token RPAREN621=null;
		ParserRuleReturnScope table_spec603 =null;
		ParserRuleReturnScope partition_clause604 =null;
		ParserRuleReturnScope charset_name607 =null;
		ParserRuleReturnScope column_spec616 =null;
		ParserRuleReturnScope column_spec619 =null;
		ParserRuleReturnScope set_columns_cluase622 =null;

		Object LOAD594_tree=null;
		Object XML_SYM595_tree=null;
		Object set596_tree=null;
		Object LOCAL_SYM597_tree=null;
		Object INFILE598_tree=null;
		Object TEXT_STRING599_tree=null;
		Object set600_tree=null;
		Object INTO601_tree=null;
		Object TABLE602_tree=null;
		Object CHARACTER_SYM605_tree=null;
		Object SET_SYM606_tree=null;
		Object ROWS_SYM608_tree=null;
		Object IDENTIFIED_SYM609_tree=null;
		Object BY_SYM610_tree=null;
		Object TEXT_STRING611_tree=null;
		Object IGNORE_SYM612_tree=null;
		Object INTEGER_NUM613_tree=null;
		Object set614_tree=null;
		Object LPAREN615_tree=null;
		Object USER_VAR617_tree=null;
		Object COMMA618_tree=null;
		Object USER_VAR620_tree=null;
		Object RPAREN621_tree=null;

		try {
			// MySQL.g:1737:19: ( LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )? )
			// MySQL.g:1738:2: LOAD XML_SYM ( LOW_PRIORITY | CONCURRENT )? ( LOCAL_SYM )? INFILE TEXT_STRING ( REPLACE | IGNORE_SYM )? INTO TABLE table_spec ( partition_clause )? ( CHARACTER_SYM SET_SYM charset_name )? ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )? ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )? ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )? ( set_columns_cluase )?
			{
			root_0 = (Object)adaptor.nil();


			LOAD594=(Token)match(input,LOAD,FOLLOW_LOAD_in_load_xml_statement23168); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOAD594_tree = (Object)adaptor.create(LOAD594);
			adaptor.addChild(root_0, LOAD594_tree);
			}

			XML_SYM595=(Token)match(input,XML_SYM,FOLLOW_XML_SYM_in_load_xml_statement23170); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			XML_SYM595_tree = (Object)adaptor.create(XML_SYM595);
			adaptor.addChild(root_0, XML_SYM595_tree);
			}

			// MySQL.g:1738:15: ( LOW_PRIORITY | CONCURRENT )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==CONCURRENT||LA189_0==LOW_PRIORITY) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// MySQL.g:
					{
					set596=input.LT(1);
					if ( input.LA(1)==CONCURRENT||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set596));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1738:44: ( LOCAL_SYM )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==LOCAL_SYM) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// MySQL.g:1738:45: LOCAL_SYM
					{
					LOCAL_SYM597=(Token)match(input,LOCAL_SYM,FOLLOW_LOCAL_SYM_in_load_xml_statement23182); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCAL_SYM597_tree = (Object)adaptor.create(LOCAL_SYM597);
					adaptor.addChild(root_0, LOCAL_SYM597_tree);
					}

					}
					break;

			}

			INFILE598=(Token)match(input,INFILE,FOLLOW_INFILE_in_load_xml_statement23186); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INFILE598_tree = (Object)adaptor.create(INFILE598);
			adaptor.addChild(root_0, INFILE598_tree);
			}

			TEXT_STRING599=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_xml_statement23188); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TEXT_STRING599_tree = (Object)adaptor.create(TEXT_STRING599);
			adaptor.addChild(root_0, TEXT_STRING599_tree);
			}

			// MySQL.g:1739:2: ( REPLACE | IGNORE_SYM )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==IGNORE_SYM||LA191_0==REPLACE) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// MySQL.g:
					{
					set600=input.LT(1);
					if ( input.LA(1)==IGNORE_SYM||input.LA(1)==REPLACE ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set600));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INTO601=(Token)match(input,INTO,FOLLOW_INTO_in_load_xml_statement23201); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTO601_tree = (Object)adaptor.create(INTO601);
			adaptor.addChild(root_0, INTO601_tree);
			}

			TABLE602=(Token)match(input,TABLE,FOLLOW_TABLE_in_load_xml_statement23203); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE602_tree = (Object)adaptor.create(TABLE602);
			adaptor.addChild(root_0, TABLE602_tree);
			}

			pushFollow(FOLLOW_table_spec_in_load_xml_statement23205);
			table_spec603=table_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec603.getTree());

			// MySQL.g:1741:2: ( partition_clause )?
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==PARTITION_SYM) ) {
				alt192=1;
			}
			switch (alt192) {
				case 1 :
					// MySQL.g:1741:3: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_load_xml_statement23209);
					partition_clause604=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause604.getTree());

					}
					break;

			}

			// MySQL.g:1742:2: ( CHARACTER_SYM SET_SYM charset_name )?
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==CHARACTER_SYM) ) {
				alt193=1;
			}
			switch (alt193) {
				case 1 :
					// MySQL.g:1742:3: CHARACTER_SYM SET_SYM charset_name
					{
					CHARACTER_SYM605=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_load_xml_statement23215); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM605_tree = (Object)adaptor.create(CHARACTER_SYM605);
					adaptor.addChild(root_0, CHARACTER_SYM605_tree);
					}

					SET_SYM606=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_load_xml_statement23217); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM606_tree = (Object)adaptor.create(SET_SYM606);
					adaptor.addChild(root_0, SET_SYM606_tree);
					}

					pushFollow(FOLLOW_charset_name_in_load_xml_statement23219);
					charset_name607=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name607.getTree());

					}
					break;

			}

			// MySQL.g:1743:2: ( ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==ROWS_SYM) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// MySQL.g:1743:3: ROWS_SYM IDENTIFIED_SYM BY_SYM TEXT_STRING
					{
					ROWS_SYM608=(Token)match(input,ROWS_SYM,FOLLOW_ROWS_SYM_in_load_xml_statement23225); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROWS_SYM608_tree = (Object)adaptor.create(ROWS_SYM608);
					adaptor.addChild(root_0, ROWS_SYM608_tree);
					}

					IDENTIFIED_SYM609=(Token)match(input,IDENTIFIED_SYM,FOLLOW_IDENTIFIED_SYM_in_load_xml_statement23227); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IDENTIFIED_SYM609_tree = (Object)adaptor.create(IDENTIFIED_SYM609);
					adaptor.addChild(root_0, IDENTIFIED_SYM609_tree);
					}

					BY_SYM610=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_load_xml_statement23229); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM610_tree = (Object)adaptor.create(BY_SYM610);
					adaptor.addChild(root_0, BY_SYM610_tree);
					}

					TEXT_STRING611=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_load_xml_statement23231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING611_tree = (Object)adaptor.create(TEXT_STRING611);
					adaptor.addChild(root_0, TEXT_STRING611_tree);
					}

					}
					break;

			}

			// MySQL.g:1744:2: ( IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM ) )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==IGNORE_SYM) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// MySQL.g:1744:3: IGNORE_SYM INTEGER_NUM ( LINES | ROWS_SYM )
					{
					IGNORE_SYM612=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_load_xml_statement23237); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM612_tree = (Object)adaptor.create(IGNORE_SYM612);
					adaptor.addChild(root_0, IGNORE_SYM612_tree);
					}

					INTEGER_NUM613=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_load_xml_statement23239); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM613_tree = (Object)adaptor.create(INTEGER_NUM613);
					adaptor.addChild(root_0, INTEGER_NUM613_tree);
					}

					set614=input.LT(1);
					if ( input.LA(1)==LINES||input.LA(1)==ROWS_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set614));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1745:2: ( LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==LPAREN) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// MySQL.g:1745:3: LPAREN ( column_spec | USER_VAR ) ( COMMA ( column_spec | USER_VAR ) )* RPAREN
					{
					LPAREN615=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_load_xml_statement23253); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN615_tree = (Object)adaptor.create(LPAREN615);
					adaptor.addChild(root_0, LPAREN615_tree);
					}

					// MySQL.g:1745:10: ( column_spec | USER_VAR )
					int alt196=2;
					int LA196_0 = input.LA(1);
					if ( (LA196_0==ID) ) {
						alt196=1;
					}
					else if ( (LA196_0==USER_VAR) ) {
						alt196=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 196, 0, input);
						throw nvae;
					}

					switch (alt196) {
						case 1 :
							// MySQL.g:1745:11: column_spec
							{
							pushFollow(FOLLOW_column_spec_in_load_xml_statement23256);
							column_spec616=column_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec616.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1745:23: USER_VAR
							{
							USER_VAR617=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_xml_statement23258); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							USER_VAR617_tree = (Object)adaptor.create(USER_VAR617);
							adaptor.addChild(root_0, USER_VAR617_tree);
							}

							}
							break;

					}

					// MySQL.g:1745:33: ( COMMA ( column_spec | USER_VAR ) )*
					loop198:
					while (true) {
						int alt198=2;
						int LA198_0 = input.LA(1);
						if ( (LA198_0==COMMA) ) {
							alt198=1;
						}

						switch (alt198) {
						case 1 :
							// MySQL.g:1745:34: COMMA ( column_spec | USER_VAR )
							{
							COMMA618=(Token)match(input,COMMA,FOLLOW_COMMA_in_load_xml_statement23262); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA618_tree = (Object)adaptor.create(COMMA618);
							adaptor.addChild(root_0, COMMA618_tree);
							}

							// MySQL.g:1745:40: ( column_spec | USER_VAR )
							int alt197=2;
							int LA197_0 = input.LA(1);
							if ( (LA197_0==ID) ) {
								alt197=1;
							}
							else if ( (LA197_0==USER_VAR) ) {
								alt197=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 197, 0, input);
								throw nvae;
							}

							switch (alt197) {
								case 1 :
									// MySQL.g:1745:41: column_spec
									{
									pushFollow(FOLLOW_column_spec_in_load_xml_statement23265);
									column_spec619=column_spec();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec619.getTree());

									}
									break;
								case 2 :
									// MySQL.g:1745:53: USER_VAR
									{
									USER_VAR620=(Token)match(input,USER_VAR,FOLLOW_USER_VAR_in_load_xml_statement23267); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									USER_VAR620_tree = (Object)adaptor.create(USER_VAR620);
									adaptor.addChild(root_0, USER_VAR620_tree);
									}

									}
									break;

							}

							}
							break;

						default :
							break loop198;
						}
					}

					RPAREN621=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_load_xml_statement23272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN621_tree = (Object)adaptor.create(RPAREN621);
					adaptor.addChild(root_0, RPAREN621_tree);
					}

					}
					break;

			}

			// MySQL.g:1746:2: ( set_columns_cluase )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==SET_SYM) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// MySQL.g:1746:3: set_columns_cluase
					{
					pushFollow(FOLLOW_set_columns_cluase_in_load_xml_statement23278);
					set_columns_cluase622=set_columns_cluase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase622.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "load_xml_statement"


	public static class replace_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement"
	// MySQL.g:1755:1: replace_statement : replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 ) ;
	public final MySQLParser.replace_statement_return replace_statement() throws RecognitionException {
		MySQLParser.replace_statement_return retval = new MySQLParser.replace_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope replace_statement_header623 =null;
		ParserRuleReturnScope replace_statement1624 =null;
		ParserRuleReturnScope replace_statement2625 =null;
		ParserRuleReturnScope replace_statement3626 =null;


		try {
			// MySQL.g:1755:18: ( replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 ) )
			// MySQL.g:1756:2: replace_statement_header ( replace_statement1 | replace_statement2 | replace_statement3 )
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_replace_statement_header_in_replace_statement23295);
			replace_statement_header623=replace_statement_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement_header623.getTree());

			// MySQL.g:1757:2: ( replace_statement1 | replace_statement2 | replace_statement3 )
			int alt201=3;
			alt201 = dfa201.predict(input);
			switch (alt201) {
				case 1 :
					// MySQL.g:1757:4: replace_statement1
					{
					pushFollow(FOLLOW_replace_statement1_in_replace_statement23300);
					replace_statement1624=replace_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement1624.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1757:25: replace_statement2
					{
					pushFollow(FOLLOW_replace_statement2_in_replace_statement23304);
					replace_statement2625=replace_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement2625.getTree());

					}
					break;
				case 3 :
					// MySQL.g:1757:46: replace_statement3
					{
					pushFollow(FOLLOW_replace_statement3_in_replace_statement23308);
					replace_statement3626=replace_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replace_statement3626.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement"


	public static class replace_statement_header_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement_header"
	// MySQL.g:1760:1: replace_statement_header : REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )? ;
	public final MySQLParser.replace_statement_header_return replace_statement_header() throws RecognitionException {
		MySQLParser.replace_statement_header_return retval = new MySQLParser.replace_statement_header_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token REPLACE627=null;
		Token set628=null;
		Token INTO629=null;
		ParserRuleReturnScope table_name630 =null;
		ParserRuleReturnScope partition_clause631 =null;

		Object REPLACE627_tree=null;
		Object set628_tree=null;
		Object INTO629_tree=null;

		try {
			// MySQL.g:1760:25: ( REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )? )
			// MySQL.g:1761:2: REPLACE ( LOW_PRIORITY | DELAYED_SYM )? ( INTO )? table_name ( partition_clause )?
			{
			root_0 = (Object)adaptor.nil();


			REPLACE627=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_replace_statement_header23319); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			REPLACE627_tree = (Object)adaptor.create(REPLACE627);
			adaptor.addChild(root_0, REPLACE627_tree);
			}

			// MySQL.g:1761:10: ( LOW_PRIORITY | DELAYED_SYM )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==DELAYED_SYM||LA202_0==LOW_PRIORITY) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// MySQL.g:
					{
					set628=input.LT(1);
					if ( input.LA(1)==DELAYED_SYM||input.LA(1)==LOW_PRIORITY ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set628));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:1762:2: ( INTO )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==INTO) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// MySQL.g:1762:3: INTO
					{
					INTO629=(Token)match(input,INTO,FOLLOW_INTO_in_replace_statement_header23332); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO629_tree = (Object)adaptor.create(INTO629);
					adaptor.addChild(root_0, INTO629_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_replace_statement_header23336);
			table_name630=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name630.getTree());

			// MySQL.g:1763:2: ( partition_clause )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==PARTITION_SYM) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// MySQL.g:1763:3: partition_clause
					{
					pushFollow(FOLLOW_partition_clause_in_replace_statement_header23340);
					partition_clause631=partition_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_clause631.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement_header"


	public static class replace_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement1"
	// MySQL.g:1766:1: replace_statement1 : ( column_list )? value_list_clause ;
	public final MySQLParser.replace_statement1_return replace_statement1() throws RecognitionException {
		MySQLParser.replace_statement1_return retval = new MySQLParser.replace_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope column_list632 =null;
		ParserRuleReturnScope value_list_clause633 =null;


		try {
			// MySQL.g:1766:19: ( ( column_list )? value_list_clause )
			// MySQL.g:1767:2: ( column_list )? value_list_clause
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1767:2: ( column_list )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==LPAREN) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// MySQL.g:1767:3: column_list
					{
					pushFollow(FOLLOW_column_list_in_replace_statement123352);
					column_list632=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list632.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_value_list_clause_in_replace_statement123357);
			value_list_clause633=value_list_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, value_list_clause633.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement1"


	public static class replace_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement2"
	// MySQL.g:1771:1: replace_statement2 : set_columns_cluase ;
	public final MySQLParser.replace_statement2_return replace_statement2() throws RecognitionException {
		MySQLParser.replace_statement2_return retval = new MySQLParser.replace_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope set_columns_cluase634 =null;


		try {
			// MySQL.g:1771:19: ( set_columns_cluase )
			// MySQL.g:1772:2: set_columns_cluase
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_set_columns_cluase_in_replace_statement223366);
			set_columns_cluase634=set_columns_cluase();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, set_columns_cluase634.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement2"


	public static class replace_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_statement3"
	// MySQL.g:1775:1: replace_statement3 : ( column_list )? select_statement ;
	public final MySQLParser.replace_statement3_return replace_statement3() throws RecognitionException {
		MySQLParser.replace_statement3_return retval = new MySQLParser.replace_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope column_list635 =null;
		ParserRuleReturnScope select_statement636 =null;


		try {
			// MySQL.g:1775:19: ( ( column_list )? select_statement )
			// MySQL.g:1776:2: ( column_list )? select_statement
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1776:2: ( column_list )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==LPAREN) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// MySQL.g:1776:3: column_list
					{
					pushFollow(FOLLOW_column_list_in_replace_statement323376);
					column_list635=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list635.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_statement_in_replace_statement323381);
			select_statement636=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement636.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_statement3"


	public static class create_database_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_database_statement"
	// MySQL.g:1787:1: create_database_statement : CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )* ;
	public final MySQLParser.create_database_statement_return create_database_statement() throws RecognitionException {
		MySQLParser.create_database_statement_return retval = new MySQLParser.create_database_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE637=null;
		Token set638=null;
		Token IF639=null;
		Token NOT_SYM640=null;
		Token EXISTS641=null;
		Token COMMA644=null;
		ParserRuleReturnScope schema_name642 =null;
		ParserRuleReturnScope create_specification643 =null;
		ParserRuleReturnScope create_specification645 =null;

		Object CREATE637_tree=null;
		Object set638_tree=null;
		Object IF639_tree=null;
		Object NOT_SYM640_tree=null;
		Object EXISTS641_tree=null;
		Object COMMA644_tree=null;

		try {
			// MySQL.g:1787:26: ( CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )* )
			// MySQL.g:1788:2: CREATE ( DATABASE | SCHEMA ) ( IF NOT_SYM EXISTS )? schema_name ( create_specification ( COMMA create_specification )* )*
			{
			root_0 = (Object)adaptor.nil();


			CREATE637=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_database_statement23397); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE637_tree = (Object)adaptor.create(CREATE637);
			adaptor.addChild(root_0, CREATE637_tree);
			}

			set638=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set638));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// MySQL.g:1788:29: ( IF NOT_SYM EXISTS )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==IF) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// MySQL.g:1788:30: IF NOT_SYM EXISTS
					{
					IF639=(Token)match(input,IF,FOLLOW_IF_in_create_database_statement23408); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF639_tree = (Object)adaptor.create(IF639);
					adaptor.addChild(root_0, IF639_tree);
					}

					NOT_SYM640=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_database_statement23410); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM640_tree = (Object)adaptor.create(NOT_SYM640);
					adaptor.addChild(root_0, NOT_SYM640_tree);
					}

					EXISTS641=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_database_statement23412); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS641_tree = (Object)adaptor.create(EXISTS641);
					adaptor.addChild(root_0, EXISTS641_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_schema_name_in_create_database_statement23416);
			schema_name642=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name642.getTree());

			// MySQL.g:1789:2: ( create_specification ( COMMA create_specification )* )*
			loop209:
			while (true) {
				int alt209=2;
				int LA209_0 = input.LA(1);
				if ( (LA209_0==CHARACTER_SYM||LA209_0==COLLATE_SYM||LA209_0==DEFAULT) ) {
					alt209=1;
				}

				switch (alt209) {
				case 1 :
					// MySQL.g:1789:4: create_specification ( COMMA create_specification )*
					{
					pushFollow(FOLLOW_create_specification_in_create_database_statement23421);
					create_specification643=create_specification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_specification643.getTree());

					// MySQL.g:1789:25: ( COMMA create_specification )*
					loop208:
					while (true) {
						int alt208=2;
						int LA208_0 = input.LA(1);
						if ( (LA208_0==COMMA) ) {
							int LA208_2 = input.LA(2);
							if ( (LA208_2==CHARACTER_SYM||LA208_2==COLLATE_SYM||LA208_2==DEFAULT) ) {
								alt208=1;
							}

						}

						switch (alt208) {
						case 1 :
							// MySQL.g:1789:26: COMMA create_specification
							{
							COMMA644=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_database_statement23424); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA644_tree = (Object)adaptor.create(COMMA644);
							adaptor.addChild(root_0, COMMA644_tree);
							}

							pushFollow(FOLLOW_create_specification_in_create_database_statement23426);
							create_specification645=create_specification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, create_specification645.getTree());

							}
							break;

						default :
							break loop208;
						}
					}

					}
					break;

				default :
					break loop209;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_database_statement"


	public static class create_specification_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_specification"
	// MySQL.g:1791:1: create_specification : ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) ) ;
	public final MySQLParser.create_specification_return create_specification() throws RecognitionException {
		MySQLParser.create_specification_return retval = new MySQLParser.create_specification_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DEFAULT646=null;
		Token CHARACTER_SYM647=null;
		Token SET_SYM648=null;
		Token EQ_SYM649=null;
		Token COLLATE_SYM651=null;
		Token EQ_SYM652=null;
		ParserRuleReturnScope charset_name650 =null;
		ParserRuleReturnScope collation_name653 =null;

		Object DEFAULT646_tree=null;
		Object CHARACTER_SYM647_tree=null;
		Object SET_SYM648_tree=null;
		Object EQ_SYM649_tree=null;
		Object COLLATE_SYM651_tree=null;
		Object EQ_SYM652_tree=null;

		try {
			// MySQL.g:1791:21: ( ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) ) )
			// MySQL.g:1792:2: ( DEFAULT )? ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) )
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1792:2: ( DEFAULT )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==DEFAULT) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// MySQL.g:1792:3: DEFAULT
					{
					DEFAULT646=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_create_specification23440); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFAULT646_tree = (Object)adaptor.create(DEFAULT646);
					adaptor.addChild(root_0, DEFAULT646_tree);
					}

					}
					break;

			}

			// MySQL.g:1793:2: ( ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( COLLATE_SYM ( EQ_SYM )? collation_name ) )
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==CHARACTER_SYM) ) {
				alt213=1;
			}
			else if ( (LA213_0==COLLATE_SYM) ) {
				alt213=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				throw nvae;
			}

			switch (alt213) {
				case 1 :
					// MySQL.g:1794:3: ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					{
					// MySQL.g:1794:3: ( CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					// MySQL.g:1794:6: CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					CHARACTER_SYM647=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_create_specification23453); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM647_tree = (Object)adaptor.create(CHARACTER_SYM647);
					adaptor.addChild(root_0, CHARACTER_SYM647_tree);
					}

					SET_SYM648=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_create_specification23455); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM648_tree = (Object)adaptor.create(SET_SYM648);
					adaptor.addChild(root_0, SET_SYM648_tree);
					}

					// MySQL.g:1794:28: ( EQ_SYM )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==EQ_SYM) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// MySQL.g:1794:29: EQ_SYM
							{
							EQ_SYM649=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_specification23458); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM649_tree = (Object)adaptor.create(EQ_SYM649);
							adaptor.addChild(root_0, EQ_SYM649_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_create_specification23462);
					charset_name650=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name650.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:1796:3: ( COLLATE_SYM ( EQ_SYM )? collation_name )
					{
					// MySQL.g:1796:3: ( COLLATE_SYM ( EQ_SYM )? collation_name )
					// MySQL.g:1796:6: COLLATE_SYM ( EQ_SYM )? collation_name
					{
					COLLATE_SYM651=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_create_specification23476); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM651_tree = (Object)adaptor.create(COLLATE_SYM651);
					adaptor.addChild(root_0, COLLATE_SYM651_tree);
					}

					// MySQL.g:1796:18: ( EQ_SYM )?
					int alt212=2;
					int LA212_0 = input.LA(1);
					if ( (LA212_0==EQ_SYM) ) {
						alt212=1;
					}
					switch (alt212) {
						case 1 :
							// MySQL.g:1796:19: EQ_SYM
							{
							EQ_SYM652=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_specification23479); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM652_tree = (Object)adaptor.create(EQ_SYM652);
							adaptor.addChild(root_0, EQ_SYM652_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_name_in_create_specification23483);
					collation_name653=collation_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name653.getTree());

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_specification"


	public static class alter_database_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statements"
	// MySQL.g:1802:1: alter_database_statements : ( alter_database_statement1 | alter_database_statement2 );
	public final MySQLParser.alter_database_statements_return alter_database_statements() throws RecognitionException {
		MySQLParser.alter_database_statements_return retval = new MySQLParser.alter_database_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope alter_database_statement1654 =null;
		ParserRuleReturnScope alter_database_statement2655 =null;


		try {
			// MySQL.g:1802:26: ( alter_database_statement1 | alter_database_statement2 )
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==ALTER) ) {
				int LA214_1 = input.LA(2);
				if ( (LA214_1==DATABASE||LA214_1==SCHEMA) ) {
					int LA214_2 = input.LA(3);
					if ( (LA214_2==ID) ) {
						int LA214_3 = input.LA(4);
						if ( (LA214_3==CHARACTER_SYM||LA214_3==COLLATE_SYM||LA214_3==DEFAULT) ) {
							alt214=1;
						}
						else if ( (LA214_3==UPGRADE_SYM) ) {
							alt214=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 214, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA214_2==CHARACTER_SYM||LA214_2==COLLATE_SYM||LA214_2==DEFAULT) ) {
						alt214=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 214, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 214, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 214, 0, input);
				throw nvae;
			}

			switch (alt214) {
				case 1 :
					// MySQL.g:1803:2: alter_database_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statement1_in_alter_database_statements23500);
					alter_database_statement1654=alter_database_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statement1654.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1803:30: alter_database_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_database_statement2_in_alter_database_statements23504);
					alter_database_statement2655=alter_database_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_statement2655.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statements"


	public static class alter_database_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statement1"
	// MySQL.g:1805:1: alter_database_statement1 : ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification ;
	public final MySQLParser.alter_database_statement1_return alter_database_statement1() throws RecognitionException {
		MySQLParser.alter_database_statement1_return retval = new MySQLParser.alter_database_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER656=null;
		Token set657=null;
		ParserRuleReturnScope schema_name658 =null;
		ParserRuleReturnScope alter_database_specification659 =null;

		Object ALTER656_tree=null;
		Object set657_tree=null;

		try {
			// MySQL.g:1805:26: ( ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification )
			// MySQL.g:1806:2: ALTER ( DATABASE | SCHEMA ) ( schema_name )? alter_database_specification
			{
			root_0 = (Object)adaptor.nil();


			ALTER656=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_database_statement123512); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER656_tree = (Object)adaptor.create(ALTER656);
			adaptor.addChild(root_0, ALTER656_tree);
			}

			set657=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set657));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// MySQL.g:1806:28: ( schema_name )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==ID) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// MySQL.g:1806:29: schema_name
					{
					pushFollow(FOLLOW_schema_name_in_alter_database_statement123523);
					schema_name658=schema_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name658.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_alter_database_specification_in_alter_database_statement123528);
			alter_database_specification659=alter_database_specification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_database_specification659.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statement1"


	public static class alter_database_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_statement2"
	// MySQL.g:1809:1: alter_database_statement2 : ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM ;
	public final MySQLParser.alter_database_statement2_return alter_database_statement2() throws RecognitionException {
		MySQLParser.alter_database_statement2_return retval = new MySQLParser.alter_database_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER660=null;
		Token set661=null;
		Token UPGRADE_SYM663=null;
		Token DATA_SYM664=null;
		Token DIRECTORY_SYM665=null;
		Token NAME_SYM666=null;
		ParserRuleReturnScope schema_name662 =null;

		Object ALTER660_tree=null;
		Object set661_tree=null;
		Object UPGRADE_SYM663_tree=null;
		Object DATA_SYM664_tree=null;
		Object DIRECTORY_SYM665_tree=null;
		Object NAME_SYM666_tree=null;

		try {
			// MySQL.g:1809:26: ( ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM )
			// MySQL.g:1810:2: ALTER ( DATABASE | SCHEMA ) schema_name UPGRADE_SYM DATA_SYM DIRECTORY_SYM NAME_SYM
			{
			root_0 = (Object)adaptor.nil();


			ALTER660=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_database_statement223536); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER660_tree = (Object)adaptor.create(ALTER660);
			adaptor.addChild(root_0, ALTER660_tree);
			}

			set661=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set661));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_schema_name_in_alter_database_statement223546);
			schema_name662=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name662.getTree());

			UPGRADE_SYM663=(Token)match(input,UPGRADE_SYM,FOLLOW_UPGRADE_SYM_in_alter_database_statement223549); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UPGRADE_SYM663_tree = (Object)adaptor.create(UPGRADE_SYM663);
			adaptor.addChild(root_0, UPGRADE_SYM663_tree);
			}

			DATA_SYM664=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_alter_database_statement223551); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM664_tree = (Object)adaptor.create(DATA_SYM664);
			adaptor.addChild(root_0, DATA_SYM664_tree);
			}

			DIRECTORY_SYM665=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_alter_database_statement223553); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DIRECTORY_SYM665_tree = (Object)adaptor.create(DIRECTORY_SYM665);
			adaptor.addChild(root_0, DIRECTORY_SYM665_tree);
			}

			NAME_SYM666=(Token)match(input,NAME_SYM,FOLLOW_NAME_SYM_in_alter_database_statement223555); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			NAME_SYM666_tree = (Object)adaptor.create(NAME_SYM666);
			adaptor.addChild(root_0, NAME_SYM666_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_statement2"


	public static class alter_database_specification_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_database_specification"
	// MySQL.g:1813:1: alter_database_specification : ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name | ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names );
	public final MySQLParser.alter_database_specification_return alter_database_specification() throws RecognitionException {
		MySQLParser.alter_database_specification_return retval = new MySQLParser.alter_database_specification_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DEFAULT667=null;
		Token CHARACTER_SYM668=null;
		Token SET_SYM669=null;
		Token EQ_SYM670=null;
		Token DEFAULT672=null;
		Token COLLATE_SYM673=null;
		Token EQ_SYM674=null;
		ParserRuleReturnScope charset_name671 =null;
		ParserRuleReturnScope collation_names675 =null;

		Object DEFAULT667_tree=null;
		Object CHARACTER_SYM668_tree=null;
		Object SET_SYM669_tree=null;
		Object EQ_SYM670_tree=null;
		Object DEFAULT672_tree=null;
		Object COLLATE_SYM673_tree=null;
		Object EQ_SYM674_tree=null;

		try {
			// MySQL.g:1813:29: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name | ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names )
			int alt220=2;
			switch ( input.LA(1) ) {
			case DEFAULT:
				{
				int LA220_1 = input.LA(2);
				if ( (LA220_1==CHARACTER_SYM) ) {
					alt220=1;
				}
				else if ( (LA220_1==COLLATE_SYM) ) {
					alt220=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 220, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				alt220=1;
				}
				break;
			case COLLATE_SYM:
				{
				alt220=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}
			switch (alt220) {
				case 1 :
					// MySQL.g:1814:2: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1814:2: ( DEFAULT )?
					int alt216=2;
					int LA216_0 = input.LA(1);
					if ( (LA216_0==DEFAULT) ) {
						alt216=1;
					}
					switch (alt216) {
						case 1 :
							// MySQL.g:1814:3: DEFAULT
							{
							DEFAULT667=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_database_specification23564); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT667_tree = (Object)adaptor.create(DEFAULT667);
							adaptor.addChild(root_0, DEFAULT667_tree);
							}

							}
							break;

					}

					CHARACTER_SYM668=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_database_specification23568); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM668_tree = (Object)adaptor.create(CHARACTER_SYM668);
					adaptor.addChild(root_0, CHARACTER_SYM668_tree);
					}

					SET_SYM669=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_database_specification23570); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM669_tree = (Object)adaptor.create(SET_SYM669);
					adaptor.addChild(root_0, SET_SYM669_tree);
					}

					// MySQL.g:1814:35: ( EQ_SYM )?
					int alt217=2;
					int LA217_0 = input.LA(1);
					if ( (LA217_0==EQ_SYM) ) {
						alt217=1;
					}
					switch (alt217) {
						case 1 :
							// MySQL.g:1814:36: EQ_SYM
							{
							EQ_SYM670=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_database_specification23573); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM670_tree = (Object)adaptor.create(EQ_SYM670);
							adaptor.addChild(root_0, EQ_SYM670_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_alter_database_specification23577);
					charset_name671=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name671.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1816:2: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_names
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1816:2: ( DEFAULT )?
					int alt218=2;
					int LA218_0 = input.LA(1);
					if ( (LA218_0==DEFAULT) ) {
						alt218=1;
					}
					switch (alt218) {
						case 1 :
							// MySQL.g:1816:3: DEFAULT
							{
							DEFAULT672=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_database_specification23585); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT672_tree = (Object)adaptor.create(DEFAULT672);
							adaptor.addChild(root_0, DEFAULT672_tree);
							}

							}
							break;

					}

					COLLATE_SYM673=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_database_specification23589); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM673_tree = (Object)adaptor.create(COLLATE_SYM673);
					adaptor.addChild(root_0, COLLATE_SYM673_tree);
					}

					// MySQL.g:1816:25: ( EQ_SYM )?
					int alt219=2;
					int LA219_0 = input.LA(1);
					if ( (LA219_0==EQ_SYM) ) {
						alt219=1;
					}
					switch (alt219) {
						case 1 :
							// MySQL.g:1816:26: EQ_SYM
							{
							EQ_SYM674=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_database_specification23592); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM674_tree = (Object)adaptor.create(EQ_SYM674);
							adaptor.addChild(root_0, EQ_SYM674_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_names_in_alter_database_specification23596);
					collation_names675=collation_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_names675.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_database_specification"


	public static class drop_database_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_database_statement"
	// MySQL.g:1822:1: drop_database_statement : DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name ;
	public final MySQLParser.drop_database_statement_return drop_database_statement() throws RecognitionException {
		MySQLParser.drop_database_statement_return retval = new MySQLParser.drop_database_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP676=null;
		Token set677=null;
		Token IF678=null;
		Token EXISTS679=null;
		ParserRuleReturnScope schema_name680 =null;

		Object DROP676_tree=null;
		Object set677_tree=null;
		Object IF678_tree=null;
		Object EXISTS679_tree=null;

		try {
			// MySQL.g:1822:24: ( DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name )
			// MySQL.g:1823:2: DROP ( DATABASE | SCHEMA ) ( IF EXISTS )? schema_name
			{
			root_0 = (Object)adaptor.nil();


			DROP676=(Token)match(input,DROP,FOLLOW_DROP_in_drop_database_statement23608); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP676_tree = (Object)adaptor.create(DROP676);
			adaptor.addChild(root_0, DROP676_tree);
			}

			set677=input.LT(1);
			if ( input.LA(1)==DATABASE||input.LA(1)==SCHEMA ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set677));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// MySQL.g:1823:27: ( IF EXISTS )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==IF) ) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// MySQL.g:1823:28: IF EXISTS
					{
					IF678=(Token)match(input,IF,FOLLOW_IF_in_drop_database_statement23619); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF678_tree = (Object)adaptor.create(IF678);
					adaptor.addChild(root_0, IF678_tree);
					}

					EXISTS679=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_database_statement23621); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS679_tree = (Object)adaptor.create(EXISTS679);
					adaptor.addChild(root_0, EXISTS679_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_schema_name_in_drop_database_statement23625);
			schema_name680=schema_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name680.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_database_statement"


	public static class create_event_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_event_statement"
	// MySQL.g:1832:1: create_event_statement : CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement ;
	public final MySQLParser.create_event_statement_return create_event_statement() throws RecognitionException {
		MySQLParser.create_event_statement_return retval = new MySQLParser.create_event_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE681=null;
		Token DEFINER682=null;
		Token EQ_SYM683=null;
		Token CURRENT_USER685=null;
		Token EVENT_SYM686=null;
		Token IF687=null;
		Token NOT_SYM688=null;
		Token EXISTS689=null;
		Token ON691=null;
		Token SCHEDULE_SYM692=null;
		Token ON694=null;
		Token COMPLETION_SYM695=null;
		Token NOT_SYM696=null;
		Token PRESERVE_SYM697=null;
		Token ENABLE_SYM698=null;
		Token DISABLE_SYM699=null;
		Token DISABLE_SYM700=null;
		Token ON701=null;
		Token SLAVE702=null;
		Token COMMENT_SYM703=null;
		Token TEXT_STRING704=null;
		ParserRuleReturnScope user_name684 =null;
		ParserRuleReturnScope event_name690 =null;
		ParserRuleReturnScope schedule_definition693 =null;
		ParserRuleReturnScope do_statement705 =null;

		Object CREATE681_tree=null;
		Object DEFINER682_tree=null;
		Object EQ_SYM683_tree=null;
		Object CURRENT_USER685_tree=null;
		Object EVENT_SYM686_tree=null;
		Object IF687_tree=null;
		Object NOT_SYM688_tree=null;
		Object EXISTS689_tree=null;
		Object ON691_tree=null;
		Object SCHEDULE_SYM692_tree=null;
		Object ON694_tree=null;
		Object COMPLETION_SYM695_tree=null;
		Object NOT_SYM696_tree=null;
		Object PRESERVE_SYM697_tree=null;
		Object ENABLE_SYM698_tree=null;
		Object DISABLE_SYM699_tree=null;
		Object DISABLE_SYM700_tree=null;
		Object ON701_tree=null;
		Object SLAVE702_tree=null;
		Object COMMENT_SYM703_tree=null;
		Object TEXT_STRING704_tree=null;

		try {
			// MySQL.g:1832:23: ( CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement )
			// MySQL.g:1833:2: CREATE ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM ( IF NOT_SYM EXISTS )? event_name ON SCHEDULE_SYM schedule_definition ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? do_statement
			{
			root_0 = (Object)adaptor.nil();


			CREATE681=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_event_statement23640); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE681_tree = (Object)adaptor.create(CREATE681);
			adaptor.addChild(root_0, CREATE681_tree);
			}

			// MySQL.g:1834:2: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==DEFINER) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// MySQL.g:1834:3: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER682=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_event_statement23644); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER682_tree = (Object)adaptor.create(DEFINER682);
					adaptor.addChild(root_0, DEFINER682_tree);
					}

					EQ_SYM683=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_event_statement23646); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM683_tree = (Object)adaptor.create(EQ_SYM683);
					adaptor.addChild(root_0, EQ_SYM683_tree);
					}

					// MySQL.g:1834:18: ( user_name | CURRENT_USER )
					int alt222=2;
					int LA222_0 = input.LA(1);
					if ( (LA222_0==ID) ) {
						alt222=1;
					}
					else if ( (LA222_0==CURRENT_USER) ) {
						alt222=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 222, 0, input);
						throw nvae;
					}

					switch (alt222) {
						case 1 :
							// MySQL.g:1834:20: user_name
							{
							pushFollow(FOLLOW_user_name_in_create_event_statement23650);
							user_name684=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name684.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1834:32: CURRENT_USER
							{
							CURRENT_USER685=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_event_statement23654); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER685_tree = (Object)adaptor.create(CURRENT_USER685);
							adaptor.addChild(root_0, CURRENT_USER685_tree);
							}

							}
							break;

					}

					}
					break;

			}

			EVENT_SYM686=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_create_event_statement23661); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM686_tree = (Object)adaptor.create(EVENT_SYM686);
			adaptor.addChild(root_0, EVENT_SYM686_tree);
			}

			// MySQL.g:1836:2: ( IF NOT_SYM EXISTS )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==IF) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// MySQL.g:1836:3: IF NOT_SYM EXISTS
					{
					IF687=(Token)match(input,IF,FOLLOW_IF_in_create_event_statement23665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF687_tree = (Object)adaptor.create(IF687);
					adaptor.addChild(root_0, IF687_tree);
					}

					NOT_SYM688=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_event_statement23667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM688_tree = (Object)adaptor.create(NOT_SYM688);
					adaptor.addChild(root_0, NOT_SYM688_tree);
					}

					EXISTS689=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_event_statement23669); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS689_tree = (Object)adaptor.create(EXISTS689);
					adaptor.addChild(root_0, EXISTS689_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_event_name_in_create_event_statement23674);
			event_name690=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name690.getTree());

			ON691=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement23677); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON691_tree = (Object)adaptor.create(ON691);
			adaptor.addChild(root_0, ON691_tree);
			}

			SCHEDULE_SYM692=(Token)match(input,SCHEDULE_SYM,FOLLOW_SCHEDULE_SYM_in_create_event_statement23679); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SCHEDULE_SYM692_tree = (Object)adaptor.create(SCHEDULE_SYM692);
			adaptor.addChild(root_0, SCHEDULE_SYM692_tree);
			}

			pushFollow(FOLLOW_schedule_definition_in_create_event_statement23681);
			schedule_definition693=schedule_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, schedule_definition693.getTree());

			// MySQL.g:1839:2: ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==ON) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// MySQL.g:1839:3: ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM
					{
					ON694=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement23685); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON694_tree = (Object)adaptor.create(ON694);
					adaptor.addChild(root_0, ON694_tree);
					}

					COMPLETION_SYM695=(Token)match(input,COMPLETION_SYM,FOLLOW_COMPLETION_SYM_in_create_event_statement23687); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLETION_SYM695_tree = (Object)adaptor.create(COMPLETION_SYM695);
					adaptor.addChild(root_0, COMPLETION_SYM695_tree);
					}

					// MySQL.g:1839:21: ( NOT_SYM )?
					int alt225=2;
					int LA225_0 = input.LA(1);
					if ( (LA225_0==NOT_SYM) ) {
						alt225=1;
					}
					switch (alt225) {
						case 1 :
							// MySQL.g:1839:22: NOT_SYM
							{
							NOT_SYM696=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_event_statement23690); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM696_tree = (Object)adaptor.create(NOT_SYM696);
							adaptor.addChild(root_0, NOT_SYM696_tree);
							}

							}
							break;

					}

					PRESERVE_SYM697=(Token)match(input,PRESERVE_SYM,FOLLOW_PRESERVE_SYM_in_create_event_statement23694); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRESERVE_SYM697_tree = (Object)adaptor.create(PRESERVE_SYM697);
					adaptor.addChild(root_0, PRESERVE_SYM697_tree);
					}

					}
					break;

			}

			// MySQL.g:1840:2: ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )?
			int alt227=4;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==ENABLE_SYM) ) {
				alt227=1;
			}
			else if ( (LA227_0==DISABLE_SYM) ) {
				int LA227_2 = input.LA(2);
				if ( (LA227_2==ON) ) {
					alt227=3;
				}
				else if ( (LA227_2==COMMENT_SYM||LA227_2==DO_SYM) ) {
					alt227=2;
				}
			}
			switch (alt227) {
				case 1 :
					// MySQL.g:1840:4: ENABLE_SYM
					{
					ENABLE_SYM698=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_create_event_statement23701); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM698_tree = (Object)adaptor.create(ENABLE_SYM698);
					adaptor.addChild(root_0, ENABLE_SYM698_tree);
					}

					}
					break;
				case 2 :
					// MySQL.g:1840:17: DISABLE_SYM
					{
					DISABLE_SYM699=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_create_event_statement23705); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM699_tree = (Object)adaptor.create(DISABLE_SYM699);
					adaptor.addChild(root_0, DISABLE_SYM699_tree);
					}

					}
					break;
				case 3 :
					// MySQL.g:1840:31: ( DISABLE_SYM ON SLAVE )
					{
					// MySQL.g:1840:31: ( DISABLE_SYM ON SLAVE )
					// MySQL.g:1840:32: DISABLE_SYM ON SLAVE
					{
					DISABLE_SYM700=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_create_event_statement23710); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM700_tree = (Object)adaptor.create(DISABLE_SYM700);
					adaptor.addChild(root_0, DISABLE_SYM700_tree);
					}

					ON701=(Token)match(input,ON,FOLLOW_ON_in_create_event_statement23712); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON701_tree = (Object)adaptor.create(ON701);
					adaptor.addChild(root_0, ON701_tree);
					}

					SLAVE702=(Token)match(input,SLAVE,FOLLOW_SLAVE_in_create_event_statement23714); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLAVE702_tree = (Object)adaptor.create(SLAVE702);
					adaptor.addChild(root_0, SLAVE702_tree);
					}

					}

					}
					break;

			}

			// MySQL.g:1841:2: ( COMMENT_SYM TEXT_STRING )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==COMMENT_SYM) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// MySQL.g:1841:3: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM703=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_create_event_statement23722); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM703_tree = (Object)adaptor.create(COMMENT_SYM703);
					adaptor.addChild(root_0, COMMENT_SYM703_tree);
					}

					TEXT_STRING704=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_create_event_statement23724); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING704_tree = (Object)adaptor.create(TEXT_STRING704);
					adaptor.addChild(root_0, TEXT_STRING704_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_do_statement_in_create_event_statement23729);
			do_statement705=do_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement705.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_event_statement"


	public static class schedule_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "schedule_definition"
	// MySQL.g:1844:1: schedule_definition : ( ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* ) | ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? );
	public final MySQLParser.schedule_definition_return schedule_definition() throws RecognitionException {
		MySQLParser.schedule_definition_return retval = new MySQLParser.schedule_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token AT_SYM706=null;
		Token PLUS708=null;
		Token INTERVAL_SYM709=null;
		Token EVERY_SYM711=null;
		Token STARTS_SYM713=null;
		Token PLUS715=null;
		Token INTERVAL_SYM716=null;
		Token ENDS_SYM718=null;
		Token PLUS720=null;
		Token INTERVAL_SYM721=null;
		ParserRuleReturnScope timestamp707 =null;
		ParserRuleReturnScope interval710 =null;
		ParserRuleReturnScope interval712 =null;
		ParserRuleReturnScope timestamp714 =null;
		ParserRuleReturnScope interval717 =null;
		ParserRuleReturnScope timestamp719 =null;
		ParserRuleReturnScope interval722 =null;

		Object AT_SYM706_tree=null;
		Object PLUS708_tree=null;
		Object INTERVAL_SYM709_tree=null;
		Object EVERY_SYM711_tree=null;
		Object STARTS_SYM713_tree=null;
		Object PLUS715_tree=null;
		Object INTERVAL_SYM716_tree=null;
		Object ENDS_SYM718_tree=null;
		Object PLUS720_tree=null;
		Object INTERVAL_SYM721_tree=null;

		try {
			// MySQL.g:1844:20: ( ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* ) | ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? )
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==AT_SYM) ) {
				alt234=1;
			}
			else if ( (LA234_0==EVERY_SYM) ) {
				alt234=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 234, 0, input);
				throw nvae;
			}

			switch (alt234) {
				case 1 :
					// MySQL.g:1845:2: ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1845:2: ( AT_SYM timestamp ( PLUS INTERVAL_SYM interval )* )
					// MySQL.g:1845:4: AT_SYM timestamp ( PLUS INTERVAL_SYM interval )*
					{
					AT_SYM706=(Token)match(input,AT_SYM,FOLLOW_AT_SYM_in_schedule_definition23739); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AT_SYM706_tree = (Object)adaptor.create(AT_SYM706);
					adaptor.addChild(root_0, AT_SYM706_tree);
					}

					pushFollow(FOLLOW_timestamp_in_schedule_definition23741);
					timestamp707=timestamp();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp707.getTree());

					// MySQL.g:1845:21: ( PLUS INTERVAL_SYM interval )*
					loop229:
					while (true) {
						int alt229=2;
						int LA229_0 = input.LA(1);
						if ( (LA229_0==PLUS) ) {
							alt229=1;
						}

						switch (alt229) {
						case 1 :
							// MySQL.g:1845:22: PLUS INTERVAL_SYM interval
							{
							PLUS708=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition23744); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							PLUS708_tree = (Object)adaptor.create(PLUS708);
							adaptor.addChild(root_0, PLUS708_tree);
							}

							INTERVAL_SYM709=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition23746); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTERVAL_SYM709_tree = (Object)adaptor.create(INTERVAL_SYM709);
							adaptor.addChild(root_0, INTERVAL_SYM709_tree);
							}

							pushFollow(FOLLOW_interval_in_schedule_definition23748);
							interval710=interval();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, interval710.getTree());

							}
							break;

						default :
							break loop229;
						}
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:1847:2: ( EVERY_SYM interval ) ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )? ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1847:2: ( EVERY_SYM interval )
					// MySQL.g:1847:4: EVERY_SYM interval
					{
					EVERY_SYM711=(Token)match(input,EVERY_SYM,FOLLOW_EVERY_SYM_in_schedule_definition23761); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EVERY_SYM711_tree = (Object)adaptor.create(EVERY_SYM711);
					adaptor.addChild(root_0, EVERY_SYM711_tree);
					}

					pushFollow(FOLLOW_interval_in_schedule_definition23763);
					interval712=interval();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, interval712.getTree());

					}

					// MySQL.g:1848:2: ( STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					int alt231=2;
					int LA231_0 = input.LA(1);
					if ( (LA231_0==STARTS_SYM) ) {
						alt231=1;
					}
					switch (alt231) {
						case 1 :
							// MySQL.g:1848:4: STARTS_SYM timestamp ( PLUS INTERVAL_SYM interval )*
							{
							STARTS_SYM713=(Token)match(input,STARTS_SYM,FOLLOW_STARTS_SYM_in_schedule_definition23770); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STARTS_SYM713_tree = (Object)adaptor.create(STARTS_SYM713);
							adaptor.addChild(root_0, STARTS_SYM713_tree);
							}

							pushFollow(FOLLOW_timestamp_in_schedule_definition23772);
							timestamp714=timestamp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp714.getTree());

							// MySQL.g:1848:25: ( PLUS INTERVAL_SYM interval )*
							loop230:
							while (true) {
								int alt230=2;
								int LA230_0 = input.LA(1);
								if ( (LA230_0==PLUS) ) {
									alt230=1;
								}

								switch (alt230) {
								case 1 :
									// MySQL.g:1848:26: PLUS INTERVAL_SYM interval
									{
									PLUS715=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition23775); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									PLUS715_tree = (Object)adaptor.create(PLUS715);
									adaptor.addChild(root_0, PLUS715_tree);
									}

									INTERVAL_SYM716=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition23777); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTERVAL_SYM716_tree = (Object)adaptor.create(INTERVAL_SYM716);
									adaptor.addChild(root_0, INTERVAL_SYM716_tree);
									}

									pushFollow(FOLLOW_interval_in_schedule_definition23779);
									interval717=interval();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, interval717.getTree());

									}
									break;

								default :
									break loop230;
								}
							}

							}
							break;

					}

					// MySQL.g:1849:2: ( ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )* )?
					int alt233=2;
					int LA233_0 = input.LA(1);
					if ( (LA233_0==ENDS_SYM) ) {
						alt233=1;
					}
					switch (alt233) {
						case 1 :
							// MySQL.g:1849:4: ENDS_SYM timestamp ( PLUS INTERVAL_SYM interval )*
							{
							ENDS_SYM718=(Token)match(input,ENDS_SYM,FOLLOW_ENDS_SYM_in_schedule_definition23789); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ENDS_SYM718_tree = (Object)adaptor.create(ENDS_SYM718);
							adaptor.addChild(root_0, ENDS_SYM718_tree);
							}

							pushFollow(FOLLOW_timestamp_in_schedule_definition23791);
							timestamp719=timestamp();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, timestamp719.getTree());

							// MySQL.g:1849:23: ( PLUS INTERVAL_SYM interval )*
							loop232:
							while (true) {
								int alt232=2;
								int LA232_0 = input.LA(1);
								if ( (LA232_0==PLUS) ) {
									alt232=1;
								}

								switch (alt232) {
								case 1 :
									// MySQL.g:1849:24: PLUS INTERVAL_SYM interval
									{
									PLUS720=(Token)match(input,PLUS,FOLLOW_PLUS_in_schedule_definition23794); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									PLUS720_tree = (Object)adaptor.create(PLUS720);
									adaptor.addChild(root_0, PLUS720_tree);
									}

									INTERVAL_SYM721=(Token)match(input,INTERVAL_SYM,FOLLOW_INTERVAL_SYM_in_schedule_definition23796); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									INTERVAL_SYM721_tree = (Object)adaptor.create(INTERVAL_SYM721);
									adaptor.addChild(root_0, INTERVAL_SYM721_tree);
									}

									pushFollow(FOLLOW_interval_in_schedule_definition23798);
									interval722=interval();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, interval722.getTree());

									}
									break;

								default :
									break loop232;
								}
							}

							}
							break;

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schedule_definition"


	public static class interval_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "interval"
	// MySQL.g:1851:1: interval : INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND ) ;
	public final MySQLParser.interval_return interval() throws RecognitionException {
		MySQLParser.interval_return retval = new MySQLParser.interval_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM723=null;
		Token set724=null;

		Object INTEGER_NUM723_tree=null;
		Object set724_tree=null;

		try {
			// MySQL.g:1851:9: ( INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND ) )
			// MySQL.g:1852:2: INTEGER_NUM ( YEAR | QUARTER | MONTH | DAY_SYM | HOUR | MINUTE | WEEK | SECOND | YEAR_MONTH | DAY_HOUR | DAY_MINUTE | DAY_SECOND | HOUR_MINUTE | HOUR_SECOND | MINUTE_SECOND )
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM723=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_interval23811); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM723_tree = (Object)adaptor.create(INTEGER_NUM723);
			adaptor.addChild(root_0, INTEGER_NUM723_tree);
			}

			set724=input.LT(1);
			if ( input.LA(1)==DAY_HOUR||(input.LA(1) >= DAY_MINUTE && input.LA(1) <= DAY_SYM)||input.LA(1)==HOUR||(input.LA(1) >= HOUR_MINUTE && input.LA(1) <= HOUR_SECOND)||input.LA(1)==MINUTE||input.LA(1)==MINUTE_SECOND||input.LA(1)==MONTH||input.LA(1)==QUARTER||input.LA(1)==SECOND||input.LA(1)==WEEK||input.LA(1)==YEAR||input.LA(1)==YEAR_MONTH ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set724));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval"


	public static class timestamp_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "timestamp"
	// MySQL.g:1857:1: timestamp : CURRENT_TIMESTAMP ;
	public final MySQLParser.timestamp_return timestamp() throws RecognitionException {
		MySQLParser.timestamp_return retval = new MySQLParser.timestamp_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CURRENT_TIMESTAMP725=null;

		Object CURRENT_TIMESTAMP725_tree=null;

		try {
			// MySQL.g:1857:10: ( CURRENT_TIMESTAMP )
			// MySQL.g:1858:2: CURRENT_TIMESTAMP
			{
			root_0 = (Object)adaptor.nil();


			CURRENT_TIMESTAMP725=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_timestamp23902); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CURRENT_TIMESTAMP725_tree = (Object)adaptor.create(CURRENT_TIMESTAMP725);
			adaptor.addChild(root_0, CURRENT_TIMESTAMP725_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timestamp"


	public static class alter_event_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_event_statement"
	// MySQL.g:1865:1: alter_event_statement : ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )? ;
	public final MySQLParser.alter_event_statement_return alter_event_statement() throws RecognitionException {
		MySQLParser.alter_event_statement_return retval = new MySQLParser.alter_event_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER726=null;
		Token DEFINER727=null;
		Token EQ_SYM728=null;
		Token CURRENT_USER730=null;
		Token EVENT_SYM731=null;
		Token ON733=null;
		Token SCHEDULE_SYM734=null;
		Token ON736=null;
		Token COMPLETION_SYM737=null;
		Token NOT_SYM738=null;
		Token PRESERVE_SYM739=null;
		Token RENAME740=null;
		Token TO_SYM741=null;
		Token ENABLE_SYM743=null;
		Token DISABLE_SYM744=null;
		Token DISABLE_SYM745=null;
		Token ON746=null;
		Token SLAVE747=null;
		Token COMMENT_SYM748=null;
		Token TEXT_STRING749=null;
		ParserRuleReturnScope user_name729 =null;
		ParserRuleReturnScope event_name732 =null;
		ParserRuleReturnScope schedule_definition735 =null;
		ParserRuleReturnScope event_name742 =null;
		ParserRuleReturnScope do_statement750 =null;

		Object ALTER726_tree=null;
		Object DEFINER727_tree=null;
		Object EQ_SYM728_tree=null;
		Object CURRENT_USER730_tree=null;
		Object EVENT_SYM731_tree=null;
		Object ON733_tree=null;
		Object SCHEDULE_SYM734_tree=null;
		Object ON736_tree=null;
		Object COMPLETION_SYM737_tree=null;
		Object NOT_SYM738_tree=null;
		Object PRESERVE_SYM739_tree=null;
		Object RENAME740_tree=null;
		Object TO_SYM741_tree=null;
		Object ENABLE_SYM743_tree=null;
		Object DISABLE_SYM744_tree=null;
		Object DISABLE_SYM745_tree=null;
		Object ON746_tree=null;
		Object SLAVE747_tree=null;
		Object COMMENT_SYM748_tree=null;
		Object TEXT_STRING749_tree=null;

		try {
			// MySQL.g:1865:22: ( ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )? )
			// MySQL.g:1866:2: ALTER ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? EVENT_SYM event_name ( ON SCHEDULE_SYM schedule_definition )? ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )? ( RENAME TO_SYM event_name )? ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )? ( COMMENT_SYM TEXT_STRING )? ( do_statement )?
			{
			root_0 = (Object)adaptor.nil();


			ALTER726=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_event_statement23918); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER726_tree = (Object)adaptor.create(ALTER726);
			adaptor.addChild(root_0, ALTER726_tree);
			}

			// MySQL.g:1867:2: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==DEFINER) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// MySQL.g:1867:3: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER727=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_alter_event_statement23922); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER727_tree = (Object)adaptor.create(DEFINER727);
					adaptor.addChild(root_0, DEFINER727_tree);
					}

					EQ_SYM728=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_event_statement23924); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM728_tree = (Object)adaptor.create(EQ_SYM728);
					adaptor.addChild(root_0, EQ_SYM728_tree);
					}

					// MySQL.g:1867:18: ( user_name | CURRENT_USER )
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( (LA235_0==ID) ) {
						alt235=1;
					}
					else if ( (LA235_0==CURRENT_USER) ) {
						alt235=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 235, 0, input);
						throw nvae;
					}

					switch (alt235) {
						case 1 :
							// MySQL.g:1867:20: user_name
							{
							pushFollow(FOLLOW_user_name_in_alter_event_statement23928);
							user_name729=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name729.getTree());

							}
							break;
						case 2 :
							// MySQL.g:1867:32: CURRENT_USER
							{
							CURRENT_USER730=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_alter_event_statement23932); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER730_tree = (Object)adaptor.create(CURRENT_USER730);
							adaptor.addChild(root_0, CURRENT_USER730_tree);
							}

							}
							break;

					}

					}
					break;

			}

			EVENT_SYM731=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_alter_event_statement23939); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM731_tree = (Object)adaptor.create(EVENT_SYM731);
			adaptor.addChild(root_0, EVENT_SYM731_tree);
			}

			pushFollow(FOLLOW_event_name_in_alter_event_statement23941);
			event_name732=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name732.getTree());

			// MySQL.g:1869:2: ( ON SCHEDULE_SYM schedule_definition )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==ON) ) {
				int LA237_1 = input.LA(2);
				if ( (LA237_1==SCHEDULE_SYM) ) {
					alt237=1;
				}
			}
			switch (alt237) {
				case 1 :
					// MySQL.g:1869:3: ON SCHEDULE_SYM schedule_definition
					{
					ON733=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement23945); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON733_tree = (Object)adaptor.create(ON733);
					adaptor.addChild(root_0, ON733_tree);
					}

					SCHEDULE_SYM734=(Token)match(input,SCHEDULE_SYM,FOLLOW_SCHEDULE_SYM_in_alter_event_statement23947); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SCHEDULE_SYM734_tree = (Object)adaptor.create(SCHEDULE_SYM734);
					adaptor.addChild(root_0, SCHEDULE_SYM734_tree);
					}

					pushFollow(FOLLOW_schedule_definition_in_alter_event_statement23949);
					schedule_definition735=schedule_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schedule_definition735.getTree());

					}
					break;

			}

			// MySQL.g:1870:2: ( ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==ON) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// MySQL.g:1870:3: ON COMPLETION_SYM ( NOT_SYM )? PRESERVE_SYM
					{
					ON736=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement23955); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON736_tree = (Object)adaptor.create(ON736);
					adaptor.addChild(root_0, ON736_tree);
					}

					COMPLETION_SYM737=(Token)match(input,COMPLETION_SYM,FOLLOW_COMPLETION_SYM_in_alter_event_statement23957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLETION_SYM737_tree = (Object)adaptor.create(COMPLETION_SYM737);
					adaptor.addChild(root_0, COMPLETION_SYM737_tree);
					}

					// MySQL.g:1870:21: ( NOT_SYM )?
					int alt238=2;
					int LA238_0 = input.LA(1);
					if ( (LA238_0==NOT_SYM) ) {
						alt238=1;
					}
					switch (alt238) {
						case 1 :
							// MySQL.g:1870:22: NOT_SYM
							{
							NOT_SYM738=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_alter_event_statement23960); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							NOT_SYM738_tree = (Object)adaptor.create(NOT_SYM738);
							adaptor.addChild(root_0, NOT_SYM738_tree);
							}

							}
							break;

					}

					PRESERVE_SYM739=(Token)match(input,PRESERVE_SYM,FOLLOW_PRESERVE_SYM_in_alter_event_statement23964); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRESERVE_SYM739_tree = (Object)adaptor.create(PRESERVE_SYM739);
					adaptor.addChild(root_0, PRESERVE_SYM739_tree);
					}

					}
					break;

			}

			// MySQL.g:1871:2: ( RENAME TO_SYM event_name )?
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==RENAME) ) {
				alt240=1;
			}
			switch (alt240) {
				case 1 :
					// MySQL.g:1871:3: RENAME TO_SYM event_name
					{
					RENAME740=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_event_statement23970); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RENAME740_tree = (Object)adaptor.create(RENAME740);
					adaptor.addChild(root_0, RENAME740_tree);
					}

					TO_SYM741=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_event_statement23972); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM741_tree = (Object)adaptor.create(TO_SYM741);
					adaptor.addChild(root_0, TO_SYM741_tree);
					}

					pushFollow(FOLLOW_event_name_in_alter_event_statement23974);
					event_name742=event_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name742.getTree());

					}
					break;

			}

			// MySQL.g:1872:2: ( ENABLE_SYM | DISABLE_SYM | ( DISABLE_SYM ON SLAVE ) )?
			int alt241=4;
			int LA241_0 = input.LA(1);
			if ( (LA241_0==ENABLE_SYM) ) {
				alt241=1;
			}
			else if ( (LA241_0==DISABLE_SYM) ) {
				int LA241_2 = input.LA(2);
				if ( (LA241_2==ON) ) {
					alt241=3;
				}
				else if ( (LA241_2==EOF||(LA241_2 >= COMMA && LA241_2 <= COMMENT_SYM)||LA241_2==DO_SYM||LA241_2==SEMI) ) {
					alt241=2;
				}
			}
			switch (alt241) {
				case 1 :
					// MySQL.g:1872:4: ENABLE_SYM
					{
					ENABLE_SYM743=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_event_statement23981); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM743_tree = (Object)adaptor.create(ENABLE_SYM743);
					adaptor.addChild(root_0, ENABLE_SYM743_tree);
					}

					}
					break;
				case 2 :
					// MySQL.g:1872:17: DISABLE_SYM
					{
					DISABLE_SYM744=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_event_statement23985); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM744_tree = (Object)adaptor.create(DISABLE_SYM744);
					adaptor.addChild(root_0, DISABLE_SYM744_tree);
					}

					}
					break;
				case 3 :
					// MySQL.g:1872:31: ( DISABLE_SYM ON SLAVE )
					{
					// MySQL.g:1872:31: ( DISABLE_SYM ON SLAVE )
					// MySQL.g:1872:32: DISABLE_SYM ON SLAVE
					{
					DISABLE_SYM745=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_event_statement23990); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM745_tree = (Object)adaptor.create(DISABLE_SYM745);
					adaptor.addChild(root_0, DISABLE_SYM745_tree);
					}

					ON746=(Token)match(input,ON,FOLLOW_ON_in_alter_event_statement23992); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON746_tree = (Object)adaptor.create(ON746);
					adaptor.addChild(root_0, ON746_tree);
					}

					SLAVE747=(Token)match(input,SLAVE,FOLLOW_SLAVE_in_alter_event_statement23994); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SLAVE747_tree = (Object)adaptor.create(SLAVE747);
					adaptor.addChild(root_0, SLAVE747_tree);
					}

					}

					}
					break;

			}

			// MySQL.g:1873:2: ( COMMENT_SYM TEXT_STRING )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==COMMENT_SYM) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// MySQL.g:1873:3: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM748=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_alter_event_statement24002); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM748_tree = (Object)adaptor.create(COMMENT_SYM748);
					adaptor.addChild(root_0, COMMENT_SYM748_tree);
					}

					TEXT_STRING749=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_alter_event_statement24004); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING749_tree = (Object)adaptor.create(TEXT_STRING749);
					adaptor.addChild(root_0, TEXT_STRING749_tree);
					}

					}
					break;

			}

			// MySQL.g:1874:2: ( do_statement )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==DO_SYM) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// MySQL.g:1874:3: do_statement
					{
					pushFollow(FOLLOW_do_statement_in_alter_event_statement24010);
					do_statement750=do_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, do_statement750.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_event_statement"


	public static class drop_event_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_event_statement"
	// MySQL.g:1879:1: drop_event_statement : DROP EVENT_SYM ( IF EXISTS )? event_name ;
	public final MySQLParser.drop_event_statement_return drop_event_statement() throws RecognitionException {
		MySQLParser.drop_event_statement_return retval = new MySQLParser.drop_event_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP751=null;
		Token EVENT_SYM752=null;
		Token IF753=null;
		Token EXISTS754=null;
		ParserRuleReturnScope event_name755 =null;

		Object DROP751_tree=null;
		Object EVENT_SYM752_tree=null;
		Object IF753_tree=null;
		Object EXISTS754_tree=null;

		try {
			// MySQL.g:1879:21: ( DROP EVENT_SYM ( IF EXISTS )? event_name )
			// MySQL.g:1880:2: DROP EVENT_SYM ( IF EXISTS )? event_name
			{
			root_0 = (Object)adaptor.nil();


			DROP751=(Token)match(input,DROP,FOLLOW_DROP_in_drop_event_statement24023); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP751_tree = (Object)adaptor.create(DROP751);
			adaptor.addChild(root_0, DROP751_tree);
			}

			EVENT_SYM752=(Token)match(input,EVENT_SYM,FOLLOW_EVENT_SYM_in_drop_event_statement24025); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EVENT_SYM752_tree = (Object)adaptor.create(EVENT_SYM752);
			adaptor.addChild(root_0, EVENT_SYM752_tree);
			}

			// MySQL.g:1880:17: ( IF EXISTS )?
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==IF) ) {
				alt244=1;
			}
			switch (alt244) {
				case 1 :
					// MySQL.g:1880:18: IF EXISTS
					{
					IF753=(Token)match(input,IF,FOLLOW_IF_in_drop_event_statement24028); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF753_tree = (Object)adaptor.create(IF753);
					adaptor.addChild(root_0, IF753_tree);
					}

					EXISTS754=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_event_statement24030); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS754_tree = (Object)adaptor.create(EXISTS754);
					adaptor.addChild(root_0, EXISTS754_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_event_name_in_drop_event_statement24034);
			event_name755=event_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, event_name755.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_event_statement"


	public static class create_index_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_index_statement"
	// MySQL.g:1916:1: create_index_statement : CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )* ;
	public final MySQLParser.create_index_statement_return create_index_statement() throws RecognitionException {
		MySQLParser.create_index_statement_return retval = new MySQLParser.create_index_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE756=null;
		Token set757=null;
		Token INDEX_SYM758=null;
		Token ON761=null;
		Token LPAREN763=null;
		Token COMMA765=null;
		Token RPAREN767=null;
		ParserRuleReturnScope index_name759 =null;
		ParserRuleReturnScope index_type760 =null;
		ParserRuleReturnScope table_name762 =null;
		ParserRuleReturnScope index_column_name764 =null;
		ParserRuleReturnScope index_column_name766 =null;
		ParserRuleReturnScope algorithm_option768 =null;
		ParserRuleReturnScope lock_option769 =null;

		Object CREATE756_tree=null;
		Object set757_tree=null;
		Object INDEX_SYM758_tree=null;
		Object ON761_tree=null;
		Object LPAREN763_tree=null;
		Object COMMA765_tree=null;
		Object RPAREN767_tree=null;

		try {
			// MySQL.g:1916:23: ( CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )* )
			// MySQL.g:1917:2: CREATE ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )? INDEX_SYM index_name ( index_type )? ON table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( algorithm_option | lock_option )*
			{
			root_0 = (Object)adaptor.nil();


			CREATE756=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_index_statement24056); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE756_tree = (Object)adaptor.create(CREATE756);
			adaptor.addChild(root_0, CREATE756_tree);
			}

			// MySQL.g:1917:9: ( UNIQUE_SYM | FULLTEXT_SYM | SPATIAL_SYM )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==FULLTEXT_SYM||LA245_0==SPATIAL_SYM||LA245_0==UNIQUE_SYM) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// MySQL.g:
					{
					set757=input.LT(1);
					if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM||input.LA(1)==UNIQUE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set757));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			INDEX_SYM758=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_create_index_statement24067); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INDEX_SYM758_tree = (Object)adaptor.create(INDEX_SYM758);
			adaptor.addChild(root_0, INDEX_SYM758_tree);
			}

			pushFollow(FOLLOW_index_name_in_create_index_statement24069);
			index_name759=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name759.getTree());

			// MySQL.g:1918:2: ( index_type )?
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==USING_SYM) ) {
				alt246=1;
			}
			switch (alt246) {
				case 1 :
					// MySQL.g:1918:3: index_type
					{
					pushFollow(FOLLOW_index_type_in_create_index_statement24073);
					index_type760=index_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type760.getTree());

					}
					break;

			}

			ON761=(Token)match(input,ON,FOLLOW_ON_in_create_index_statement24078); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON761_tree = (Object)adaptor.create(ON761);
			adaptor.addChild(root_0, ON761_tree);
			}

			pushFollow(FOLLOW_table_name_in_create_index_statement24080);
			table_name762=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name762.getTree());

			LPAREN763=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_index_statement24082); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN763_tree = (Object)adaptor.create(LPAREN763);
			adaptor.addChild(root_0, LPAREN763_tree);
			}

			pushFollow(FOLLOW_index_column_name_in_create_index_statement24084);
			index_column_name764=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name764.getTree());

			// MySQL.g:1919:41: ( COMMA index_column_name )*
			loop247:
			while (true) {
				int alt247=2;
				int LA247_0 = input.LA(1);
				if ( (LA247_0==COMMA) ) {
					alt247=1;
				}

				switch (alt247) {
				case 1 :
					// MySQL.g:1919:42: COMMA index_column_name
					{
					COMMA765=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_index_statement24087); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA765_tree = (Object)adaptor.create(COMMA765);
					adaptor.addChild(root_0, COMMA765_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_index_statement24089);
					index_column_name766=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name766.getTree());

					}
					break;

				default :
					break loop247;
				}
			}

			RPAREN767=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_index_statement24093); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN767_tree = (Object)adaptor.create(RPAREN767);
			adaptor.addChild(root_0, RPAREN767_tree);
			}

			// MySQL.g:1920:2: ( algorithm_option | lock_option )*
			loop248:
			while (true) {
				int alt248=3;
				int LA248_0 = input.LA(1);
				if ( (LA248_0==ALGORITHM_SYM) ) {
					alt248=1;
				}
				else if ( (LA248_0==LOCK) ) {
					alt248=2;
				}

				switch (alt248) {
				case 1 :
					// MySQL.g:1920:3: algorithm_option
					{
					pushFollow(FOLLOW_algorithm_option_in_create_index_statement24097);
					algorithm_option768=algorithm_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, algorithm_option768.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1920:22: lock_option
					{
					pushFollow(FOLLOW_lock_option_in_create_index_statement24101);
					lock_option769=lock_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_option769.getTree());

					}
					break;

				default :
					break loop248;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_index_statement"


	public static class algorithm_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "algorithm_option"
	// MySQL.g:1922:1: algorithm_option : ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ;
	public final MySQLParser.algorithm_option_return algorithm_option() throws RecognitionException {
		MySQLParser.algorithm_option_return retval = new MySQLParser.algorithm_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALGORITHM_SYM770=null;
		Token EQ_SYM771=null;
		Token set772=null;

		Object ALGORITHM_SYM770_tree=null;
		Object EQ_SYM771_tree=null;
		Object set772_tree=null;

		try {
			// MySQL.g:1922:17: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
			// MySQL.g:1923:2: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
			{
			root_0 = (Object)adaptor.nil();


			ALGORITHM_SYM770=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_algorithm_option24111); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALGORITHM_SYM770_tree = (Object)adaptor.create(ALGORITHM_SYM770);
			adaptor.addChild(root_0, ALGORITHM_SYM770_tree);
			}

			// MySQL.g:1923:16: ( EQ_SYM )?
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==EQ_SYM) ) {
				alt249=1;
			}
			switch (alt249) {
				case 1 :
					// MySQL.g:1923:17: EQ_SYM
					{
					EQ_SYM771=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_algorithm_option24114); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM771_tree = (Object)adaptor.create(EQ_SYM771);
					adaptor.addChild(root_0, EQ_SYM771_tree);
					}

					}
					break;

			}

			set772=input.LT(1);
			if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set772));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "algorithm_option"


	public static class lock_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "lock_option"
	// MySQL.g:1925:1: lock_option : LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ;
	public final MySQLParser.lock_option_return lock_option() throws RecognitionException {
		MySQLParser.lock_option_return retval = new MySQLParser.lock_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LOCK773=null;
		Token EQ_SYM774=null;
		Token set775=null;

		Object LOCK773_tree=null;
		Object EQ_SYM774_tree=null;
		Object set775_tree=null;

		try {
			// MySQL.g:1925:12: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
			// MySQL.g:1926:2: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
			{
			root_0 = (Object)adaptor.nil();


			LOCK773=(Token)match(input,LOCK,FOLLOW_LOCK_in_lock_option24132); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LOCK773_tree = (Object)adaptor.create(LOCK773);
			adaptor.addChild(root_0, LOCK773_tree);
			}

			// MySQL.g:1926:7: ( EQ_SYM )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==EQ_SYM) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// MySQL.g:1926:8: EQ_SYM
					{
					EQ_SYM774=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_lock_option24135); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM774_tree = (Object)adaptor.create(EQ_SYM774);
					adaptor.addChild(root_0, EQ_SYM774_tree);
					}

					}
					break;

			}

			set775=input.LT(1);
			if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set775));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_option"


	public static class drop_index_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_index_statement"
	// MySQL.g:1931:1: drop_index_statement : DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )* ;
	public final MySQLParser.drop_index_statement_return drop_index_statement() throws RecognitionException {
		MySQLParser.drop_index_statement_return retval = new MySQLParser.drop_index_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP776=null;
		Token INDEX_SYM777=null;
		Token ON779=null;
		ParserRuleReturnScope index_name778 =null;
		ParserRuleReturnScope table_name780 =null;
		ParserRuleReturnScope algorithm_option781 =null;
		ParserRuleReturnScope lock_option782 =null;

		Object DROP776_tree=null;
		Object INDEX_SYM777_tree=null;
		Object ON779_tree=null;

		try {
			// MySQL.g:1931:21: ( DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )* )
			// MySQL.g:1932:2: DROP INDEX_SYM index_name ON table_name ( algorithm_option | lock_option )*
			{
			root_0 = (Object)adaptor.nil();


			DROP776=(Token)match(input,DROP,FOLLOW_DROP_in_drop_index_statement24158); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP776_tree = (Object)adaptor.create(DROP776);
			adaptor.addChild(root_0, DROP776_tree);
			}

			INDEX_SYM777=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_drop_index_statement24160); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INDEX_SYM777_tree = (Object)adaptor.create(INDEX_SYM777);
			adaptor.addChild(root_0, INDEX_SYM777_tree);
			}

			pushFollow(FOLLOW_index_name_in_drop_index_statement24162);
			index_name778=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name778.getTree());

			ON779=(Token)match(input,ON,FOLLOW_ON_in_drop_index_statement24164); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ON779_tree = (Object)adaptor.create(ON779);
			adaptor.addChild(root_0, ON779_tree);
			}

			pushFollow(FOLLOW_table_name_in_drop_index_statement24166);
			table_name780=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name780.getTree());

			// MySQL.g:1933:2: ( algorithm_option | lock_option )*
			loop251:
			while (true) {
				int alt251=3;
				int LA251_0 = input.LA(1);
				if ( (LA251_0==ALGORITHM_SYM) ) {
					alt251=1;
				}
				else if ( (LA251_0==LOCK) ) {
					alt251=2;
				}

				switch (alt251) {
				case 1 :
					// MySQL.g:1933:3: algorithm_option
					{
					pushFollow(FOLLOW_algorithm_option_in_drop_index_statement24170);
					algorithm_option781=algorithm_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, algorithm_option781.getTree());

					}
					break;
				case 2 :
					// MySQL.g:1933:22: lock_option
					{
					pushFollow(FOLLOW_lock_option_in_drop_index_statement24174);
					lock_option782=lock_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_option782.getTree());

					}
					break;

				default :
					break loop251;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_index_statement"


	public static class create_server_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_server_statement"
	// MySQL.g:1965:1: create_server_statement : CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN ;
	public final MySQLParser.create_server_statement_return create_server_statement() throws RecognitionException {
		MySQLParser.create_server_statement_return retval = new MySQLParser.create_server_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE783=null;
		Token SERVER_SYM784=null;
		Token FOREIGN786=null;
		Token DATA_SYM787=null;
		Token WRAPPER_SYM788=null;
		Token OPTIONS_SYM790=null;
		Token LPAREN791=null;
		Token COMMA793=null;
		Token RPAREN795=null;
		ParserRuleReturnScope server_name785 =null;
		ParserRuleReturnScope wrapper_name789 =null;
		ParserRuleReturnScope create_server_option792 =null;
		ParserRuleReturnScope create_server_option794 =null;

		Object CREATE783_tree=null;
		Object SERVER_SYM784_tree=null;
		Object FOREIGN786_tree=null;
		Object DATA_SYM787_tree=null;
		Object WRAPPER_SYM788_tree=null;
		Object OPTIONS_SYM790_tree=null;
		Object LPAREN791_tree=null;
		Object COMMA793_tree=null;
		Object RPAREN795_tree=null;

		try {
			// MySQL.g:1965:24: ( CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN )
			// MySQL.g:1966:2: CREATE SERVER_SYM server_name FOREIGN DATA_SYM WRAPPER_SYM wrapper_name OPTIONS_SYM LPAREN create_server_option ( COMMA create_server_option )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			CREATE783=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_server_statement24200); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE783_tree = (Object)adaptor.create(CREATE783);
			adaptor.addChild(root_0, CREATE783_tree);
			}

			SERVER_SYM784=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_create_server_statement24202); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM784_tree = (Object)adaptor.create(SERVER_SYM784);
			adaptor.addChild(root_0, SERVER_SYM784_tree);
			}

			pushFollow(FOLLOW_server_name_in_create_server_statement24204);
			server_name785=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name785.getTree());

			FOREIGN786=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_server_statement24207); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			FOREIGN786_tree = (Object)adaptor.create(FOREIGN786);
			adaptor.addChild(root_0, FOREIGN786_tree);
			}

			DATA_SYM787=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_create_server_statement24209); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DATA_SYM787_tree = (Object)adaptor.create(DATA_SYM787);
			adaptor.addChild(root_0, DATA_SYM787_tree);
			}

			WRAPPER_SYM788=(Token)match(input,WRAPPER_SYM,FOLLOW_WRAPPER_SYM_in_create_server_statement24211); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			WRAPPER_SYM788_tree = (Object)adaptor.create(WRAPPER_SYM788);
			adaptor.addChild(root_0, WRAPPER_SYM788_tree);
			}

			pushFollow(FOLLOW_wrapper_name_in_create_server_statement24213);
			wrapper_name789=wrapper_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, wrapper_name789.getTree());

			OPTIONS_SYM790=(Token)match(input,OPTIONS_SYM,FOLLOW_OPTIONS_SYM_in_create_server_statement24216); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPTIONS_SYM790_tree = (Object)adaptor.create(OPTIONS_SYM790);
			adaptor.addChild(root_0, OPTIONS_SYM790_tree);
			}

			LPAREN791=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_server_statement24218); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN791_tree = (Object)adaptor.create(LPAREN791);
			adaptor.addChild(root_0, LPAREN791_tree);
			}

			pushFollow(FOLLOW_create_server_option_in_create_server_statement24220);
			create_server_option792=create_server_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_option792.getTree());

			// MySQL.g:1968:42: ( COMMA create_server_option )*
			loop252:
			while (true) {
				int alt252=2;
				int LA252_0 = input.LA(1);
				if ( (LA252_0==COMMA) ) {
					alt252=1;
				}

				switch (alt252) {
				case 1 :
					// MySQL.g:1968:43: COMMA create_server_option
					{
					COMMA793=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_server_statement24223); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA793_tree = (Object)adaptor.create(COMMA793);
					adaptor.addChild(root_0, COMMA793_tree);
					}

					pushFollow(FOLLOW_create_server_option_in_create_server_statement24225);
					create_server_option794=create_server_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_server_option794.getTree());

					}
					break;

				default :
					break loop252;
				}
			}

			RPAREN795=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_server_statement24229); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN795_tree = (Object)adaptor.create(RPAREN795);
			adaptor.addChild(root_0, RPAREN795_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_server_statement"


	public static class create_server_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_server_option"
	// MySQL.g:1970:1: create_server_option : (| ( HOST_SYM string_literal ) | ( DATABASE string_literal ) | ( USER string_literal ) | ( PASSWORD string_literal ) | ( SOCKET_SYM string_literal ) | ( OWNER_SYM string_literal ) | ( PORT_SYM number_literal ) );
	public final MySQLParser.create_server_option_return create_server_option() throws RecognitionException {
		MySQLParser.create_server_option_return retval = new MySQLParser.create_server_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token HOST_SYM796=null;
		Token DATABASE798=null;
		Token USER800=null;
		Token PASSWORD802=null;
		Token SOCKET_SYM804=null;
		Token OWNER_SYM806=null;
		Token PORT_SYM808=null;
		ParserRuleReturnScope string_literal797 =null;
		ParserRuleReturnScope string_literal799 =null;
		ParserRuleReturnScope string_literal801 =null;
		ParserRuleReturnScope string_literal803 =null;
		ParserRuleReturnScope string_literal805 =null;
		ParserRuleReturnScope string_literal807 =null;
		ParserRuleReturnScope number_literal809 =null;

		Object HOST_SYM796_tree=null;
		Object DATABASE798_tree=null;
		Object USER800_tree=null;
		Object PASSWORD802_tree=null;
		Object SOCKET_SYM804_tree=null;
		Object OWNER_SYM806_tree=null;
		Object PORT_SYM808_tree=null;

		try {
			// MySQL.g:1970:21: (| ( HOST_SYM string_literal ) | ( DATABASE string_literal ) | ( USER string_literal ) | ( PASSWORD string_literal ) | ( SOCKET_SYM string_literal ) | ( OWNER_SYM string_literal ) | ( PORT_SYM number_literal ) )
			int alt253=8;
			switch ( input.LA(1) ) {
			case EOF:
			case COMMA:
			case RPAREN:
				{
				alt253=1;
				}
				break;
			case HOST_SYM:
				{
				alt253=2;
				}
				break;
			case DATABASE:
				{
				alt253=3;
				}
				break;
			case USER:
				{
				alt253=4;
				}
				break;
			case PASSWORD:
				{
				alt253=5;
				}
				break;
			case SOCKET_SYM:
				{
				alt253=6;
				}
				break;
			case OWNER_SYM:
				{
				alt253=7;
				}
				break;
			case PORT_SYM:
				{
				alt253=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}
			switch (alt253) {
				case 1 :
					// MySQL.g:1971:2: 
					{
					root_0 = (Object)adaptor.nil();


					}
					break;
				case 2 :
					// MySQL.g:1971:4: ( HOST_SYM string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1971:4: ( HOST_SYM string_literal )
					// MySQL.g:1971:6: HOST_SYM string_literal
					{
					HOST_SYM796=(Token)match(input,HOST_SYM,FOLLOW_HOST_SYM_in_create_server_option24241); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HOST_SYM796_tree = (Object)adaptor.create(HOST_SYM796);
					adaptor.addChild(root_0, HOST_SYM796_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option24243);
					string_literal797=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal797.getTree());

					}

					}
					break;
				case 3 :
					// MySQL.g:1972:4: ( DATABASE string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1972:4: ( DATABASE string_literal )
					// MySQL.g:1972:6: DATABASE string_literal
					{
					DATABASE798=(Token)match(input,DATABASE,FOLLOW_DATABASE_in_create_server_option24252); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATABASE798_tree = (Object)adaptor.create(DATABASE798);
					adaptor.addChild(root_0, DATABASE798_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option24254);
					string_literal799=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal799.getTree());

					}

					}
					break;
				case 4 :
					// MySQL.g:1973:4: ( USER string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1973:4: ( USER string_literal )
					// MySQL.g:1973:6: USER string_literal
					{
					USER800=(Token)match(input,USER,FOLLOW_USER_in_create_server_option24263); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					USER800_tree = (Object)adaptor.create(USER800);
					adaptor.addChild(root_0, USER800_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option24265);
					string_literal801=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal801.getTree());

					}

					}
					break;
				case 5 :
					// MySQL.g:1974:4: ( PASSWORD string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1974:4: ( PASSWORD string_literal )
					// MySQL.g:1974:6: PASSWORD string_literal
					{
					PASSWORD802=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_create_server_option24274); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PASSWORD802_tree = (Object)adaptor.create(PASSWORD802);
					adaptor.addChild(root_0, PASSWORD802_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option24276);
					string_literal803=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal803.getTree());

					}

					}
					break;
				case 6 :
					// MySQL.g:1975:4: ( SOCKET_SYM string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1975:4: ( SOCKET_SYM string_literal )
					// MySQL.g:1975:6: SOCKET_SYM string_literal
					{
					SOCKET_SYM804=(Token)match(input,SOCKET_SYM,FOLLOW_SOCKET_SYM_in_create_server_option24285); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SOCKET_SYM804_tree = (Object)adaptor.create(SOCKET_SYM804);
					adaptor.addChild(root_0, SOCKET_SYM804_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option24287);
					string_literal805=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal805.getTree());

					}

					}
					break;
				case 7 :
					// MySQL.g:1976:4: ( OWNER_SYM string_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1976:4: ( OWNER_SYM string_literal )
					// MySQL.g:1976:6: OWNER_SYM string_literal
					{
					OWNER_SYM806=(Token)match(input,OWNER_SYM,FOLLOW_OWNER_SYM_in_create_server_option24296); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OWNER_SYM806_tree = (Object)adaptor.create(OWNER_SYM806);
					adaptor.addChild(root_0, OWNER_SYM806_tree);
					}

					pushFollow(FOLLOW_string_literal_in_create_server_option24298);
					string_literal807=string_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, string_literal807.getTree());

					}

					}
					break;
				case 8 :
					// MySQL.g:1977:4: ( PORT_SYM number_literal )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:1977:4: ( PORT_SYM number_literal )
					// MySQL.g:1977:6: PORT_SYM number_literal
					{
					PORT_SYM808=(Token)match(input,PORT_SYM,FOLLOW_PORT_SYM_in_create_server_option24307); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PORT_SYM808_tree = (Object)adaptor.create(PORT_SYM808);
					adaptor.addChild(root_0, PORT_SYM808_tree);
					}

					pushFollow(FOLLOW_number_literal_in_create_server_option24309);
					number_literal809=number_literal();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal809.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_server_option"


	public static class alter_server_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_server_statement"
	// MySQL.g:1982:1: alter_server_statement : ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN ;
	public final MySQLParser.alter_server_statement_return alter_server_statement() throws RecognitionException {
		MySQLParser.alter_server_statement_return retval = new MySQLParser.alter_server_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER810=null;
		Token SERVER_SYM811=null;
		Token OPTIONS_SYM813=null;
		Token LPAREN814=null;
		Token COMMA816=null;
		Token RPAREN818=null;
		ParserRuleReturnScope server_name812 =null;
		ParserRuleReturnScope alter_server_option815 =null;
		ParserRuleReturnScope alter_server_option817 =null;

		Object ALTER810_tree=null;
		Object SERVER_SYM811_tree=null;
		Object OPTIONS_SYM813_tree=null;
		Object LPAREN814_tree=null;
		Object COMMA816_tree=null;
		Object RPAREN818_tree=null;

		try {
			// MySQL.g:1982:23: ( ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN )
			// MySQL.g:1983:2: ALTER SERVER_SYM server_name OPTIONS_SYM LPAREN alter_server_option ( COMMA alter_server_option )* RPAREN
			{
			root_0 = (Object)adaptor.nil();


			ALTER810=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_server_statement24322); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER810_tree = (Object)adaptor.create(ALTER810);
			adaptor.addChild(root_0, ALTER810_tree);
			}

			SERVER_SYM811=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_alter_server_statement24324); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM811_tree = (Object)adaptor.create(SERVER_SYM811);
			adaptor.addChild(root_0, SERVER_SYM811_tree);
			}

			pushFollow(FOLLOW_server_name_in_alter_server_statement24326);
			server_name812=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name812.getTree());

			OPTIONS_SYM813=(Token)match(input,OPTIONS_SYM,FOLLOW_OPTIONS_SYM_in_alter_server_statement24329); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			OPTIONS_SYM813_tree = (Object)adaptor.create(OPTIONS_SYM813);
			adaptor.addChild(root_0, OPTIONS_SYM813_tree);
			}

			LPAREN814=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_server_statement24331); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN814_tree = (Object)adaptor.create(LPAREN814);
			adaptor.addChild(root_0, LPAREN814_tree);
			}

			pushFollow(FOLLOW_alter_server_option_in_alter_server_statement24333);
			alter_server_option815=alter_server_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_option815.getTree());

			// MySQL.g:1984:41: ( COMMA alter_server_option )*
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==COMMA) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// MySQL.g:1984:42: COMMA alter_server_option
					{
					COMMA816=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_server_statement24336); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA816_tree = (Object)adaptor.create(COMMA816);
					adaptor.addChild(root_0, COMMA816_tree);
					}

					pushFollow(FOLLOW_alter_server_option_in_alter_server_statement24338);
					alter_server_option817=alter_server_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_server_option817.getTree());

					}
					break;

				default :
					break loop254;
				}
			}

			RPAREN818=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_server_statement24342); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN818_tree = (Object)adaptor.create(RPAREN818);
			adaptor.addChild(root_0, RPAREN818_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_server_statement"


	public static class alter_server_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_server_option"
	// MySQL.g:1986:1: alter_server_option : ( USER ) ( ID | TEXT_STRING ) ;
	public final MySQLParser.alter_server_option_return alter_server_option() throws RecognitionException {
		MySQLParser.alter_server_option_return retval = new MySQLParser.alter_server_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USER819=null;
		Token set820=null;

		Object USER819_tree=null;
		Object set820_tree=null;

		try {
			// MySQL.g:1986:20: ( ( USER ) ( ID | TEXT_STRING ) )
			// MySQL.g:1987:2: ( USER ) ( ID | TEXT_STRING )
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:1987:2: ( USER )
			// MySQL.g:1987:3: USER
			{
			USER819=(Token)match(input,USER,FOLLOW_USER_in_alter_server_option24351); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USER819_tree = (Object)adaptor.create(USER819);
			adaptor.addChild(root_0, USER819_tree);
			}

			}

			set820=input.LT(1);
			if ( input.LA(1)==ID||input.LA(1)==TEXT_STRING ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set820));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_server_option"


	public static class drop_server_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_server_statement"
	// MySQL.g:1992:1: drop_server_statement : DROP SERVER_SYM ( IF EXISTS )? server_name ;
	public final MySQLParser.drop_server_statement_return drop_server_statement() throws RecognitionException {
		MySQLParser.drop_server_statement_return retval = new MySQLParser.drop_server_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP821=null;
		Token SERVER_SYM822=null;
		Token IF823=null;
		Token EXISTS824=null;
		ParserRuleReturnScope server_name825 =null;

		Object DROP821_tree=null;
		Object SERVER_SYM822_tree=null;
		Object IF823_tree=null;
		Object EXISTS824_tree=null;

		try {
			// MySQL.g:1992:22: ( DROP SERVER_SYM ( IF EXISTS )? server_name )
			// MySQL.g:1993:2: DROP SERVER_SYM ( IF EXISTS )? server_name
			{
			root_0 = (Object)adaptor.nil();


			DROP821=(Token)match(input,DROP,FOLLOW_DROP_in_drop_server_statement24369); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP821_tree = (Object)adaptor.create(DROP821);
			adaptor.addChild(root_0, DROP821_tree);
			}

			SERVER_SYM822=(Token)match(input,SERVER_SYM,FOLLOW_SERVER_SYM_in_drop_server_statement24371); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SERVER_SYM822_tree = (Object)adaptor.create(SERVER_SYM822);
			adaptor.addChild(root_0, SERVER_SYM822_tree);
			}

			// MySQL.g:1993:18: ( IF EXISTS )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==IF) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// MySQL.g:1993:19: IF EXISTS
					{
					IF823=(Token)match(input,IF,FOLLOW_IF_in_drop_server_statement24374); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF823_tree = (Object)adaptor.create(IF823);
					adaptor.addChild(root_0, IF823_tree);
					}

					EXISTS824=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_server_statement24376); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS824_tree = (Object)adaptor.create(EXISTS824);
					adaptor.addChild(root_0, EXISTS824_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_server_name_in_drop_server_statement24380);
			server_name825=server_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, server_name825.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_server_statement"


	public static class create_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement"
	// MySQL.g:2002:1: create_table_statement : ( create_table_statement1 | create_table_statement2 | create_table_statement3 );
	public final MySQLParser.create_table_statement_return create_table_statement() throws RecognitionException {
		MySQLParser.create_table_statement_return retval = new MySQLParser.create_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope create_table_statement1826 =null;
		ParserRuleReturnScope create_table_statement2827 =null;
		ParserRuleReturnScope create_table_statement3828 =null;


		try {
			// MySQL.g:2002:23: ( create_table_statement1 | create_table_statement2 | create_table_statement3 )
			int alt256=3;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==CREATE) ) {
				int LA256_1 = input.LA(2);
				if ( (LA256_1==TEMPORARY) ) {
					int LA256_2 = input.LA(3);
					if ( (LA256_2==TABLE) ) {
						int LA256_3 = input.LA(4);
						if ( (LA256_3==IF) ) {
							int LA256_4 = input.LA(5);
							if ( (LA256_4==NOT_SYM) ) {
								int LA256_6 = input.LA(6);
								if ( (LA256_6==EXISTS) ) {
									int LA256_10 = input.LA(7);
									if ( (LA256_10==ID) ) {
										switch ( input.LA(8) ) {
										case LPAREN:
											{
											int LA256_7 = input.LA(9);
											if ( (LA256_7==LIKE_SYM) ) {
												alt256=3;
											}
											else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
												alt256=1;
											}

											else {
												if (state.backtracking>0) {state.failed=true; return retval;}
												int nvaeMark = input.mark();
												try {
													for (int nvaeConsume = 0; nvaeConsume < 9 - 1; nvaeConsume++) {
														input.consume();
													}
													NoViableAltException nvae =
														new NoViableAltException("", 256, 7, input);
													throw nvae;
												} finally {
													input.rewind(nvaeMark);
												}
											}

											}
											break;
										case AUTO_INCREMENT:
										case AVG_ROW_LENGTH:
										case CHARACTER_SYM:
										case CHECKSUM_SYM:
										case COLLATE_SYM:
										case COMMENT_SYM:
										case CONNECTION_SYM:
										case DATA_SYM:
										case DEFAULT:
										case DELAY_KEY_WRITE_SYM:
										case ENGINE_SYM:
										case INDEX_SYM:
										case INSERT_METHOD:
										case KEY_BLOCK_SIZE:
										case MAX_ROWS:
										case MIN_ROWS:
										case PACK_KEYS_SYM:
										case PARTITION_SYM:
										case PASSWORD:
										case ROW_FORMAT_SYM:
										case SELECT:
										case STATS_AUTO_RECALC:
										case STATS_PERSISTENT:
										case UNION_SYM:
											{
											alt256=2;
											}
											break;
										case LIKE_SYM:
											{
											alt256=3;
											}
											break;
										default:
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 256, 5, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}
									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 256, 10, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 6, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 4, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA256_3==ID) ) {
							switch ( input.LA(5) ) {
							case LPAREN:
								{
								int LA256_7 = input.LA(6);
								if ( (LA256_7==LIKE_SYM) ) {
									alt256=3;
								}
								else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
									alt256=1;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

								}
								break;
							case AUTO_INCREMENT:
							case AVG_ROW_LENGTH:
							case CHARACTER_SYM:
							case CHECKSUM_SYM:
							case COLLATE_SYM:
							case COMMENT_SYM:
							case CONNECTION_SYM:
							case DATA_SYM:
							case DEFAULT:
							case DELAY_KEY_WRITE_SYM:
							case ENGINE_SYM:
							case INDEX_SYM:
							case INSERT_METHOD:
							case KEY_BLOCK_SIZE:
							case MAX_ROWS:
							case MIN_ROWS:
							case PACK_KEYS_SYM:
							case PARTITION_SYM:
							case PASSWORD:
							case ROW_FORMAT_SYM:
							case SELECT:
							case STATS_AUTO_RECALC:
							case STATS_PERSISTENT:
							case UNION_SYM:
								{
								alt256=2;
								}
								break;
							case LIKE_SYM:
								{
								alt256=3;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 5, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 256, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA256_1==TABLE) ) {
					int LA256_3 = input.LA(3);
					if ( (LA256_3==IF) ) {
						int LA256_4 = input.LA(4);
						if ( (LA256_4==NOT_SYM) ) {
							int LA256_6 = input.LA(5);
							if ( (LA256_6==EXISTS) ) {
								int LA256_10 = input.LA(6);
								if ( (LA256_10==ID) ) {
									switch ( input.LA(7) ) {
									case LPAREN:
										{
										int LA256_7 = input.LA(8);
										if ( (LA256_7==LIKE_SYM) ) {
											alt256=3;
										}
										else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
											alt256=1;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return retval;}
											int nvaeMark = input.mark();
											try {
												for (int nvaeConsume = 0; nvaeConsume < 8 - 1; nvaeConsume++) {
													input.consume();
												}
												NoViableAltException nvae =
													new NoViableAltException("", 256, 7, input);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case AUTO_INCREMENT:
									case AVG_ROW_LENGTH:
									case CHARACTER_SYM:
									case CHECKSUM_SYM:
									case COLLATE_SYM:
									case COMMENT_SYM:
									case CONNECTION_SYM:
									case DATA_SYM:
									case DEFAULT:
									case DELAY_KEY_WRITE_SYM:
									case ENGINE_SYM:
									case INDEX_SYM:
									case INSERT_METHOD:
									case KEY_BLOCK_SIZE:
									case MAX_ROWS:
									case MIN_ROWS:
									case PACK_KEYS_SYM:
									case PARTITION_SYM:
									case PASSWORD:
									case ROW_FORMAT_SYM:
									case SELECT:
									case STATS_AUTO_RECALC:
									case STATS_PERSISTENT:
									case UNION_SYM:
										{
										alt256=2;
										}
										break;
									case LIKE_SYM:
										{
										alt256=3;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 256, 5, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 256, 10, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 6, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA256_3==ID) ) {
						switch ( input.LA(4) ) {
						case LPAREN:
							{
							int LA256_7 = input.LA(5);
							if ( (LA256_7==LIKE_SYM) ) {
								alt256=3;
							}
							else if ( (LA256_7==CHECK_SYM||LA256_7==CONSTRAINT||LA256_7==FOREIGN||LA256_7==FULLTEXT_SYM||LA256_7==ID||LA256_7==INDEX_SYM||LA256_7==KEY_SYM||LA256_7==PRIMARY_SYM||LA256_7==SPATIAL_SYM||LA256_7==UNIQUE_SYM) ) {
								alt256=1;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 256, 7, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AUTO_INCREMENT:
						case AVG_ROW_LENGTH:
						case CHARACTER_SYM:
						case CHECKSUM_SYM:
						case COLLATE_SYM:
						case COMMENT_SYM:
						case CONNECTION_SYM:
						case DATA_SYM:
						case DEFAULT:
						case DELAY_KEY_WRITE_SYM:
						case ENGINE_SYM:
						case INDEX_SYM:
						case INSERT_METHOD:
						case KEY_BLOCK_SIZE:
						case MAX_ROWS:
						case MIN_ROWS:
						case PACK_KEYS_SYM:
						case PARTITION_SYM:
						case PASSWORD:
						case ROW_FORMAT_SYM:
						case SELECT:
						case STATS_AUTO_RECALC:
						case STATS_PERSISTENT:
						case UNION_SYM:
							{
							alt256=2;
							}
							break;
						case LIKE_SYM:
							{
							alt256=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 256, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 256, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 256, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}

			switch (alt256) {
				case 1 :
					// MySQL.g:2003:2: create_table_statement1
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement1_in_create_table_statement24395);
					create_table_statement1826=create_table_statement1();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement1826.getTree());

					}
					break;
				case 2 :
					// MySQL.g:2003:28: create_table_statement2
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement2_in_create_table_statement24399);
					create_table_statement2827=create_table_statement2();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement2827.getTree());

					}
					break;
				case 3 :
					// MySQL.g:2003:54: create_table_statement3
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_table_statement3_in_create_table_statement24403);
					create_table_statement3828=create_table_statement3();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_table_statement3828.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement"


	public static class create_table_statement1_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement1"
	// MySQL.g:2006:1: create_table_statement1 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? ;
	public final MySQLParser.create_table_statement1_return create_table_statement1() throws RecognitionException {
		MySQLParser.create_table_statement1_return retval = new MySQLParser.create_table_statement1_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE829=null;
		Token TEMPORARY830=null;
		Token TABLE831=null;
		Token IF832=null;
		Token NOT_SYM833=null;
		Token EXISTS834=null;
		Token LPAREN836=null;
		Token COMMA838=null;
		Token RPAREN840=null;
		ParserRuleReturnScope table_name835 =null;
		ParserRuleReturnScope create_definition837 =null;
		ParserRuleReturnScope create_definition839 =null;
		ParserRuleReturnScope table_options841 =null;
		ParserRuleReturnScope partition_options842 =null;
		ParserRuleReturnScope select_statement843 =null;

		Object CREATE829_tree=null;
		Object TEMPORARY830_tree=null;
		Object TABLE831_tree=null;
		Object IF832_tree=null;
		Object NOT_SYM833_tree=null;
		Object EXISTS834_tree=null;
		Object LPAREN836_tree=null;
		Object COMMA838_tree=null;
		Object RPAREN840_tree=null;

		try {
			// MySQL.g:2006:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )? )
			// MySQL.g:2007:2: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name LPAREN create_definition ( COMMA create_definition )* RPAREN ( table_options )? ( partition_options )? ( select_statement )?
			{
			root_0 = (Object)adaptor.nil();


			CREATE829=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement124413); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE829_tree = (Object)adaptor.create(CREATE829);
			adaptor.addChild(root_0, CREATE829_tree);
			}

			// MySQL.g:2007:9: ( TEMPORARY )?
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==TEMPORARY) ) {
				alt257=1;
			}
			switch (alt257) {
				case 1 :
					// MySQL.g:2007:10: TEMPORARY
					{
					TEMPORARY830=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement124416); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY830_tree = (Object)adaptor.create(TEMPORARY830);
					adaptor.addChild(root_0, TEMPORARY830_tree);
					}

					}
					break;

			}

			TABLE831=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement124420); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE831_tree = (Object)adaptor.create(TABLE831);
			adaptor.addChild(root_0, TABLE831_tree);
			}

			// MySQL.g:2007:28: ( IF NOT_SYM EXISTS )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==IF) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// MySQL.g:2007:29: IF NOT_SYM EXISTS
					{
					IF832=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement124423); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF832_tree = (Object)adaptor.create(IF832);
					adaptor.addChild(root_0, IF832_tree);
					}

					NOT_SYM833=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement124425); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM833_tree = (Object)adaptor.create(NOT_SYM833);
					adaptor.addChild(root_0, NOT_SYM833_tree);
					}

					EXISTS834=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement124427); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS834_tree = (Object)adaptor.create(EXISTS834);
					adaptor.addChild(root_0, EXISTS834_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement124431);
			table_name835=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name835.getTree());

			LPAREN836=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_statement124434); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN836_tree = (Object)adaptor.create(LPAREN836);
			adaptor.addChild(root_0, LPAREN836_tree);
			}

			pushFollow(FOLLOW_create_definition_in_create_table_statement124436);
			create_definition837=create_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition837.getTree());

			// MySQL.g:2008:27: ( COMMA create_definition )*
			loop259:
			while (true) {
				int alt259=2;
				int LA259_0 = input.LA(1);
				if ( (LA259_0==COMMA) ) {
					alt259=1;
				}

				switch (alt259) {
				case 1 :
					// MySQL.g:2008:28: COMMA create_definition
					{
					COMMA838=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_table_statement124439); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA838_tree = (Object)adaptor.create(COMMA838);
					adaptor.addChild(root_0, COMMA838_tree);
					}

					pushFollow(FOLLOW_create_definition_in_create_table_statement124441);
					create_definition839=create_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_definition839.getTree());

					}
					break;

				default :
					break loop259;
				}
			}

			RPAREN840=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_statement124445); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN840_tree = (Object)adaptor.create(RPAREN840);
			adaptor.addChild(root_0, RPAREN840_tree);
			}

			// MySQL.g:2009:2: ( table_options )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==AUTO_INCREMENT||LA260_0==AVG_ROW_LENGTH||LA260_0==CHARACTER_SYM||LA260_0==CHECKSUM_SYM||LA260_0==COLLATE_SYM||LA260_0==COMMENT_SYM||LA260_0==CONNECTION_SYM||LA260_0==DATA_SYM||LA260_0==DEFAULT||LA260_0==DELAY_KEY_WRITE_SYM||LA260_0==ENGINE_SYM||LA260_0==INDEX_SYM||LA260_0==INSERT_METHOD||LA260_0==KEY_BLOCK_SIZE||LA260_0==MAX_ROWS||LA260_0==MIN_ROWS||LA260_0==PACK_KEYS_SYM||LA260_0==PASSWORD||LA260_0==ROW_FORMAT_SYM||(LA260_0 >= STATS_AUTO_RECALC && LA260_0 <= STATS_PERSISTENT)||LA260_0==UNION_SYM) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// MySQL.g:2009:3: table_options
					{
					pushFollow(FOLLOW_table_options_in_create_table_statement124449);
					table_options841=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options841.getTree());

					}
					break;

			}

			// MySQL.g:2010:2: ( partition_options )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==PARTITION_SYM) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// MySQL.g:2010:3: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_create_table_statement124455);
					partition_options842=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options842.getTree());

					}
					break;

			}

			// MySQL.g:2011:2: ( select_statement )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==SELECT) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// MySQL.g:2011:3: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_create_table_statement124461);
					select_statement843=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement843.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement1"


	public static class create_table_statement2_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement2"
	// MySQL.g:2014:1: create_table_statement2 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement ;
	public final MySQLParser.create_table_statement2_return create_table_statement2() throws RecognitionException {
		MySQLParser.create_table_statement2_return retval = new MySQLParser.create_table_statement2_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE844=null;
		Token TEMPORARY845=null;
		Token TABLE846=null;
		Token IF847=null;
		Token NOT_SYM848=null;
		Token EXISTS849=null;
		ParserRuleReturnScope table_name850 =null;
		ParserRuleReturnScope table_options851 =null;
		ParserRuleReturnScope partition_options852 =null;
		ParserRuleReturnScope select_statement853 =null;

		Object CREATE844_tree=null;
		Object TEMPORARY845_tree=null;
		Object TABLE846_tree=null;
		Object IF847_tree=null;
		Object NOT_SYM848_tree=null;
		Object EXISTS849_tree=null;

		try {
			// MySQL.g:2014:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement )
			// MySQL.g:2015:2: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( table_options )? ( partition_options )? select_statement
			{
			root_0 = (Object)adaptor.nil();


			CREATE844=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement224472); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE844_tree = (Object)adaptor.create(CREATE844);
			adaptor.addChild(root_0, CREATE844_tree);
			}

			// MySQL.g:2015:9: ( TEMPORARY )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==TEMPORARY) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// MySQL.g:2015:10: TEMPORARY
					{
					TEMPORARY845=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement224475); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY845_tree = (Object)adaptor.create(TEMPORARY845);
					adaptor.addChild(root_0, TEMPORARY845_tree);
					}

					}
					break;

			}

			TABLE846=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement224479); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE846_tree = (Object)adaptor.create(TABLE846);
			adaptor.addChild(root_0, TABLE846_tree);
			}

			// MySQL.g:2015:28: ( IF NOT_SYM EXISTS )?
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==IF) ) {
				alt264=1;
			}
			switch (alt264) {
				case 1 :
					// MySQL.g:2015:29: IF NOT_SYM EXISTS
					{
					IF847=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement224482); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF847_tree = (Object)adaptor.create(IF847);
					adaptor.addChild(root_0, IF847_tree);
					}

					NOT_SYM848=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement224484); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM848_tree = (Object)adaptor.create(NOT_SYM848);
					adaptor.addChild(root_0, NOT_SYM848_tree);
					}

					EXISTS849=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement224486); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS849_tree = (Object)adaptor.create(EXISTS849);
					adaptor.addChild(root_0, EXISTS849_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement224490);
			table_name850=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name850.getTree());

			// MySQL.g:2016:2: ( table_options )?
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==AUTO_INCREMENT||LA265_0==AVG_ROW_LENGTH||LA265_0==CHARACTER_SYM||LA265_0==CHECKSUM_SYM||LA265_0==COLLATE_SYM||LA265_0==COMMENT_SYM||LA265_0==CONNECTION_SYM||LA265_0==DATA_SYM||LA265_0==DEFAULT||LA265_0==DELAY_KEY_WRITE_SYM||LA265_0==ENGINE_SYM||LA265_0==INDEX_SYM||LA265_0==INSERT_METHOD||LA265_0==KEY_BLOCK_SIZE||LA265_0==MAX_ROWS||LA265_0==MIN_ROWS||LA265_0==PACK_KEYS_SYM||LA265_0==PASSWORD||LA265_0==ROW_FORMAT_SYM||(LA265_0 >= STATS_AUTO_RECALC && LA265_0 <= STATS_PERSISTENT)||LA265_0==UNION_SYM) ) {
				alt265=1;
			}
			switch (alt265) {
				case 1 :
					// MySQL.g:2016:3: table_options
					{
					pushFollow(FOLLOW_table_options_in_create_table_statement224494);
					table_options851=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options851.getTree());

					}
					break;

			}

			// MySQL.g:2017:2: ( partition_options )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==PARTITION_SYM) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// MySQL.g:2017:3: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_create_table_statement224500);
					partition_options852=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options852.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_select_statement_in_create_table_statement224505);
			select_statement853=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement853.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement2"


	public static class create_table_statement3_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_table_statement3"
	// MySQL.g:2021:1: create_table_statement3 : CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) ;
	public final MySQLParser.create_table_statement3_return create_table_statement3() throws RecognitionException {
		MySQLParser.create_table_statement3_return retval = new MySQLParser.create_table_statement3_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE854=null;
		Token TEMPORARY855=null;
		Token TABLE856=null;
		Token IF857=null;
		Token NOT_SYM858=null;
		Token EXISTS859=null;
		Token LIKE_SYM861=null;
		Token LPAREN863=null;
		Token LIKE_SYM864=null;
		Token RPAREN866=null;
		ParserRuleReturnScope table_name860 =null;
		ParserRuleReturnScope table_name862 =null;
		ParserRuleReturnScope table_name865 =null;

		Object CREATE854_tree=null;
		Object TEMPORARY855_tree=null;
		Object TABLE856_tree=null;
		Object IF857_tree=null;
		Object NOT_SYM858_tree=null;
		Object EXISTS859_tree=null;
		Object LIKE_SYM861_tree=null;
		Object LPAREN863_tree=null;
		Object LIKE_SYM864_tree=null;
		Object RPAREN866_tree=null;

		try {
			// MySQL.g:2021:24: ( CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) ) )
			// MySQL.g:2022:2: CREATE ( TEMPORARY )? TABLE ( IF NOT_SYM EXISTS )? table_name ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
			{
			root_0 = (Object)adaptor.nil();


			CREATE854=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_table_statement324514); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE854_tree = (Object)adaptor.create(CREATE854);
			adaptor.addChild(root_0, CREATE854_tree);
			}

			// MySQL.g:2022:9: ( TEMPORARY )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==TEMPORARY) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// MySQL.g:2022:10: TEMPORARY
					{
					TEMPORARY855=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_create_table_statement324517); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY855_tree = (Object)adaptor.create(TEMPORARY855);
					adaptor.addChild(root_0, TEMPORARY855_tree);
					}

					}
					break;

			}

			TABLE856=(Token)match(input,TABLE,FOLLOW_TABLE_in_create_table_statement324521); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE856_tree = (Object)adaptor.create(TABLE856);
			adaptor.addChild(root_0, TABLE856_tree);
			}

			// MySQL.g:2022:28: ( IF NOT_SYM EXISTS )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==IF) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// MySQL.g:2022:29: IF NOT_SYM EXISTS
					{
					IF857=(Token)match(input,IF,FOLLOW_IF_in_create_table_statement324524); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF857_tree = (Object)adaptor.create(IF857);
					adaptor.addChild(root_0, IF857_tree);
					}

					NOT_SYM858=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_create_table_statement324526); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM858_tree = (Object)adaptor.create(NOT_SYM858);
					adaptor.addChild(root_0, NOT_SYM858_tree);
					}

					EXISTS859=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_create_table_statement324528); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS859_tree = (Object)adaptor.create(EXISTS859);
					adaptor.addChild(root_0, EXISTS859_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_create_table_statement324532);
			table_name860=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name860.getTree());

			// MySQL.g:2023:2: ( ( LIKE_SYM table_name ) | ( LPAREN LIKE_SYM table_name RPAREN ) )
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==LIKE_SYM) ) {
				alt269=1;
			}
			else if ( (LA269_0==LPAREN) ) {
				alt269=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}

			switch (alt269) {
				case 1 :
					// MySQL.g:2023:4: ( LIKE_SYM table_name )
					{
					// MySQL.g:2023:4: ( LIKE_SYM table_name )
					// MySQL.g:2023:5: LIKE_SYM table_name
					{
					LIKE_SYM861=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_statement324538); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM861_tree = (Object)adaptor.create(LIKE_SYM861);
					adaptor.addChild(root_0, LIKE_SYM861_tree);
					}

					pushFollow(FOLLOW_table_name_in_create_table_statement324540);
					table_name862=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name862.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:2023:28: ( LPAREN LIKE_SYM table_name RPAREN )
					{
					// MySQL.g:2023:28: ( LPAREN LIKE_SYM table_name RPAREN )
					// MySQL.g:2023:29: LPAREN LIKE_SYM table_name RPAREN
					{
					LPAREN863=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_table_statement324546); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN863_tree = (Object)adaptor.create(LPAREN863);
					adaptor.addChild(root_0, LPAREN863_tree);
					}

					LIKE_SYM864=(Token)match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_create_table_statement324548); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIKE_SYM864_tree = (Object)adaptor.create(LIKE_SYM864);
					adaptor.addChild(root_0, LIKE_SYM864_tree);
					}

					pushFollow(FOLLOW_table_name_in_create_table_statement324550);
					table_name865=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name865.getTree());

					RPAREN866=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_table_statement324552); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN866_tree = (Object)adaptor.create(RPAREN866);
					adaptor.addChild(root_0, RPAREN866_tree);
					}

					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_table_statement3"


	public static class create_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_definition"
	// MySQL.g:2026:1: create_definition : ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) );
	public final MySQLParser.create_definition_return create_definition() throws RecognitionException {
		MySQLParser.create_definition_return retval = new MySQLParser.create_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CONSTRAINT869=null;
		Token PRIMARY_SYM871=null;
		Token KEY_SYM872=null;
		Token LPAREN874=null;
		Token COMMA876=null;
		Token RPAREN878=null;
		Token set880=null;
		Token LPAREN883=null;
		Token COMMA885=null;
		Token RPAREN887=null;
		Token CONSTRAINT889=null;
		Token UNIQUE_SYM891=null;
		Token set892=null;
		Token LPAREN895=null;
		Token COMMA897=null;
		Token RPAREN899=null;
		Token set901=null;
		Token set902=null;
		Token LPAREN904=null;
		Token COMMA906=null;
		Token RPAREN908=null;
		Token CONSTRAINT910=null;
		Token FOREIGN912=null;
		Token KEY_SYM913=null;
		Token LPAREN915=null;
		Token COMMA917=null;
		Token RPAREN919=null;
		Token CHECK_SYM921=null;
		Token LPAREN922=null;
		Token RPAREN924=null;
		ParserRuleReturnScope column_name867 =null;
		ParserRuleReturnScope column_definition868 =null;
		ParserRuleReturnScope constraint_symbol_name870 =null;
		ParserRuleReturnScope index_type873 =null;
		ParserRuleReturnScope index_column_name875 =null;
		ParserRuleReturnScope index_column_name877 =null;
		ParserRuleReturnScope index_option879 =null;
		ParserRuleReturnScope index_name881 =null;
		ParserRuleReturnScope index_type882 =null;
		ParserRuleReturnScope index_column_name884 =null;
		ParserRuleReturnScope index_column_name886 =null;
		ParserRuleReturnScope index_option888 =null;
		ParserRuleReturnScope constraint_symbol_name890 =null;
		ParserRuleReturnScope index_name893 =null;
		ParserRuleReturnScope index_type894 =null;
		ParserRuleReturnScope index_column_name896 =null;
		ParserRuleReturnScope index_column_name898 =null;
		ParserRuleReturnScope index_option900 =null;
		ParserRuleReturnScope index_name903 =null;
		ParserRuleReturnScope index_column_name905 =null;
		ParserRuleReturnScope index_column_name907 =null;
		ParserRuleReturnScope index_option909 =null;
		ParserRuleReturnScope constraint_symbol_name911 =null;
		ParserRuleReturnScope index_name914 =null;
		ParserRuleReturnScope index_column_name916 =null;
		ParserRuleReturnScope index_column_name918 =null;
		ParserRuleReturnScope reference_definition920 =null;
		ParserRuleReturnScope expression923 =null;

		Object CONSTRAINT869_tree=null;
		Object PRIMARY_SYM871_tree=null;
		Object KEY_SYM872_tree=null;
		Object LPAREN874_tree=null;
		Object COMMA876_tree=null;
		Object RPAREN878_tree=null;
		Object set880_tree=null;
		Object LPAREN883_tree=null;
		Object COMMA885_tree=null;
		Object RPAREN887_tree=null;
		Object CONSTRAINT889_tree=null;
		Object UNIQUE_SYM891_tree=null;
		Object set892_tree=null;
		Object LPAREN895_tree=null;
		Object COMMA897_tree=null;
		Object RPAREN899_tree=null;
		Object set901_tree=null;
		Object set902_tree=null;
		Object LPAREN904_tree=null;
		Object COMMA906_tree=null;
		Object RPAREN908_tree=null;
		Object CONSTRAINT910_tree=null;
		Object FOREIGN912_tree=null;
		Object KEY_SYM913_tree=null;
		Object LPAREN915_tree=null;
		Object COMMA917_tree=null;
		Object RPAREN919_tree=null;
		Object CHECK_SYM921_tree=null;
		Object LPAREN922_tree=null;
		Object RPAREN924_tree=null;

		try {
			// MySQL.g:2026:18: ( ( column_name column_definition ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition ) | ( CHECK_SYM LPAREN expression RPAREN ) )
			int alt294=7;
			switch ( input.LA(1) ) {
			case ID:
				{
				alt294=1;
				}
				break;
			case CONSTRAINT:
				{
				switch ( input.LA(2) ) {
				case ID:
					{
					switch ( input.LA(3) ) {
					case PRIMARY_SYM:
						{
						alt294=2;
						}
						break;
					case UNIQUE_SYM:
						{
						alt294=4;
						}
						break;
					case FOREIGN:
						{
						alt294=6;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 294, 9, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case PRIMARY_SYM:
					{
					alt294=2;
					}
					break;
				case UNIQUE_SYM:
					{
					alt294=4;
					}
					break;
				case FOREIGN:
					{
					alt294=6;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 294, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case PRIMARY_SYM:
				{
				alt294=2;
				}
				break;
			case INDEX_SYM:
			case KEY_SYM:
				{
				alt294=3;
				}
				break;
			case UNIQUE_SYM:
				{
				alt294=4;
				}
				break;
			case FULLTEXT_SYM:
			case SPATIAL_SYM:
				{
				alt294=5;
				}
				break;
			case FOREIGN:
				{
				alt294=6;
				}
				break;
			case CHECK_SYM:
				{
				alt294=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 294, 0, input);
				throw nvae;
			}
			switch (alt294) {
				case 1 :
					// MySQL.g:2027:4: ( column_name column_definition )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2027:4: ( column_name column_definition )
					// MySQL.g:2027:7: column_name column_definition
					{
					pushFollow(FOLLOW_column_name_in_create_definition24569);
					column_name867=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name867.getTree());

					pushFollow(FOLLOW_column_definition_in_create_definition24571);
					column_definition868=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition868.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:2028:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2028:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// MySQL.g:2028:7: ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					// MySQL.g:2028:7: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt271=2;
					int LA271_0 = input.LA(1);
					if ( (LA271_0==CONSTRAINT) ) {
						alt271=1;
					}
					switch (alt271) {
						case 1 :
							// MySQL.g:2028:8: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT869=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition24583); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT869_tree = (Object)adaptor.create(CONSTRAINT869);
							adaptor.addChild(root_0, CONSTRAINT869_tree);
							}

							// MySQL.g:2028:19: ( constraint_symbol_name )?
							int alt270=2;
							int LA270_0 = input.LA(1);
							if ( (LA270_0==ID) ) {
								alt270=1;
							}
							switch (alt270) {
								case 1 :
									// MySQL.g:2028:20: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition24586);
									constraint_symbol_name870=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name870.getTree());

									}
									break;

							}

							}
							break;

					}

					PRIMARY_SYM871=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_create_definition24592); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM871_tree = (Object)adaptor.create(PRIMARY_SYM871);
					adaptor.addChild(root_0, PRIMARY_SYM871_tree);
					}

					KEY_SYM872=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition24594); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM872_tree = (Object)adaptor.create(KEY_SYM872);
					adaptor.addChild(root_0, KEY_SYM872_tree);
					}

					// MySQL.g:2028:67: ( index_type )?
					int alt272=2;
					int LA272_0 = input.LA(1);
					if ( (LA272_0==USING_SYM) ) {
						alt272=1;
					}
					switch (alt272) {
						case 1 :
							// MySQL.g:2028:68: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition24597);
							index_type873=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type873.getTree());

							}
							break;

					}

					LPAREN874=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition24601); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN874_tree = (Object)adaptor.create(LPAREN874);
					adaptor.addChild(root_0, LPAREN874_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition24603);
					index_column_name875=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name875.getTree());

					// MySQL.g:2028:106: ( COMMA index_column_name )*
					loop273:
					while (true) {
						int alt273=2;
						int LA273_0 = input.LA(1);
						if ( (LA273_0==COMMA) ) {
							alt273=1;
						}

						switch (alt273) {
						case 1 :
							// MySQL.g:2028:107: COMMA index_column_name
							{
							COMMA876=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition24606); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA876_tree = (Object)adaptor.create(COMMA876);
							adaptor.addChild(root_0, COMMA876_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition24608);
							index_column_name877=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name877.getTree());

							}
							break;

						default :
							break loop273;
						}
					}

					RPAREN878=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition24612); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN878_tree = (Object)adaptor.create(RPAREN878);
					adaptor.addChild(root_0, RPAREN878_tree);
					}

					// MySQL.g:2028:140: ( index_option )*
					loop274:
					while (true) {
						int alt274=2;
						int LA274_0 = input.LA(1);
						if ( (LA274_0==COMMENT_SYM||LA274_0==KEY_BLOCK_SIZE||LA274_0==USING_SYM||LA274_0==WITH) ) {
							alt274=1;
						}

						switch (alt274) {
						case 1 :
							// MySQL.g:2028:141: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition24615);
							index_option879=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option879.getTree());

							}
							break;

						default :
							break loop274;
						}
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2029:4: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2029:4: ( ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// MySQL.g:2029:7: ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					set880=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set880));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// MySQL.g:2029:27: ( index_name )?
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==ID) ) {
						alt275=1;
					}
					switch (alt275) {
						case 1 :
							// MySQL.g:2029:28: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition24635);
							index_name881=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name881.getTree());

							}
							break;

					}

					// MySQL.g:2029:41: ( index_type )?
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==USING_SYM) ) {
						alt276=1;
					}
					switch (alt276) {
						case 1 :
							// MySQL.g:2029:42: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition24640);
							index_type882=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type882.getTree());

							}
							break;

					}

					LPAREN883=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition24644); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN883_tree = (Object)adaptor.create(LPAREN883);
					adaptor.addChild(root_0, LPAREN883_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition24646);
					index_column_name884=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name884.getTree());

					// MySQL.g:2029:80: ( COMMA index_column_name )*
					loop277:
					while (true) {
						int alt277=2;
						int LA277_0 = input.LA(1);
						if ( (LA277_0==COMMA) ) {
							alt277=1;
						}

						switch (alt277) {
						case 1 :
							// MySQL.g:2029:81: COMMA index_column_name
							{
							COMMA885=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition24649); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA885_tree = (Object)adaptor.create(COMMA885);
							adaptor.addChild(root_0, COMMA885_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition24651);
							index_column_name886=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name886.getTree());

							}
							break;

						default :
							break loop277;
						}
					}

					RPAREN887=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition24655); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN887_tree = (Object)adaptor.create(RPAREN887);
					adaptor.addChild(root_0, RPAREN887_tree);
					}

					// MySQL.g:2029:114: ( index_option )*
					loop278:
					while (true) {
						int alt278=2;
						int LA278_0 = input.LA(1);
						if ( (LA278_0==COMMENT_SYM||LA278_0==KEY_BLOCK_SIZE||LA278_0==USING_SYM||LA278_0==WITH) ) {
							alt278=1;
						}

						switch (alt278) {
						case 1 :
							// MySQL.g:2029:115: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition24658);
							index_option888=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option888.getTree());

							}
							break;

						default :
							break loop278;
						}
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:2030:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2030:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// MySQL.g:2030:7: ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					// MySQL.g:2030:7: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==CONSTRAINT) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// MySQL.g:2030:8: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT889=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition24672); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT889_tree = (Object)adaptor.create(CONSTRAINT889);
							adaptor.addChild(root_0, CONSTRAINT889_tree);
							}

							// MySQL.g:2030:19: ( constraint_symbol_name )?
							int alt279=2;
							int LA279_0 = input.LA(1);
							if ( (LA279_0==ID) ) {
								alt279=1;
							}
							switch (alt279) {
								case 1 :
									// MySQL.g:2030:20: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition24675);
									constraint_symbol_name890=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name890.getTree());

									}
									break;

							}

							}
							break;

					}

					UNIQUE_SYM891=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_create_definition24681); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM891_tree = (Object)adaptor.create(UNIQUE_SYM891);
					adaptor.addChild(root_0, UNIQUE_SYM891_tree);
					}

					// MySQL.g:2030:58: ( INDEX_SYM | KEY_SYM )?
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==INDEX_SYM||LA281_0==KEY_SYM) ) {
						alt281=1;
					}
					switch (alt281) {
						case 1 :
							// MySQL.g:
							{
							set892=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set892));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// MySQL.g:2030:79: ( index_name )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==ID) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// MySQL.g:2030:80: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition24691);
							index_name893=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name893.getTree());

							}
							break;

					}

					// MySQL.g:2030:93: ( index_type )?
					int alt283=2;
					int LA283_0 = input.LA(1);
					if ( (LA283_0==USING_SYM) ) {
						alt283=1;
					}
					switch (alt283) {
						case 1 :
							// MySQL.g:2030:94: index_type
							{
							pushFollow(FOLLOW_index_type_in_create_definition24696);
							index_type894=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type894.getTree());

							}
							break;

					}

					LPAREN895=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition24700); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN895_tree = (Object)adaptor.create(LPAREN895);
					adaptor.addChild(root_0, LPAREN895_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition24702);
					index_column_name896=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name896.getTree());

					// MySQL.g:2030:132: ( COMMA index_column_name )*
					loop284:
					while (true) {
						int alt284=2;
						int LA284_0 = input.LA(1);
						if ( (LA284_0==COMMA) ) {
							alt284=1;
						}

						switch (alt284) {
						case 1 :
							// MySQL.g:2030:133: COMMA index_column_name
							{
							COMMA897=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition24705); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA897_tree = (Object)adaptor.create(COMMA897);
							adaptor.addChild(root_0, COMMA897_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition24707);
							index_column_name898=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name898.getTree());

							}
							break;

						default :
							break loop284;
						}
					}

					RPAREN899=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition24711); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN899_tree = (Object)adaptor.create(RPAREN899);
					adaptor.addChild(root_0, RPAREN899_tree);
					}

					// MySQL.g:2030:166: ( index_option )*
					loop285:
					while (true) {
						int alt285=2;
						int LA285_0 = input.LA(1);
						if ( (LA285_0==COMMENT_SYM||LA285_0==KEY_BLOCK_SIZE||LA285_0==USING_SYM||LA285_0==WITH) ) {
							alt285=1;
						}

						switch (alt285) {
						case 1 :
							// MySQL.g:2030:167: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition24714);
							index_option900=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option900.getTree());

							}
							break;

						default :
							break loop285;
						}
					}

					}

					}
					break;
				case 5 :
					// MySQL.g:2031:4: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2031:4: ( ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// MySQL.g:2031:7: ( FULLTEXT_SYM | SPATIAL_SYM ) ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					set901=input.LT(1);
					if ( input.LA(1)==FULLTEXT_SYM||input.LA(1)==SPATIAL_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set901));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// MySQL.g:2031:34: ( INDEX_SYM | KEY_SYM )?
					int alt286=2;
					int LA286_0 = input.LA(1);
					if ( (LA286_0==INDEX_SYM||LA286_0==KEY_SYM) ) {
						alt286=1;
					}
					switch (alt286) {
						case 1 :
							// MySQL.g:
							{
							set902=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set902));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// MySQL.g:2031:55: ( index_name )?
					int alt287=2;
					int LA287_0 = input.LA(1);
					if ( (LA287_0==ID) ) {
						alt287=1;
					}
					switch (alt287) {
						case 1 :
							// MySQL.g:2031:56: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition24741);
							index_name903=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name903.getTree());

							}
							break;

					}

					LPAREN904=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition24745); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN904_tree = (Object)adaptor.create(LPAREN904);
					adaptor.addChild(root_0, LPAREN904_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition24747);
					index_column_name905=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name905.getTree());

					// MySQL.g:2031:94: ( COMMA index_column_name )*
					loop288:
					while (true) {
						int alt288=2;
						int LA288_0 = input.LA(1);
						if ( (LA288_0==COMMA) ) {
							alt288=1;
						}

						switch (alt288) {
						case 1 :
							// MySQL.g:2031:95: COMMA index_column_name
							{
							COMMA906=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition24750); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA906_tree = (Object)adaptor.create(COMMA906);
							adaptor.addChild(root_0, COMMA906_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition24752);
							index_column_name907=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name907.getTree());

							}
							break;

						default :
							break loop288;
						}
					}

					RPAREN908=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition24756); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN908_tree = (Object)adaptor.create(RPAREN908);
					adaptor.addChild(root_0, RPAREN908_tree);
					}

					// MySQL.g:2031:128: ( index_option )*
					loop289:
					while (true) {
						int alt289=2;
						int LA289_0 = input.LA(1);
						if ( (LA289_0==COMMENT_SYM||LA289_0==KEY_BLOCK_SIZE||LA289_0==USING_SYM||LA289_0==WITH) ) {
							alt289=1;
						}

						switch (alt289) {
						case 1 :
							// MySQL.g:2031:129: index_option
							{
							pushFollow(FOLLOW_index_option_in_create_definition24759);
							index_option909=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option909.getTree());

							}
							break;

						default :
							break loop289;
						}
					}

					}

					}
					break;
				case 6 :
					// MySQL.g:2032:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2032:4: ( ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition )
					// MySQL.g:2032:7: ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN reference_definition
					{
					// MySQL.g:2032:7: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt291=2;
					int LA291_0 = input.LA(1);
					if ( (LA291_0==CONSTRAINT) ) {
						alt291=1;
					}
					switch (alt291) {
						case 1 :
							// MySQL.g:2032:8: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT910=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_create_definition24773); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT910_tree = (Object)adaptor.create(CONSTRAINT910);
							adaptor.addChild(root_0, CONSTRAINT910_tree);
							}

							// MySQL.g:2032:19: ( constraint_symbol_name )?
							int alt290=2;
							int LA290_0 = input.LA(1);
							if ( (LA290_0==ID) ) {
								alt290=1;
							}
							switch (alt290) {
								case 1 :
									// MySQL.g:2032:20: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_create_definition24776);
									constraint_symbol_name911=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name911.getTree());

									}
									break;

							}

							}
							break;

					}

					FOREIGN912=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_create_definition24782); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN912_tree = (Object)adaptor.create(FOREIGN912);
					adaptor.addChild(root_0, FOREIGN912_tree);
					}

					KEY_SYM913=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_create_definition24784); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM913_tree = (Object)adaptor.create(KEY_SYM913);
					adaptor.addChild(root_0, KEY_SYM913_tree);
					}

					// MySQL.g:2032:63: ( index_name )?
					int alt292=2;
					int LA292_0 = input.LA(1);
					if ( (LA292_0==ID) ) {
						alt292=1;
					}
					switch (alt292) {
						case 1 :
							// MySQL.g:2032:64: index_name
							{
							pushFollow(FOLLOW_index_name_in_create_definition24787);
							index_name914=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name914.getTree());

							}
							break;

					}

					LPAREN915=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition24791); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN915_tree = (Object)adaptor.create(LPAREN915);
					adaptor.addChild(root_0, LPAREN915_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_create_definition24793);
					index_column_name916=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name916.getTree());

					// MySQL.g:2032:102: ( COMMA index_column_name )*
					loop293:
					while (true) {
						int alt293=2;
						int LA293_0 = input.LA(1);
						if ( (LA293_0==COMMA) ) {
							alt293=1;
						}

						switch (alt293) {
						case 1 :
							// MySQL.g:2032:103: COMMA index_column_name
							{
							COMMA917=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_definition24796); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA917_tree = (Object)adaptor.create(COMMA917);
							adaptor.addChild(root_0, COMMA917_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_create_definition24798);
							index_column_name918=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name918.getTree());

							}
							break;

						default :
							break loop293;
						}
					}

					RPAREN919=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition24802); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN919_tree = (Object)adaptor.create(RPAREN919);
					adaptor.addChild(root_0, RPAREN919_tree);
					}

					pushFollow(FOLLOW_reference_definition_in_create_definition24804);
					reference_definition920=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition920.getTree());

					}

					}
					break;
				case 7 :
					// MySQL.g:2033:4: ( CHECK_SYM LPAREN expression RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2033:4: ( CHECK_SYM LPAREN expression RPAREN )
					// MySQL.g:2033:7: CHECK_SYM LPAREN expression RPAREN
					{
					CHECK_SYM921=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_definition24815); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM921_tree = (Object)adaptor.create(CHECK_SYM921);
					adaptor.addChild(root_0, CHECK_SYM921_tree);
					}

					LPAREN922=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_definition24817); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN922_tree = (Object)adaptor.create(LPAREN922);
					adaptor.addChild(root_0, LPAREN922_tree);
					}

					pushFollow(FOLLOW_expression_in_create_definition24819);
					expression923=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression923.getTree());

					RPAREN924=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_definition24821); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN924_tree = (Object)adaptor.create(RPAREN924);
					adaptor.addChild(root_0, RPAREN924_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_definition"


	public static class column_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_definition"
	// MySQL.g:2036:1: column_definition : column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? ;
	public final MySQLParser.column_definition_return column_definition() throws RecognitionException {
		MySQLParser.column_definition_return retval = new MySQLParser.column_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token AUTO_INCREMENT926=null;
		Token UNIQUE_SYM927=null;
		Token KEY_SYM928=null;
		Token PRIMARY_SYM929=null;
		Token KEY_SYM930=null;
		Token COMMENT_SYM931=null;
		Token TEXT_STRING932=null;
		Token COLUMN_FORMAT933=null;
		Token set934=null;
		ParserRuleReturnScope column_data_type_header925 =null;
		ParserRuleReturnScope reference_definition935 =null;

		Object AUTO_INCREMENT926_tree=null;
		Object UNIQUE_SYM927_tree=null;
		Object KEY_SYM928_tree=null;
		Object PRIMARY_SYM929_tree=null;
		Object KEY_SYM930_tree=null;
		Object COMMENT_SYM931_tree=null;
		Object TEXT_STRING932_tree=null;
		Object COLUMN_FORMAT933_tree=null;
		Object set934_tree=null;

		try {
			// MySQL.g:2036:18: ( column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )? )
			// MySQL.g:2037:2: column_data_type_header ( AUTO_INCREMENT )? ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )? ( COMMENT_SYM TEXT_STRING )? ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )? ( reference_definition )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_data_type_header_in_column_definition24833);
			column_data_type_header925=column_data_type_header();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_data_type_header925.getTree());

			// MySQL.g:2038:2: ( AUTO_INCREMENT )?
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==AUTO_INCREMENT) ) {
				alt295=1;
			}
			switch (alt295) {
				case 1 :
					// MySQL.g:2038:3: AUTO_INCREMENT
					{
					AUTO_INCREMENT926=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_column_definition24837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AUTO_INCREMENT926_tree = (Object)adaptor.create(AUTO_INCREMENT926);
					adaptor.addChild(root_0, AUTO_INCREMENT926_tree);
					}

					}
					break;

			}

			// MySQL.g:2038:20: ( ( UNIQUE_SYM ( KEY_SYM )? ) | ( PRIMARY_SYM ( KEY_SYM )? ) )?
			int alt298=3;
			int LA298_0 = input.LA(1);
			if ( (LA298_0==UNIQUE_SYM) ) {
				alt298=1;
			}
			else if ( (LA298_0==PRIMARY_SYM) ) {
				alt298=2;
			}
			switch (alt298) {
				case 1 :
					// MySQL.g:2038:22: ( UNIQUE_SYM ( KEY_SYM )? )
					{
					// MySQL.g:2038:22: ( UNIQUE_SYM ( KEY_SYM )? )
					// MySQL.g:2038:23: UNIQUE_SYM ( KEY_SYM )?
					{
					UNIQUE_SYM927=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_column_definition24844); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM927_tree = (Object)adaptor.create(UNIQUE_SYM927);
					adaptor.addChild(root_0, UNIQUE_SYM927_tree);
					}

					// MySQL.g:2038:34: ( KEY_SYM )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==KEY_SYM) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// MySQL.g:2038:35: KEY_SYM
							{
							KEY_SYM928=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition24847); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM928_tree = (Object)adaptor.create(KEY_SYM928);
							adaptor.addChild(root_0, KEY_SYM928_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2038:48: ( PRIMARY_SYM ( KEY_SYM )? )
					{
					// MySQL.g:2038:48: ( PRIMARY_SYM ( KEY_SYM )? )
					// MySQL.g:2038:49: PRIMARY_SYM ( KEY_SYM )?
					{
					PRIMARY_SYM929=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_column_definition24855); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM929_tree = (Object)adaptor.create(PRIMARY_SYM929);
					adaptor.addChild(root_0, PRIMARY_SYM929_tree);
					}

					// MySQL.g:2038:61: ( KEY_SYM )?
					int alt297=2;
					int LA297_0 = input.LA(1);
					if ( (LA297_0==KEY_SYM) ) {
						alt297=1;
					}
					switch (alt297) {
						case 1 :
							// MySQL.g:2038:62: KEY_SYM
							{
							KEY_SYM930=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_column_definition24858); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM930_tree = (Object)adaptor.create(KEY_SYM930);
							adaptor.addChild(root_0, KEY_SYM930_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}

			// MySQL.g:2039:2: ( COMMENT_SYM TEXT_STRING )?
			int alt299=2;
			int LA299_0 = input.LA(1);
			if ( (LA299_0==COMMENT_SYM) ) {
				alt299=1;
			}
			switch (alt299) {
				case 1 :
					// MySQL.g:2039:3: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM931=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_column_definition24868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM931_tree = (Object)adaptor.create(COMMENT_SYM931);
					adaptor.addChild(root_0, COMMENT_SYM931_tree);
					}

					TEXT_STRING932=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_definition24870); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING932_tree = (Object)adaptor.create(TEXT_STRING932);
					adaptor.addChild(root_0, TEXT_STRING932_tree);
					}

					}
					break;

			}

			// MySQL.g:2040:2: ( COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT ) )?
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==COLUMN_FORMAT) ) {
				alt300=1;
			}
			switch (alt300) {
				case 1 :
					// MySQL.g:2040:3: COLUMN_FORMAT ( FIXED_SYM | DYNAMIC_SYM | DEFAULT )
					{
					COLUMN_FORMAT933=(Token)match(input,COLUMN_FORMAT,FOLLOW_COLUMN_FORMAT_in_column_definition24876); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLUMN_FORMAT933_tree = (Object)adaptor.create(COLUMN_FORMAT933);
					adaptor.addChild(root_0, COLUMN_FORMAT933_tree);
					}

					set934=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set934));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:2041:2: ( reference_definition )?
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==REFERENCES) ) {
				alt301=1;
			}
			switch (alt301) {
				case 1 :
					// MySQL.g:2041:3: reference_definition
					{
					pushFollow(FOLLOW_reference_definition_in_column_definition24890);
					reference_definition935=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition935.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_definition"


	public static class null_or_notnull_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "null_or_notnull"
	// MySQL.g:2044:1: null_or_notnull : ( ( NOT_SYM NULL_SYM ) | NULL_SYM );
	public final MySQLParser.null_or_notnull_return null_or_notnull() throws RecognitionException {
		MySQLParser.null_or_notnull_return retval = new MySQLParser.null_or_notnull_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token NOT_SYM936=null;
		Token NULL_SYM937=null;
		Token NULL_SYM938=null;

		Object NOT_SYM936_tree=null;
		Object NULL_SYM937_tree=null;
		Object NULL_SYM938_tree=null;

		try {
			// MySQL.g:2044:16: ( ( NOT_SYM NULL_SYM ) | NULL_SYM )
			int alt302=2;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==NOT_SYM) ) {
				alt302=1;
			}
			else if ( (LA302_0==NULL_SYM) ) {
				alt302=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 302, 0, input);
				throw nvae;
			}

			switch (alt302) {
				case 1 :
					// MySQL.g:2045:2: ( NOT_SYM NULL_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2045:2: ( NOT_SYM NULL_SYM )
					// MySQL.g:2045:3: NOT_SYM NULL_SYM
					{
					NOT_SYM936=(Token)match(input,NOT_SYM,FOLLOW_NOT_SYM_in_null_or_notnull24902); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NOT_SYM936_tree = (Object)adaptor.create(NOT_SYM936);
					adaptor.addChild(root_0, NOT_SYM936_tree);
					}

					NULL_SYM937=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull24904); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM937_tree = (Object)adaptor.create(NULL_SYM937);
					adaptor.addChild(root_0, NULL_SYM937_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2045:23: NULL_SYM
					{
					root_0 = (Object)adaptor.nil();


					NULL_SYM938=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_null_or_notnull24909); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM938_tree = (Object)adaptor.create(NULL_SYM938);
					adaptor.addChild(root_0, NULL_SYM938_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_or_notnull"


	public static class column_data_type_header_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_data_type_header"
	// MySQL.g:2048:1: column_data_type_header : ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) );
	public final MySQLParser.column_data_type_header_return column_data_type_header() throws RecognitionException {
		MySQLParser.column_data_type_header_return retval = new MySQLParser.column_data_type_header_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token BIT_SYM939=null;
		Token LPAREN940=null;
		Token RPAREN942=null;
		Token DEFAULT944=null;
		Token TINYINT946=null;
		Token LPAREN947=null;
		Token RPAREN949=null;
		Token UNSIGNED_SYM950=null;
		Token ZEROFILL951=null;
		Token DEFAULT953=null;
		Token SMALLINT955=null;
		Token LPAREN956=null;
		Token RPAREN958=null;
		Token UNSIGNED_SYM959=null;
		Token ZEROFILL960=null;
		Token DEFAULT962=null;
		Token MEDIUMINT964=null;
		Token LPAREN965=null;
		Token RPAREN967=null;
		Token UNSIGNED_SYM968=null;
		Token ZEROFILL969=null;
		Token DEFAULT971=null;
		Token INT_SYM973=null;
		Token LPAREN974=null;
		Token RPAREN976=null;
		Token UNSIGNED_SYM977=null;
		Token ZEROFILL978=null;
		Token DEFAULT980=null;
		Token INTEGER_SYM982=null;
		Token LPAREN983=null;
		Token RPAREN985=null;
		Token UNSIGNED_SYM986=null;
		Token ZEROFILL987=null;
		Token DEFAULT989=null;
		Token BIGINT991=null;
		Token LPAREN992=null;
		Token RPAREN994=null;
		Token UNSIGNED_SYM995=null;
		Token ZEROFILL996=null;
		Token DEFAULT998=null;
		Token REAL1000=null;
		Token LPAREN1001=null;
		Token COMMA1003=null;
		Token RPAREN1005=null;
		Token UNSIGNED_SYM1006=null;
		Token ZEROFILL1007=null;
		Token DEFAULT1009=null;
		Token DOUBLE_SYM1011=null;
		Token LPAREN1012=null;
		Token COMMA1014=null;
		Token RPAREN1016=null;
		Token UNSIGNED_SYM1017=null;
		Token ZEROFILL1018=null;
		Token DEFAULT1020=null;
		Token FLOAT_SYM1022=null;
		Token LPAREN1023=null;
		Token COMMA1025=null;
		Token RPAREN1027=null;
		Token UNSIGNED_SYM1028=null;
		Token ZEROFILL1029=null;
		Token DEFAULT1031=null;
		Token DECIMAL_SYM1033=null;
		Token LPAREN1034=null;
		Token COMMA1036=null;
		Token RPAREN1038=null;
		Token UNSIGNED_SYM1039=null;
		Token ZEROFILL1040=null;
		Token DEFAULT1042=null;
		Token NUMERIC_SYM1044=null;
		Token LPAREN1045=null;
		Token COMMA1047=null;
		Token RPAREN1049=null;
		Token UNSIGNED_SYM1050=null;
		Token ZEROFILL1051=null;
		Token DEFAULT1053=null;
		Token DATE_SYM1055=null;
		Token DEFAULT1057=null;
		Token TEXT_STRING1058=null;
		Token TIME_SYM1059=null;
		Token DEFAULT1061=null;
		Token TEXT_STRING1062=null;
		Token TIMESTAMP1063=null;
		Token DEFAULT1065=null;
		Token set1066=null;
		Token DATETIME1067=null;
		Token DEFAULT1069=null;
		Token set1070=null;
		Token YEAR1071=null;
		Token DEFAULT1073=null;
		Token INTEGER_NUM1074=null;
		Token CHAR1075=null;
		Token LPAREN1076=null;
		Token RPAREN1078=null;
		Token CHARACTER_SYM1079=null;
		Token SET_SYM1080=null;
		Token COLLATE_SYM1082=null;
		Token DEFAULT1085=null;
		Token TEXT_STRING1086=null;
		Token VARCHAR1087=null;
		Token LPAREN1088=null;
		Token RPAREN1090=null;
		Token CHARACTER_SYM1091=null;
		Token SET_SYM1092=null;
		Token COLLATE_SYM1094=null;
		Token DEFAULT1097=null;
		Token TEXT_STRING1098=null;
		Token BINARY1099=null;
		Token LPAREN1100=null;
		Token RPAREN1102=null;
		Token DEFAULT1104=null;
		Token TEXT_STRING1105=null;
		Token VARBINARY1106=null;
		Token LPAREN1107=null;
		Token RPAREN1109=null;
		Token DEFAULT1111=null;
		Token TEXT_STRING1112=null;
		Token TINYBLOB1113=null;
		Token BLOB_SYM1115=null;
		Token MEDIUMBLOB1117=null;
		Token LONGBLOB1119=null;
		Token TINYTEXT1121=null;
		Token BINARY1122=null;
		Token CHARACTER_SYM1123=null;
		Token SET_SYM1124=null;
		Token COLLATE_SYM1126=null;
		Token TEXT_SYM1129=null;
		Token BINARY1130=null;
		Token CHARACTER_SYM1131=null;
		Token SET_SYM1132=null;
		Token COLLATE_SYM1134=null;
		Token MEDIUMTEXT1137=null;
		Token BINARY1138=null;
		Token CHARACTER_SYM1139=null;
		Token SET_SYM1140=null;
		Token COLLATE_SYM1142=null;
		Token LONGTEXT1145=null;
		Token BINARY1146=null;
		Token CHARACTER_SYM1147=null;
		Token SET_SYM1148=null;
		Token COLLATE_SYM1150=null;
		Token ENUM1153=null;
		Token LPAREN1154=null;
		Token TEXT_STRING1155=null;
		Token COMMA1156=null;
		Token TEXT_STRING1157=null;
		Token RPAREN1158=null;
		Token CHARACTER_SYM1159=null;
		Token SET_SYM1160=null;
		Token COLLATE_SYM1162=null;
		Token DEFAULT1165=null;
		Token TEXT_STRING1166=null;
		Token SET_SYM1167=null;
		Token LPAREN1168=null;
		Token TEXT_STRING1169=null;
		Token COMMA1170=null;
		Token TEXT_STRING1171=null;
		Token RPAREN1172=null;
		Token CHARACTER_SYM1173=null;
		Token SET_SYM1174=null;
		Token COLLATE_SYM1176=null;
		Token DEFAULT1179=null;
		Token TEXT_STRING1180=null;
		ParserRuleReturnScope length941 =null;
		ParserRuleReturnScope null_or_notnull943 =null;
		ParserRuleReturnScope bit_literal945 =null;
		ParserRuleReturnScope length948 =null;
		ParserRuleReturnScope null_or_notnull952 =null;
		ParserRuleReturnScope number_literal954 =null;
		ParserRuleReturnScope length957 =null;
		ParserRuleReturnScope null_or_notnull961 =null;
		ParserRuleReturnScope number_literal963 =null;
		ParserRuleReturnScope length966 =null;
		ParserRuleReturnScope null_or_notnull970 =null;
		ParserRuleReturnScope number_literal972 =null;
		ParserRuleReturnScope length975 =null;
		ParserRuleReturnScope null_or_notnull979 =null;
		ParserRuleReturnScope number_literal981 =null;
		ParserRuleReturnScope length984 =null;
		ParserRuleReturnScope null_or_notnull988 =null;
		ParserRuleReturnScope number_literal990 =null;
		ParserRuleReturnScope length993 =null;
		ParserRuleReturnScope null_or_notnull997 =null;
		ParserRuleReturnScope number_literal999 =null;
		ParserRuleReturnScope length1002 =null;
		ParserRuleReturnScope number_literal1004 =null;
		ParserRuleReturnScope null_or_notnull1008 =null;
		ParserRuleReturnScope number_literal1010 =null;
		ParserRuleReturnScope length1013 =null;
		ParserRuleReturnScope number_literal1015 =null;
		ParserRuleReturnScope null_or_notnull1019 =null;
		ParserRuleReturnScope number_literal1021 =null;
		ParserRuleReturnScope length1024 =null;
		ParserRuleReturnScope number_literal1026 =null;
		ParserRuleReturnScope null_or_notnull1030 =null;
		ParserRuleReturnScope number_literal1032 =null;
		ParserRuleReturnScope length1035 =null;
		ParserRuleReturnScope number_literal1037 =null;
		ParserRuleReturnScope null_or_notnull1041 =null;
		ParserRuleReturnScope number_literal1043 =null;
		ParserRuleReturnScope length1046 =null;
		ParserRuleReturnScope number_literal1048 =null;
		ParserRuleReturnScope null_or_notnull1052 =null;
		ParserRuleReturnScope number_literal1054 =null;
		ParserRuleReturnScope null_or_notnull1056 =null;
		ParserRuleReturnScope null_or_notnull1060 =null;
		ParserRuleReturnScope null_or_notnull1064 =null;
		ParserRuleReturnScope null_or_notnull1068 =null;
		ParserRuleReturnScope null_or_notnull1072 =null;
		ParserRuleReturnScope length1077 =null;
		ParserRuleReturnScope charset_name1081 =null;
		ParserRuleReturnScope collation_name1083 =null;
		ParserRuleReturnScope null_or_notnull1084 =null;
		ParserRuleReturnScope length1089 =null;
		ParserRuleReturnScope charset_name1093 =null;
		ParserRuleReturnScope collation_name1095 =null;
		ParserRuleReturnScope null_or_notnull1096 =null;
		ParserRuleReturnScope length1101 =null;
		ParserRuleReturnScope null_or_notnull1103 =null;
		ParserRuleReturnScope length1108 =null;
		ParserRuleReturnScope null_or_notnull1110 =null;
		ParserRuleReturnScope null_or_notnull1114 =null;
		ParserRuleReturnScope null_or_notnull1116 =null;
		ParserRuleReturnScope null_or_notnull1118 =null;
		ParserRuleReturnScope null_or_notnull1120 =null;
		ParserRuleReturnScope charset_name1125 =null;
		ParserRuleReturnScope collation_name1127 =null;
		ParserRuleReturnScope null_or_notnull1128 =null;
		ParserRuleReturnScope charset_name1133 =null;
		ParserRuleReturnScope collation_name1135 =null;
		ParserRuleReturnScope null_or_notnull1136 =null;
		ParserRuleReturnScope charset_name1141 =null;
		ParserRuleReturnScope collation_name1143 =null;
		ParserRuleReturnScope null_or_notnull1144 =null;
		ParserRuleReturnScope charset_name1149 =null;
		ParserRuleReturnScope collation_name1151 =null;
		ParserRuleReturnScope null_or_notnull1152 =null;
		ParserRuleReturnScope charset_name1161 =null;
		ParserRuleReturnScope collation_name1163 =null;
		ParserRuleReturnScope null_or_notnull1164 =null;
		ParserRuleReturnScope charset_name1175 =null;
		ParserRuleReturnScope collation_name1177 =null;
		ParserRuleReturnScope null_or_notnull1178 =null;

		Object BIT_SYM939_tree=null;
		Object LPAREN940_tree=null;
		Object RPAREN942_tree=null;
		Object DEFAULT944_tree=null;
		Object TINYINT946_tree=null;
		Object LPAREN947_tree=null;
		Object RPAREN949_tree=null;
		Object UNSIGNED_SYM950_tree=null;
		Object ZEROFILL951_tree=null;
		Object DEFAULT953_tree=null;
		Object SMALLINT955_tree=null;
		Object LPAREN956_tree=null;
		Object RPAREN958_tree=null;
		Object UNSIGNED_SYM959_tree=null;
		Object ZEROFILL960_tree=null;
		Object DEFAULT962_tree=null;
		Object MEDIUMINT964_tree=null;
		Object LPAREN965_tree=null;
		Object RPAREN967_tree=null;
		Object UNSIGNED_SYM968_tree=null;
		Object ZEROFILL969_tree=null;
		Object DEFAULT971_tree=null;
		Object INT_SYM973_tree=null;
		Object LPAREN974_tree=null;
		Object RPAREN976_tree=null;
		Object UNSIGNED_SYM977_tree=null;
		Object ZEROFILL978_tree=null;
		Object DEFAULT980_tree=null;
		Object INTEGER_SYM982_tree=null;
		Object LPAREN983_tree=null;
		Object RPAREN985_tree=null;
		Object UNSIGNED_SYM986_tree=null;
		Object ZEROFILL987_tree=null;
		Object DEFAULT989_tree=null;
		Object BIGINT991_tree=null;
		Object LPAREN992_tree=null;
		Object RPAREN994_tree=null;
		Object UNSIGNED_SYM995_tree=null;
		Object ZEROFILL996_tree=null;
		Object DEFAULT998_tree=null;
		Object REAL1000_tree=null;
		Object LPAREN1001_tree=null;
		Object COMMA1003_tree=null;
		Object RPAREN1005_tree=null;
		Object UNSIGNED_SYM1006_tree=null;
		Object ZEROFILL1007_tree=null;
		Object DEFAULT1009_tree=null;
		Object DOUBLE_SYM1011_tree=null;
		Object LPAREN1012_tree=null;
		Object COMMA1014_tree=null;
		Object RPAREN1016_tree=null;
		Object UNSIGNED_SYM1017_tree=null;
		Object ZEROFILL1018_tree=null;
		Object DEFAULT1020_tree=null;
		Object FLOAT_SYM1022_tree=null;
		Object LPAREN1023_tree=null;
		Object COMMA1025_tree=null;
		Object RPAREN1027_tree=null;
		Object UNSIGNED_SYM1028_tree=null;
		Object ZEROFILL1029_tree=null;
		Object DEFAULT1031_tree=null;
		Object DECIMAL_SYM1033_tree=null;
		Object LPAREN1034_tree=null;
		Object COMMA1036_tree=null;
		Object RPAREN1038_tree=null;
		Object UNSIGNED_SYM1039_tree=null;
		Object ZEROFILL1040_tree=null;
		Object DEFAULT1042_tree=null;
		Object NUMERIC_SYM1044_tree=null;
		Object LPAREN1045_tree=null;
		Object COMMA1047_tree=null;
		Object RPAREN1049_tree=null;
		Object UNSIGNED_SYM1050_tree=null;
		Object ZEROFILL1051_tree=null;
		Object DEFAULT1053_tree=null;
		Object DATE_SYM1055_tree=null;
		Object DEFAULT1057_tree=null;
		Object TEXT_STRING1058_tree=null;
		Object TIME_SYM1059_tree=null;
		Object DEFAULT1061_tree=null;
		Object TEXT_STRING1062_tree=null;
		Object TIMESTAMP1063_tree=null;
		Object DEFAULT1065_tree=null;
		Object set1066_tree=null;
		Object DATETIME1067_tree=null;
		Object DEFAULT1069_tree=null;
		Object set1070_tree=null;
		Object YEAR1071_tree=null;
		Object DEFAULT1073_tree=null;
		Object INTEGER_NUM1074_tree=null;
		Object CHAR1075_tree=null;
		Object LPAREN1076_tree=null;
		Object RPAREN1078_tree=null;
		Object CHARACTER_SYM1079_tree=null;
		Object SET_SYM1080_tree=null;
		Object COLLATE_SYM1082_tree=null;
		Object DEFAULT1085_tree=null;
		Object TEXT_STRING1086_tree=null;
		Object VARCHAR1087_tree=null;
		Object LPAREN1088_tree=null;
		Object RPAREN1090_tree=null;
		Object CHARACTER_SYM1091_tree=null;
		Object SET_SYM1092_tree=null;
		Object COLLATE_SYM1094_tree=null;
		Object DEFAULT1097_tree=null;
		Object TEXT_STRING1098_tree=null;
		Object BINARY1099_tree=null;
		Object LPAREN1100_tree=null;
		Object RPAREN1102_tree=null;
		Object DEFAULT1104_tree=null;
		Object TEXT_STRING1105_tree=null;
		Object VARBINARY1106_tree=null;
		Object LPAREN1107_tree=null;
		Object RPAREN1109_tree=null;
		Object DEFAULT1111_tree=null;
		Object TEXT_STRING1112_tree=null;
		Object TINYBLOB1113_tree=null;
		Object BLOB_SYM1115_tree=null;
		Object MEDIUMBLOB1117_tree=null;
		Object LONGBLOB1119_tree=null;
		Object TINYTEXT1121_tree=null;
		Object BINARY1122_tree=null;
		Object CHARACTER_SYM1123_tree=null;
		Object SET_SYM1124_tree=null;
		Object COLLATE_SYM1126_tree=null;
		Object TEXT_SYM1129_tree=null;
		Object BINARY1130_tree=null;
		Object CHARACTER_SYM1131_tree=null;
		Object SET_SYM1132_tree=null;
		Object COLLATE_SYM1134_tree=null;
		Object MEDIUMTEXT1137_tree=null;
		Object BINARY1138_tree=null;
		Object CHARACTER_SYM1139_tree=null;
		Object SET_SYM1140_tree=null;
		Object COLLATE_SYM1142_tree=null;
		Object LONGTEXT1145_tree=null;
		Object BINARY1146_tree=null;
		Object CHARACTER_SYM1147_tree=null;
		Object SET_SYM1148_tree=null;
		Object COLLATE_SYM1150_tree=null;
		Object ENUM1153_tree=null;
		Object LPAREN1154_tree=null;
		Object TEXT_STRING1155_tree=null;
		Object COMMA1156_tree=null;
		Object TEXT_STRING1157_tree=null;
		Object RPAREN1158_tree=null;
		Object CHARACTER_SYM1159_tree=null;
		Object SET_SYM1160_tree=null;
		Object COLLATE_SYM1162_tree=null;
		Object DEFAULT1165_tree=null;
		Object TEXT_STRING1166_tree=null;
		Object SET_SYM1167_tree=null;
		Object LPAREN1168_tree=null;
		Object TEXT_STRING1169_tree=null;
		Object COMMA1170_tree=null;
		Object TEXT_STRING1171_tree=null;
		Object RPAREN1172_tree=null;
		Object CHARACTER_SYM1173_tree=null;
		Object SET_SYM1174_tree=null;
		Object COLLATE_SYM1176_tree=null;
		Object DEFAULT1179_tree=null;
		Object TEXT_STRING1180_tree=null;

		try {
			// MySQL.g:2048:24: ( ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? ) | ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? ) | ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? ) | ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? ) | ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( TINYBLOB ( null_or_notnull )? ) | ( BLOB_SYM ( null_or_notnull )? ) | ( MEDIUMBLOB ( null_or_notnull )? ) | ( LONGBLOB ( null_or_notnull )? ) | ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ) | ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) | ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? ) )
			int alt417=31;
			switch ( input.LA(1) ) {
			case BIT_SYM:
				{
				alt417=1;
				}
				break;
			case TINYINT:
				{
				alt417=2;
				}
				break;
			case SMALLINT:
				{
				alt417=3;
				}
				break;
			case MEDIUMINT:
				{
				alt417=4;
				}
				break;
			case INT_SYM:
				{
				alt417=5;
				}
				break;
			case INTEGER_SYM:
				{
				alt417=6;
				}
				break;
			case BIGINT:
				{
				alt417=7;
				}
				break;
			case REAL:
				{
				alt417=8;
				}
				break;
			case DOUBLE_SYM:
				{
				alt417=9;
				}
				break;
			case FLOAT_SYM:
				{
				alt417=10;
				}
				break;
			case DECIMAL_SYM:
				{
				alt417=11;
				}
				break;
			case NUMERIC_SYM:
				{
				alt417=12;
				}
				break;
			case DATE_SYM:
				{
				alt417=13;
				}
				break;
			case TIME_SYM:
				{
				alt417=14;
				}
				break;
			case TIMESTAMP:
				{
				alt417=15;
				}
				break;
			case DATETIME:
				{
				alt417=16;
				}
				break;
			case YEAR:
				{
				alt417=17;
				}
				break;
			case CHAR:
				{
				alt417=18;
				}
				break;
			case VARCHAR:
				{
				alt417=19;
				}
				break;
			case BINARY:
				{
				alt417=20;
				}
				break;
			case VARBINARY:
				{
				alt417=21;
				}
				break;
			case TINYBLOB:
				{
				alt417=22;
				}
				break;
			case BLOB_SYM:
				{
				alt417=23;
				}
				break;
			case MEDIUMBLOB:
				{
				alt417=24;
				}
				break;
			case LONGBLOB:
				{
				alt417=25;
				}
				break;
			case TINYTEXT:
				{
				alt417=26;
				}
				break;
			case TEXT_SYM:
				{
				alt417=27;
				}
				break;
			case MEDIUMTEXT:
				{
				alt417=28;
				}
				break;
			case LONGTEXT:
				{
				alt417=29;
				}
				break;
			case ENUM:
				{
				alt417=30;
				}
				break;
			case SET_SYM:
				{
				alt417=31;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 417, 0, input);
				throw nvae;
			}
			switch (alt417) {
				case 1 :
					// MySQL.g:2049:4: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2049:4: ( BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )? )
					// MySQL.g:2049:7: BIT_SYM ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT bit_literal )?
					{
					BIT_SYM939=(Token)match(input,BIT_SYM,FOLLOW_BIT_SYM_in_column_data_type_header24923); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIT_SYM939_tree = (Object)adaptor.create(BIT_SYM939);
					adaptor.addChild(root_0, BIT_SYM939_tree);
					}

					// MySQL.g:2049:14: ( LPAREN length RPAREN )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==LPAREN) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// MySQL.g:2049:15: LPAREN length RPAREN
							{
							LPAREN940=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header24925); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN940_tree = (Object)adaptor.create(LPAREN940);
							adaptor.addChild(root_0, LPAREN940_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header24927);
							length941=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length941.getTree());

							RPAREN942=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header24929); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN942_tree = (Object)adaptor.create(RPAREN942);
							adaptor.addChild(root_0, RPAREN942_tree);
							}

							}
							break;

					}

					// MySQL.g:2049:38: ( null_or_notnull )?
					int alt304=2;
					int LA304_0 = input.LA(1);
					if ( (LA304_0==NOT_SYM||LA304_0==NULL_SYM) ) {
						alt304=1;
					}
					switch (alt304) {
						case 1 :
							// MySQL.g:2049:39: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header24934);
							null_or_notnull943=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull943.getTree());

							}
							break;

					}

					// MySQL.g:2049:57: ( DEFAULT bit_literal )?
					int alt305=2;
					int LA305_0 = input.LA(1);
					if ( (LA305_0==DEFAULT) ) {
						alt305=1;
					}
					switch (alt305) {
						case 1 :
							// MySQL.g:2049:58: DEFAULT bit_literal
							{
							DEFAULT944=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header24939); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT944_tree = (Object)adaptor.create(DEFAULT944);
							adaptor.addChild(root_0, DEFAULT944_tree);
							}

							pushFollow(FOLLOW_bit_literal_in_column_data_type_header24941);
							bit_literal945=bit_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, bit_literal945.getTree());

							}
							break;

					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2050:4: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2050:4: ( TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2050:7: TINYINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					TINYINT946=(Token)match(input,TINYINT,FOLLOW_TINYINT_in_column_data_type_header24954); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYINT946_tree = (Object)adaptor.create(TINYINT946);
					adaptor.addChild(root_0, TINYINT946_tree);
					}

					// MySQL.g:2050:14: ( LPAREN length RPAREN )?
					int alt306=2;
					int LA306_0 = input.LA(1);
					if ( (LA306_0==LPAREN) ) {
						alt306=1;
					}
					switch (alt306) {
						case 1 :
							// MySQL.g:2050:15: LPAREN length RPAREN
							{
							LPAREN947=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header24956); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN947_tree = (Object)adaptor.create(LPAREN947);
							adaptor.addChild(root_0, LPAREN947_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header24958);
							length948=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length948.getTree());

							RPAREN949=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header24960); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN949_tree = (Object)adaptor.create(RPAREN949);
							adaptor.addChild(root_0, RPAREN949_tree);
							}

							}
							break;

					}

					// MySQL.g:2050:38: ( UNSIGNED_SYM )?
					int alt307=2;
					int LA307_0 = input.LA(1);
					if ( (LA307_0==UNSIGNED_SYM) ) {
						alt307=1;
					}
					switch (alt307) {
						case 1 :
							// MySQL.g:2050:39: UNSIGNED_SYM
							{
							UNSIGNED_SYM950=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header24965); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM950_tree = (Object)adaptor.create(UNSIGNED_SYM950);
							adaptor.addChild(root_0, UNSIGNED_SYM950_tree);
							}

							}
							break;

					}

					// MySQL.g:2050:54: ( ZEROFILL )?
					int alt308=2;
					int LA308_0 = input.LA(1);
					if ( (LA308_0==ZEROFILL) ) {
						alt308=1;
					}
					switch (alt308) {
						case 1 :
							// MySQL.g:2050:55: ZEROFILL
							{
							ZEROFILL951=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header24970); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL951_tree = (Object)adaptor.create(ZEROFILL951);
							adaptor.addChild(root_0, ZEROFILL951_tree);
							}

							}
							break;

					}

					// MySQL.g:2050:66: ( null_or_notnull )?
					int alt309=2;
					int LA309_0 = input.LA(1);
					if ( (LA309_0==NOT_SYM||LA309_0==NULL_SYM) ) {
						alt309=1;
					}
					switch (alt309) {
						case 1 :
							// MySQL.g:2050:67: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header24975);
							null_or_notnull952=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull952.getTree());

							}
							break;

					}

					// MySQL.g:2050:85: ( DEFAULT number_literal )?
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==DEFAULT) ) {
						alt310=1;
					}
					switch (alt310) {
						case 1 :
							// MySQL.g:2050:86: DEFAULT number_literal
							{
							DEFAULT953=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header24980); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT953_tree = (Object)adaptor.create(DEFAULT953);
							adaptor.addChild(root_0, DEFAULT953_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header24982);
							number_literal954=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal954.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2051:4: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2051:4: ( SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2051:7: SMALLINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					SMALLINT955=(Token)match(input,SMALLINT,FOLLOW_SMALLINT_in_column_data_type_header24995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SMALLINT955_tree = (Object)adaptor.create(SMALLINT955);
					adaptor.addChild(root_0, SMALLINT955_tree);
					}

					// MySQL.g:2051:15: ( LPAREN length RPAREN )?
					int alt311=2;
					int LA311_0 = input.LA(1);
					if ( (LA311_0==LPAREN) ) {
						alt311=1;
					}
					switch (alt311) {
						case 1 :
							// MySQL.g:2051:16: LPAREN length RPAREN
							{
							LPAREN956=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header24997); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN956_tree = (Object)adaptor.create(LPAREN956);
							adaptor.addChild(root_0, LPAREN956_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header24999);
							length957=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length957.getTree());

							RPAREN958=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25001); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN958_tree = (Object)adaptor.create(RPAREN958);
							adaptor.addChild(root_0, RPAREN958_tree);
							}

							}
							break;

					}

					// MySQL.g:2051:39: ( UNSIGNED_SYM )?
					int alt312=2;
					int LA312_0 = input.LA(1);
					if ( (LA312_0==UNSIGNED_SYM) ) {
						alt312=1;
					}
					switch (alt312) {
						case 1 :
							// MySQL.g:2051:40: UNSIGNED_SYM
							{
							UNSIGNED_SYM959=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25006); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM959_tree = (Object)adaptor.create(UNSIGNED_SYM959);
							adaptor.addChild(root_0, UNSIGNED_SYM959_tree);
							}

							}
							break;

					}

					// MySQL.g:2051:55: ( ZEROFILL )?
					int alt313=2;
					int LA313_0 = input.LA(1);
					if ( (LA313_0==ZEROFILL) ) {
						alt313=1;
					}
					switch (alt313) {
						case 1 :
							// MySQL.g:2051:56: ZEROFILL
							{
							ZEROFILL960=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25011); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL960_tree = (Object)adaptor.create(ZEROFILL960);
							adaptor.addChild(root_0, ZEROFILL960_tree);
							}

							}
							break;

					}

					// MySQL.g:2051:67: ( null_or_notnull )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==NOT_SYM||LA314_0==NULL_SYM) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// MySQL.g:2051:68: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25016);
							null_or_notnull961=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull961.getTree());

							}
							break;

					}

					// MySQL.g:2051:86: ( DEFAULT number_literal )?
					int alt315=2;
					int LA315_0 = input.LA(1);
					if ( (LA315_0==DEFAULT) ) {
						alt315=1;
					}
					switch (alt315) {
						case 1 :
							// MySQL.g:2051:87: DEFAULT number_literal
							{
							DEFAULT962=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25021); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT962_tree = (Object)adaptor.create(DEFAULT962);
							adaptor.addChild(root_0, DEFAULT962_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25023);
							number_literal963=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal963.getTree());

							}
							break;

					}

					}

					}
					break;
				case 4 :
					// MySQL.g:2052:4: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2052:4: ( MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2052:7: MEDIUMINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					MEDIUMINT964=(Token)match(input,MEDIUMINT,FOLLOW_MEDIUMINT_in_column_data_type_header25036); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMINT964_tree = (Object)adaptor.create(MEDIUMINT964);
					adaptor.addChild(root_0, MEDIUMINT964_tree);
					}

					// MySQL.g:2052:16: ( LPAREN length RPAREN )?
					int alt316=2;
					int LA316_0 = input.LA(1);
					if ( (LA316_0==LPAREN) ) {
						alt316=1;
					}
					switch (alt316) {
						case 1 :
							// MySQL.g:2052:17: LPAREN length RPAREN
							{
							LPAREN965=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25038); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN965_tree = (Object)adaptor.create(LPAREN965);
							adaptor.addChild(root_0, LPAREN965_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25040);
							length966=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length966.getTree());

							RPAREN967=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25042); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN967_tree = (Object)adaptor.create(RPAREN967);
							adaptor.addChild(root_0, RPAREN967_tree);
							}

							}
							break;

					}

					// MySQL.g:2052:40: ( UNSIGNED_SYM )?
					int alt317=2;
					int LA317_0 = input.LA(1);
					if ( (LA317_0==UNSIGNED_SYM) ) {
						alt317=1;
					}
					switch (alt317) {
						case 1 :
							// MySQL.g:2052:41: UNSIGNED_SYM
							{
							UNSIGNED_SYM968=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25047); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM968_tree = (Object)adaptor.create(UNSIGNED_SYM968);
							adaptor.addChild(root_0, UNSIGNED_SYM968_tree);
							}

							}
							break;

					}

					// MySQL.g:2052:56: ( ZEROFILL )?
					int alt318=2;
					int LA318_0 = input.LA(1);
					if ( (LA318_0==ZEROFILL) ) {
						alt318=1;
					}
					switch (alt318) {
						case 1 :
							// MySQL.g:2052:57: ZEROFILL
							{
							ZEROFILL969=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25052); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL969_tree = (Object)adaptor.create(ZEROFILL969);
							adaptor.addChild(root_0, ZEROFILL969_tree);
							}

							}
							break;

					}

					// MySQL.g:2052:68: ( null_or_notnull )?
					int alt319=2;
					int LA319_0 = input.LA(1);
					if ( (LA319_0==NOT_SYM||LA319_0==NULL_SYM) ) {
						alt319=1;
					}
					switch (alt319) {
						case 1 :
							// MySQL.g:2052:69: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25057);
							null_or_notnull970=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull970.getTree());

							}
							break;

					}

					// MySQL.g:2052:87: ( DEFAULT number_literal )?
					int alt320=2;
					int LA320_0 = input.LA(1);
					if ( (LA320_0==DEFAULT) ) {
						alt320=1;
					}
					switch (alt320) {
						case 1 :
							// MySQL.g:2052:88: DEFAULT number_literal
							{
							DEFAULT971=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25062); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT971_tree = (Object)adaptor.create(DEFAULT971);
							adaptor.addChild(root_0, DEFAULT971_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25064);
							number_literal972=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal972.getTree());

							}
							break;

					}

					}

					}
					break;
				case 5 :
					// MySQL.g:2053:4: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2053:4: ( INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2053:7: INT_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					INT_SYM973=(Token)match(input,INT_SYM,FOLLOW_INT_SYM_in_column_data_type_header25077); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INT_SYM973_tree = (Object)adaptor.create(INT_SYM973);
					adaptor.addChild(root_0, INT_SYM973_tree);
					}

					// MySQL.g:2053:14: ( LPAREN length RPAREN )?
					int alt321=2;
					int LA321_0 = input.LA(1);
					if ( (LA321_0==LPAREN) ) {
						alt321=1;
					}
					switch (alt321) {
						case 1 :
							// MySQL.g:2053:15: LPAREN length RPAREN
							{
							LPAREN974=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25079); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN974_tree = (Object)adaptor.create(LPAREN974);
							adaptor.addChild(root_0, LPAREN974_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25081);
							length975=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length975.getTree());

							RPAREN976=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25083); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN976_tree = (Object)adaptor.create(RPAREN976);
							adaptor.addChild(root_0, RPAREN976_tree);
							}

							}
							break;

					}

					// MySQL.g:2053:38: ( UNSIGNED_SYM )?
					int alt322=2;
					int LA322_0 = input.LA(1);
					if ( (LA322_0==UNSIGNED_SYM) ) {
						alt322=1;
					}
					switch (alt322) {
						case 1 :
							// MySQL.g:2053:39: UNSIGNED_SYM
							{
							UNSIGNED_SYM977=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25088); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM977_tree = (Object)adaptor.create(UNSIGNED_SYM977);
							adaptor.addChild(root_0, UNSIGNED_SYM977_tree);
							}

							}
							break;

					}

					// MySQL.g:2053:54: ( ZEROFILL )?
					int alt323=2;
					int LA323_0 = input.LA(1);
					if ( (LA323_0==ZEROFILL) ) {
						alt323=1;
					}
					switch (alt323) {
						case 1 :
							// MySQL.g:2053:55: ZEROFILL
							{
							ZEROFILL978=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25093); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL978_tree = (Object)adaptor.create(ZEROFILL978);
							adaptor.addChild(root_0, ZEROFILL978_tree);
							}

							}
							break;

					}

					// MySQL.g:2053:66: ( null_or_notnull )?
					int alt324=2;
					int LA324_0 = input.LA(1);
					if ( (LA324_0==NOT_SYM||LA324_0==NULL_SYM) ) {
						alt324=1;
					}
					switch (alt324) {
						case 1 :
							// MySQL.g:2053:67: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25098);
							null_or_notnull979=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull979.getTree());

							}
							break;

					}

					// MySQL.g:2053:85: ( DEFAULT number_literal )?
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==DEFAULT) ) {
						alt325=1;
					}
					switch (alt325) {
						case 1 :
							// MySQL.g:2053:86: DEFAULT number_literal
							{
							DEFAULT980=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25103); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT980_tree = (Object)adaptor.create(DEFAULT980);
							adaptor.addChild(root_0, DEFAULT980_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25105);
							number_literal981=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal981.getTree());

							}
							break;

					}

					}

					}
					break;
				case 6 :
					// MySQL.g:2054:4: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2054:4: ( INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2054:7: INTEGER_SYM ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					INTEGER_SYM982=(Token)match(input,INTEGER_SYM,FOLLOW_INTEGER_SYM_in_column_data_type_header25118); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_SYM982_tree = (Object)adaptor.create(INTEGER_SYM982);
					adaptor.addChild(root_0, INTEGER_SYM982_tree);
					}

					// MySQL.g:2054:18: ( LPAREN length RPAREN )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==LPAREN) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// MySQL.g:2054:19: LPAREN length RPAREN
							{
							LPAREN983=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25120); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN983_tree = (Object)adaptor.create(LPAREN983);
							adaptor.addChild(root_0, LPAREN983_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25122);
							length984=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length984.getTree());

							RPAREN985=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25124); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN985_tree = (Object)adaptor.create(RPAREN985);
							adaptor.addChild(root_0, RPAREN985_tree);
							}

							}
							break;

					}

					// MySQL.g:2054:42: ( UNSIGNED_SYM )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==UNSIGNED_SYM) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// MySQL.g:2054:43: UNSIGNED_SYM
							{
							UNSIGNED_SYM986=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25129); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM986_tree = (Object)adaptor.create(UNSIGNED_SYM986);
							adaptor.addChild(root_0, UNSIGNED_SYM986_tree);
							}

							}
							break;

					}

					// MySQL.g:2054:58: ( ZEROFILL )?
					int alt328=2;
					int LA328_0 = input.LA(1);
					if ( (LA328_0==ZEROFILL) ) {
						alt328=1;
					}
					switch (alt328) {
						case 1 :
							// MySQL.g:2054:59: ZEROFILL
							{
							ZEROFILL987=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25134); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL987_tree = (Object)adaptor.create(ZEROFILL987);
							adaptor.addChild(root_0, ZEROFILL987_tree);
							}

							}
							break;

					}

					// MySQL.g:2054:70: ( null_or_notnull )?
					int alt329=2;
					int LA329_0 = input.LA(1);
					if ( (LA329_0==NOT_SYM||LA329_0==NULL_SYM) ) {
						alt329=1;
					}
					switch (alt329) {
						case 1 :
							// MySQL.g:2054:71: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25139);
							null_or_notnull988=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull988.getTree());

							}
							break;

					}

					// MySQL.g:2054:89: ( DEFAULT number_literal )?
					int alt330=2;
					int LA330_0 = input.LA(1);
					if ( (LA330_0==DEFAULT) ) {
						alt330=1;
					}
					switch (alt330) {
						case 1 :
							// MySQL.g:2054:90: DEFAULT number_literal
							{
							DEFAULT989=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25144); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT989_tree = (Object)adaptor.create(DEFAULT989);
							adaptor.addChild(root_0, DEFAULT989_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25146);
							number_literal990=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal990.getTree());

							}
							break;

					}

					}

					}
					break;
				case 7 :
					// MySQL.g:2055:4: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2055:4: ( BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2055:7: BIGINT ( LPAREN length RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					BIGINT991=(Token)match(input,BIGINT,FOLLOW_BIGINT_in_column_data_type_header25159); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BIGINT991_tree = (Object)adaptor.create(BIGINT991);
					adaptor.addChild(root_0, BIGINT991_tree);
					}

					// MySQL.g:2055:13: ( LPAREN length RPAREN )?
					int alt331=2;
					int LA331_0 = input.LA(1);
					if ( (LA331_0==LPAREN) ) {
						alt331=1;
					}
					switch (alt331) {
						case 1 :
							// MySQL.g:2055:14: LPAREN length RPAREN
							{
							LPAREN992=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25161); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN992_tree = (Object)adaptor.create(LPAREN992);
							adaptor.addChild(root_0, LPAREN992_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25163);
							length993=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length993.getTree());

							RPAREN994=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25165); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN994_tree = (Object)adaptor.create(RPAREN994);
							adaptor.addChild(root_0, RPAREN994_tree);
							}

							}
							break;

					}

					// MySQL.g:2055:37: ( UNSIGNED_SYM )?
					int alt332=2;
					int LA332_0 = input.LA(1);
					if ( (LA332_0==UNSIGNED_SYM) ) {
						alt332=1;
					}
					switch (alt332) {
						case 1 :
							// MySQL.g:2055:38: UNSIGNED_SYM
							{
							UNSIGNED_SYM995=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25170); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM995_tree = (Object)adaptor.create(UNSIGNED_SYM995);
							adaptor.addChild(root_0, UNSIGNED_SYM995_tree);
							}

							}
							break;

					}

					// MySQL.g:2055:53: ( ZEROFILL )?
					int alt333=2;
					int LA333_0 = input.LA(1);
					if ( (LA333_0==ZEROFILL) ) {
						alt333=1;
					}
					switch (alt333) {
						case 1 :
							// MySQL.g:2055:54: ZEROFILL
							{
							ZEROFILL996=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25175); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL996_tree = (Object)adaptor.create(ZEROFILL996);
							adaptor.addChild(root_0, ZEROFILL996_tree);
							}

							}
							break;

					}

					// MySQL.g:2055:65: ( null_or_notnull )?
					int alt334=2;
					int LA334_0 = input.LA(1);
					if ( (LA334_0==NOT_SYM||LA334_0==NULL_SYM) ) {
						alt334=1;
					}
					switch (alt334) {
						case 1 :
							// MySQL.g:2055:66: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25180);
							null_or_notnull997=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull997.getTree());

							}
							break;

					}

					// MySQL.g:2055:84: ( DEFAULT number_literal )?
					int alt335=2;
					int LA335_0 = input.LA(1);
					if ( (LA335_0==DEFAULT) ) {
						alt335=1;
					}
					switch (alt335) {
						case 1 :
							// MySQL.g:2055:85: DEFAULT number_literal
							{
							DEFAULT998=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25185); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT998_tree = (Object)adaptor.create(DEFAULT998);
							adaptor.addChild(root_0, DEFAULT998_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25187);
							number_literal999=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal999.getTree());

							}
							break;

					}

					}

					}
					break;
				case 8 :
					// MySQL.g:2056:4: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2056:4: ( REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2056:7: REAL ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					REAL1000=(Token)match(input,REAL,FOLLOW_REAL_in_column_data_type_header25200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REAL1000_tree = (Object)adaptor.create(REAL1000);
					adaptor.addChild(root_0, REAL1000_tree);
					}

					// MySQL.g:2056:11: ( LPAREN length COMMA number_literal RPAREN )?
					int alt336=2;
					int LA336_0 = input.LA(1);
					if ( (LA336_0==LPAREN) ) {
						alt336=1;
					}
					switch (alt336) {
						case 1 :
							// MySQL.g:2056:12: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1001=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25202); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1001_tree = (Object)adaptor.create(LPAREN1001);
							adaptor.addChild(root_0, LPAREN1001_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25204);
							length1002=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1002.getTree());

							COMMA1003=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25206); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1003_tree = (Object)adaptor.create(COMMA1003);
							adaptor.addChild(root_0, COMMA1003_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25208);
							number_literal1004=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1004.getTree());

							RPAREN1005=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25210); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1005_tree = (Object)adaptor.create(RPAREN1005);
							adaptor.addChild(root_0, RPAREN1005_tree);
							}

							}
							break;

					}

					// MySQL.g:2056:56: ( UNSIGNED_SYM )?
					int alt337=2;
					int LA337_0 = input.LA(1);
					if ( (LA337_0==UNSIGNED_SYM) ) {
						alt337=1;
					}
					switch (alt337) {
						case 1 :
							// MySQL.g:2056:57: UNSIGNED_SYM
							{
							UNSIGNED_SYM1006=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25215); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1006_tree = (Object)adaptor.create(UNSIGNED_SYM1006);
							adaptor.addChild(root_0, UNSIGNED_SYM1006_tree);
							}

							}
							break;

					}

					// MySQL.g:2056:72: ( ZEROFILL )?
					int alt338=2;
					int LA338_0 = input.LA(1);
					if ( (LA338_0==ZEROFILL) ) {
						alt338=1;
					}
					switch (alt338) {
						case 1 :
							// MySQL.g:2056:73: ZEROFILL
							{
							ZEROFILL1007=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25220); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1007_tree = (Object)adaptor.create(ZEROFILL1007);
							adaptor.addChild(root_0, ZEROFILL1007_tree);
							}

							}
							break;

					}

					// MySQL.g:2056:84: ( null_or_notnull )?
					int alt339=2;
					int LA339_0 = input.LA(1);
					if ( (LA339_0==NOT_SYM||LA339_0==NULL_SYM) ) {
						alt339=1;
					}
					switch (alt339) {
						case 1 :
							// MySQL.g:2056:85: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25225);
							null_or_notnull1008=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1008.getTree());

							}
							break;

					}

					// MySQL.g:2056:103: ( DEFAULT number_literal )?
					int alt340=2;
					int LA340_0 = input.LA(1);
					if ( (LA340_0==DEFAULT) ) {
						alt340=1;
					}
					switch (alt340) {
						case 1 :
							// MySQL.g:2056:104: DEFAULT number_literal
							{
							DEFAULT1009=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25230); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1009_tree = (Object)adaptor.create(DEFAULT1009);
							adaptor.addChild(root_0, DEFAULT1009_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25232);
							number_literal1010=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1010.getTree());

							}
							break;

					}

					}

					}
					break;
				case 9 :
					// MySQL.g:2057:4: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2057:4: ( DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2057:7: DOUBLE_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					DOUBLE_SYM1011=(Token)match(input,DOUBLE_SYM,FOLLOW_DOUBLE_SYM_in_column_data_type_header25245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLE_SYM1011_tree = (Object)adaptor.create(DOUBLE_SYM1011);
					adaptor.addChild(root_0, DOUBLE_SYM1011_tree);
					}

					// MySQL.g:2057:17: ( LPAREN length COMMA number_literal RPAREN )?
					int alt341=2;
					int LA341_0 = input.LA(1);
					if ( (LA341_0==LPAREN) ) {
						alt341=1;
					}
					switch (alt341) {
						case 1 :
							// MySQL.g:2057:18: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1012=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25247); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1012_tree = (Object)adaptor.create(LPAREN1012);
							adaptor.addChild(root_0, LPAREN1012_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25249);
							length1013=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1013.getTree());

							COMMA1014=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25251); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1014_tree = (Object)adaptor.create(COMMA1014);
							adaptor.addChild(root_0, COMMA1014_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25253);
							number_literal1015=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1015.getTree());

							RPAREN1016=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25255); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1016_tree = (Object)adaptor.create(RPAREN1016);
							adaptor.addChild(root_0, RPAREN1016_tree);
							}

							}
							break;

					}

					// MySQL.g:2057:62: ( UNSIGNED_SYM )?
					int alt342=2;
					int LA342_0 = input.LA(1);
					if ( (LA342_0==UNSIGNED_SYM) ) {
						alt342=1;
					}
					switch (alt342) {
						case 1 :
							// MySQL.g:2057:63: UNSIGNED_SYM
							{
							UNSIGNED_SYM1017=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25260); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1017_tree = (Object)adaptor.create(UNSIGNED_SYM1017);
							adaptor.addChild(root_0, UNSIGNED_SYM1017_tree);
							}

							}
							break;

					}

					// MySQL.g:2057:78: ( ZEROFILL )?
					int alt343=2;
					int LA343_0 = input.LA(1);
					if ( (LA343_0==ZEROFILL) ) {
						alt343=1;
					}
					switch (alt343) {
						case 1 :
							// MySQL.g:2057:79: ZEROFILL
							{
							ZEROFILL1018=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25265); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1018_tree = (Object)adaptor.create(ZEROFILL1018);
							adaptor.addChild(root_0, ZEROFILL1018_tree);
							}

							}
							break;

					}

					// MySQL.g:2057:90: ( null_or_notnull )?
					int alt344=2;
					int LA344_0 = input.LA(1);
					if ( (LA344_0==NOT_SYM||LA344_0==NULL_SYM) ) {
						alt344=1;
					}
					switch (alt344) {
						case 1 :
							// MySQL.g:2057:91: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25270);
							null_or_notnull1019=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1019.getTree());

							}
							break;

					}

					// MySQL.g:2057:109: ( DEFAULT number_literal )?
					int alt345=2;
					int LA345_0 = input.LA(1);
					if ( (LA345_0==DEFAULT) ) {
						alt345=1;
					}
					switch (alt345) {
						case 1 :
							// MySQL.g:2057:110: DEFAULT number_literal
							{
							DEFAULT1020=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25275); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1020_tree = (Object)adaptor.create(DEFAULT1020);
							adaptor.addChild(root_0, DEFAULT1020_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25277);
							number_literal1021=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1021.getTree());

							}
							break;

					}

					}

					}
					break;
				case 10 :
					// MySQL.g:2058:4: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2058:4: ( FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2058:7: FLOAT_SYM ( LPAREN length COMMA number_literal RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					FLOAT_SYM1022=(Token)match(input,FLOAT_SYM,FOLLOW_FLOAT_SYM_in_column_data_type_header25290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FLOAT_SYM1022_tree = (Object)adaptor.create(FLOAT_SYM1022);
					adaptor.addChild(root_0, FLOAT_SYM1022_tree);
					}

					// MySQL.g:2058:16: ( LPAREN length COMMA number_literal RPAREN )?
					int alt346=2;
					int LA346_0 = input.LA(1);
					if ( (LA346_0==LPAREN) ) {
						alt346=1;
					}
					switch (alt346) {
						case 1 :
							// MySQL.g:2058:17: LPAREN length COMMA number_literal RPAREN
							{
							LPAREN1023=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25292); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1023_tree = (Object)adaptor.create(LPAREN1023);
							adaptor.addChild(root_0, LPAREN1023_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25294);
							length1024=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1024.getTree());

							COMMA1025=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25296); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1025_tree = (Object)adaptor.create(COMMA1025);
							adaptor.addChild(root_0, COMMA1025_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25298);
							number_literal1026=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1026.getTree());

							RPAREN1027=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25300); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1027_tree = (Object)adaptor.create(RPAREN1027);
							adaptor.addChild(root_0, RPAREN1027_tree);
							}

							}
							break;

					}

					// MySQL.g:2058:61: ( UNSIGNED_SYM )?
					int alt347=2;
					int LA347_0 = input.LA(1);
					if ( (LA347_0==UNSIGNED_SYM) ) {
						alt347=1;
					}
					switch (alt347) {
						case 1 :
							// MySQL.g:2058:62: UNSIGNED_SYM
							{
							UNSIGNED_SYM1028=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25305); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1028_tree = (Object)adaptor.create(UNSIGNED_SYM1028);
							adaptor.addChild(root_0, UNSIGNED_SYM1028_tree);
							}

							}
							break;

					}

					// MySQL.g:2058:77: ( ZEROFILL )?
					int alt348=2;
					int LA348_0 = input.LA(1);
					if ( (LA348_0==ZEROFILL) ) {
						alt348=1;
					}
					switch (alt348) {
						case 1 :
							// MySQL.g:2058:78: ZEROFILL
							{
							ZEROFILL1029=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25310); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1029_tree = (Object)adaptor.create(ZEROFILL1029);
							adaptor.addChild(root_0, ZEROFILL1029_tree);
							}

							}
							break;

					}

					// MySQL.g:2058:89: ( null_or_notnull )?
					int alt349=2;
					int LA349_0 = input.LA(1);
					if ( (LA349_0==NOT_SYM||LA349_0==NULL_SYM) ) {
						alt349=1;
					}
					switch (alt349) {
						case 1 :
							// MySQL.g:2058:90: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25315);
							null_or_notnull1030=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1030.getTree());

							}
							break;

					}

					// MySQL.g:2058:108: ( DEFAULT number_literal )?
					int alt350=2;
					int LA350_0 = input.LA(1);
					if ( (LA350_0==DEFAULT) ) {
						alt350=1;
					}
					switch (alt350) {
						case 1 :
							// MySQL.g:2058:109: DEFAULT number_literal
							{
							DEFAULT1031=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25320); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1031_tree = (Object)adaptor.create(DEFAULT1031);
							adaptor.addChild(root_0, DEFAULT1031_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25322);
							number_literal1032=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1032.getTree());

							}
							break;

					}

					}

					}
					break;
				case 11 :
					// MySQL.g:2059:4: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2059:4: ( DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2059:7: DECIMAL_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					DECIMAL_SYM1033=(Token)match(input,DECIMAL_SYM,FOLLOW_DECIMAL_SYM_in_column_data_type_header25335); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DECIMAL_SYM1033_tree = (Object)adaptor.create(DECIMAL_SYM1033);
					adaptor.addChild(root_0, DECIMAL_SYM1033_tree);
					}

					// MySQL.g:2059:18: ( LPAREN length ( COMMA number_literal )? RPAREN )?
					int alt352=2;
					int LA352_0 = input.LA(1);
					if ( (LA352_0==LPAREN) ) {
						alt352=1;
					}
					switch (alt352) {
						case 1 :
							// MySQL.g:2059:19: LPAREN length ( COMMA number_literal )? RPAREN
							{
							LPAREN1034=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25337); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1034_tree = (Object)adaptor.create(LPAREN1034);
							adaptor.addChild(root_0, LPAREN1034_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25339);
							length1035=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1035.getTree());

							// MySQL.g:2059:32: ( COMMA number_literal )?
							int alt351=2;
							int LA351_0 = input.LA(1);
							if ( (LA351_0==COMMA) ) {
								alt351=1;
							}
							switch (alt351) {
								case 1 :
									// MySQL.g:2059:34: COMMA number_literal
									{
									COMMA1036=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25342); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA1036_tree = (Object)adaptor.create(COMMA1036);
									adaptor.addChild(root_0, COMMA1036_tree);
									}

									pushFollow(FOLLOW_number_literal_in_column_data_type_header25344);
									number_literal1037=number_literal();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1037.getTree());

									}
									break;

							}

							RPAREN1038=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25348); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1038_tree = (Object)adaptor.create(RPAREN1038);
							adaptor.addChild(root_0, RPAREN1038_tree);
							}

							}
							break;

					}

					// MySQL.g:2059:66: ( UNSIGNED_SYM )?
					int alt353=2;
					int LA353_0 = input.LA(1);
					if ( (LA353_0==UNSIGNED_SYM) ) {
						alt353=1;
					}
					switch (alt353) {
						case 1 :
							// MySQL.g:2059:67: UNSIGNED_SYM
							{
							UNSIGNED_SYM1039=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25353); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1039_tree = (Object)adaptor.create(UNSIGNED_SYM1039);
							adaptor.addChild(root_0, UNSIGNED_SYM1039_tree);
							}

							}
							break;

					}

					// MySQL.g:2059:82: ( ZEROFILL )?
					int alt354=2;
					int LA354_0 = input.LA(1);
					if ( (LA354_0==ZEROFILL) ) {
						alt354=1;
					}
					switch (alt354) {
						case 1 :
							// MySQL.g:2059:83: ZEROFILL
							{
							ZEROFILL1040=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25358); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1040_tree = (Object)adaptor.create(ZEROFILL1040);
							adaptor.addChild(root_0, ZEROFILL1040_tree);
							}

							}
							break;

					}

					// MySQL.g:2059:94: ( null_or_notnull )?
					int alt355=2;
					int LA355_0 = input.LA(1);
					if ( (LA355_0==NOT_SYM||LA355_0==NULL_SYM) ) {
						alt355=1;
					}
					switch (alt355) {
						case 1 :
							// MySQL.g:2059:95: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25363);
							null_or_notnull1041=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1041.getTree());

							}
							break;

					}

					// MySQL.g:2059:113: ( DEFAULT number_literal )?
					int alt356=2;
					int LA356_0 = input.LA(1);
					if ( (LA356_0==DEFAULT) ) {
						alt356=1;
					}
					switch (alt356) {
						case 1 :
							// MySQL.g:2059:114: DEFAULT number_literal
							{
							DEFAULT1042=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25368); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1042_tree = (Object)adaptor.create(DEFAULT1042);
							adaptor.addChild(root_0, DEFAULT1042_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25370);
							number_literal1043=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1043.getTree());

							}
							break;

					}

					}

					}
					break;
				case 12 :
					// MySQL.g:2060:4: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2060:4: ( NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )? )
					// MySQL.g:2060:7: NUMERIC_SYM ( LPAREN length ( COMMA number_literal )? RPAREN )? ( UNSIGNED_SYM )? ( ZEROFILL )? ( null_or_notnull )? ( DEFAULT number_literal )?
					{
					NUMERIC_SYM1044=(Token)match(input,NUMERIC_SYM,FOLLOW_NUMERIC_SYM_in_column_data_type_header25383); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NUMERIC_SYM1044_tree = (Object)adaptor.create(NUMERIC_SYM1044);
					adaptor.addChild(root_0, NUMERIC_SYM1044_tree);
					}

					// MySQL.g:2060:18: ( LPAREN length ( COMMA number_literal )? RPAREN )?
					int alt358=2;
					int LA358_0 = input.LA(1);
					if ( (LA358_0==LPAREN) ) {
						alt358=1;
					}
					switch (alt358) {
						case 1 :
							// MySQL.g:2060:19: LPAREN length ( COMMA number_literal )? RPAREN
							{
							LPAREN1045=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25385); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1045_tree = (Object)adaptor.create(LPAREN1045);
							adaptor.addChild(root_0, LPAREN1045_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25387);
							length1046=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1046.getTree());

							// MySQL.g:2060:32: ( COMMA number_literal )?
							int alt357=2;
							int LA357_0 = input.LA(1);
							if ( (LA357_0==COMMA) ) {
								alt357=1;
							}
							switch (alt357) {
								case 1 :
									// MySQL.g:2060:34: COMMA number_literal
									{
									COMMA1047=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25390); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									COMMA1047_tree = (Object)adaptor.create(COMMA1047);
									adaptor.addChild(root_0, COMMA1047_tree);
									}

									pushFollow(FOLLOW_number_literal_in_column_data_type_header25392);
									number_literal1048=number_literal();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1048.getTree());

									}
									break;

							}

							RPAREN1049=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25396); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1049_tree = (Object)adaptor.create(RPAREN1049);
							adaptor.addChild(root_0, RPAREN1049_tree);
							}

							}
							break;

					}

					// MySQL.g:2060:66: ( UNSIGNED_SYM )?
					int alt359=2;
					int LA359_0 = input.LA(1);
					if ( (LA359_0==UNSIGNED_SYM) ) {
						alt359=1;
					}
					switch (alt359) {
						case 1 :
							// MySQL.g:2060:67: UNSIGNED_SYM
							{
							UNSIGNED_SYM1050=(Token)match(input,UNSIGNED_SYM,FOLLOW_UNSIGNED_SYM_in_column_data_type_header25401); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							UNSIGNED_SYM1050_tree = (Object)adaptor.create(UNSIGNED_SYM1050);
							adaptor.addChild(root_0, UNSIGNED_SYM1050_tree);
							}

							}
							break;

					}

					// MySQL.g:2060:82: ( ZEROFILL )?
					int alt360=2;
					int LA360_0 = input.LA(1);
					if ( (LA360_0==ZEROFILL) ) {
						alt360=1;
					}
					switch (alt360) {
						case 1 :
							// MySQL.g:2060:83: ZEROFILL
							{
							ZEROFILL1051=(Token)match(input,ZEROFILL,FOLLOW_ZEROFILL_in_column_data_type_header25406); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ZEROFILL1051_tree = (Object)adaptor.create(ZEROFILL1051);
							adaptor.addChild(root_0, ZEROFILL1051_tree);
							}

							}
							break;

					}

					// MySQL.g:2060:94: ( null_or_notnull )?
					int alt361=2;
					int LA361_0 = input.LA(1);
					if ( (LA361_0==NOT_SYM||LA361_0==NULL_SYM) ) {
						alt361=1;
					}
					switch (alt361) {
						case 1 :
							// MySQL.g:2060:95: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25411);
							null_or_notnull1052=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1052.getTree());

							}
							break;

					}

					// MySQL.g:2060:113: ( DEFAULT number_literal )?
					int alt362=2;
					int LA362_0 = input.LA(1);
					if ( (LA362_0==DEFAULT) ) {
						alt362=1;
					}
					switch (alt362) {
						case 1 :
							// MySQL.g:2060:114: DEFAULT number_literal
							{
							DEFAULT1053=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25416); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1053_tree = (Object)adaptor.create(DEFAULT1053);
							adaptor.addChild(root_0, DEFAULT1053_tree);
							}

							pushFollow(FOLLOW_number_literal_in_column_data_type_header25418);
							number_literal1054=number_literal();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, number_literal1054.getTree());

							}
							break;

					}

					}

					}
					break;
				case 13 :
					// MySQL.g:2061:4: ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2061:4: ( DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2061:7: DATE_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					DATE_SYM1055=(Token)match(input,DATE_SYM,FOLLOW_DATE_SYM_in_column_data_type_header25431); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATE_SYM1055_tree = (Object)adaptor.create(DATE_SYM1055);
					adaptor.addChild(root_0, DATE_SYM1055_tree);
					}

					// MySQL.g:2061:16: ( null_or_notnull )?
					int alt363=2;
					int LA363_0 = input.LA(1);
					if ( (LA363_0==NOT_SYM||LA363_0==NULL_SYM) ) {
						alt363=1;
					}
					switch (alt363) {
						case 1 :
							// MySQL.g:2061:17: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25434);
							null_or_notnull1056=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1056.getTree());

							}
							break;

					}

					// MySQL.g:2061:35: ( DEFAULT TEXT_STRING )?
					int alt364=2;
					int LA364_0 = input.LA(1);
					if ( (LA364_0==DEFAULT) ) {
						alt364=1;
					}
					switch (alt364) {
						case 1 :
							// MySQL.g:2061:36: DEFAULT TEXT_STRING
							{
							DEFAULT1057=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25439); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1057_tree = (Object)adaptor.create(DEFAULT1057);
							adaptor.addChild(root_0, DEFAULT1057_tree);
							}

							TEXT_STRING1058=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25441); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1058_tree = (Object)adaptor.create(TEXT_STRING1058);
							adaptor.addChild(root_0, TEXT_STRING1058_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 14 :
					// MySQL.g:2062:4: ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2062:4: ( TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2062:7: TIME_SYM ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					TIME_SYM1059=(Token)match(input,TIME_SYM,FOLLOW_TIME_SYM_in_column_data_type_header25454); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIME_SYM1059_tree = (Object)adaptor.create(TIME_SYM1059);
					adaptor.addChild(root_0, TIME_SYM1059_tree);
					}

					// MySQL.g:2062:16: ( null_or_notnull )?
					int alt365=2;
					int LA365_0 = input.LA(1);
					if ( (LA365_0==NOT_SYM||LA365_0==NULL_SYM) ) {
						alt365=1;
					}
					switch (alt365) {
						case 1 :
							// MySQL.g:2062:17: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25457);
							null_or_notnull1060=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1060.getTree());

							}
							break;

					}

					// MySQL.g:2062:35: ( DEFAULT TEXT_STRING )?
					int alt366=2;
					int LA366_0 = input.LA(1);
					if ( (LA366_0==DEFAULT) ) {
						alt366=1;
					}
					switch (alt366) {
						case 1 :
							// MySQL.g:2062:36: DEFAULT TEXT_STRING
							{
							DEFAULT1061=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25462); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1061_tree = (Object)adaptor.create(DEFAULT1061);
							adaptor.addChild(root_0, DEFAULT1061_tree);
							}

							TEXT_STRING1062=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25464); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1062_tree = (Object)adaptor.create(TEXT_STRING1062);
							adaptor.addChild(root_0, TEXT_STRING1062_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 15 :
					// MySQL.g:2063:4: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2063:4: ( TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					// MySQL.g:2063:7: TIMESTAMP ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					{
					TIMESTAMP1063=(Token)match(input,TIMESTAMP,FOLLOW_TIMESTAMP_in_column_data_type_header25477); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TIMESTAMP1063_tree = (Object)adaptor.create(TIMESTAMP1063);
					adaptor.addChild(root_0, TIMESTAMP1063_tree);
					}

					// MySQL.g:2063:17: ( null_or_notnull )?
					int alt367=2;
					int LA367_0 = input.LA(1);
					if ( (LA367_0==NOT_SYM||LA367_0==NULL_SYM) ) {
						alt367=1;
					}
					switch (alt367) {
						case 1 :
							// MySQL.g:2063:18: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25480);
							null_or_notnull1064=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1064.getTree());

							}
							break;

					}

					// MySQL.g:2063:36: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					int alt368=2;
					int LA368_0 = input.LA(1);
					if ( (LA368_0==DEFAULT) ) {
						alt368=1;
					}
					switch (alt368) {
						case 1 :
							// MySQL.g:2063:37: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING )
							{
							DEFAULT1065=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25485); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1065_tree = (Object)adaptor.create(DEFAULT1065);
							adaptor.addChild(root_0, DEFAULT1065_tree);
							}

							set1066=input.LT(1);
							if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==TEXT_STRING ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1066));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}

					}
					break;
				case 16 :
					// MySQL.g:2064:4: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2064:4: ( DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )? )
					// MySQL.g:2064:7: DATETIME ( null_or_notnull )? ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					{
					DATETIME1067=(Token)match(input,DATETIME,FOLLOW_DATETIME_in_column_data_type_header25504); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATETIME1067_tree = (Object)adaptor.create(DATETIME1067);
					adaptor.addChild(root_0, DATETIME1067_tree);
					}

					// MySQL.g:2064:16: ( null_or_notnull )?
					int alt369=2;
					int LA369_0 = input.LA(1);
					if ( (LA369_0==NOT_SYM||LA369_0==NULL_SYM) ) {
						alt369=1;
					}
					switch (alt369) {
						case 1 :
							// MySQL.g:2064:17: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25507);
							null_or_notnull1068=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1068.getTree());

							}
							break;

					}

					// MySQL.g:2064:35: ( DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING ) )?
					int alt370=2;
					int LA370_0 = input.LA(1);
					if ( (LA370_0==DEFAULT) ) {
						alt370=1;
					}
					switch (alt370) {
						case 1 :
							// MySQL.g:2064:36: DEFAULT ( CURRENT_TIMESTAMP | TEXT_STRING )
							{
							DEFAULT1069=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25512); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1069_tree = (Object)adaptor.create(DEFAULT1069);
							adaptor.addChild(root_0, DEFAULT1069_tree);
							}

							set1070=input.LT(1);
							if ( input.LA(1)==CURRENT_TIMESTAMP||input.LA(1)==TEXT_STRING ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1070));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					}

					}
					break;
				case 17 :
					// MySQL.g:2065:4: ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2065:4: ( YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )? )
					// MySQL.g:2065:7: YEAR ( null_or_notnull )? ( DEFAULT INTEGER_NUM )?
					{
					YEAR1071=(Token)match(input,YEAR,FOLLOW_YEAR_in_column_data_type_header25531); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					YEAR1071_tree = (Object)adaptor.create(YEAR1071);
					adaptor.addChild(root_0, YEAR1071_tree);
					}

					// MySQL.g:2065:12: ( null_or_notnull )?
					int alt371=2;
					int LA371_0 = input.LA(1);
					if ( (LA371_0==NOT_SYM||LA371_0==NULL_SYM) ) {
						alt371=1;
					}
					switch (alt371) {
						case 1 :
							// MySQL.g:2065:13: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25534);
							null_or_notnull1072=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1072.getTree());

							}
							break;

					}

					// MySQL.g:2065:31: ( DEFAULT INTEGER_NUM )?
					int alt372=2;
					int LA372_0 = input.LA(1);
					if ( (LA372_0==DEFAULT) ) {
						alt372=1;
					}
					switch (alt372) {
						case 1 :
							// MySQL.g:2065:32: DEFAULT INTEGER_NUM
							{
							DEFAULT1073=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25539); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1073_tree = (Object)adaptor.create(DEFAULT1073);
							adaptor.addChild(root_0, DEFAULT1073_tree);
							}

							INTEGER_NUM1074=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_column_data_type_header25541); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM1074_tree = (Object)adaptor.create(INTEGER_NUM1074);
							adaptor.addChild(root_0, INTEGER_NUM1074_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 18 :
					// MySQL.g:2066:4: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2066:4: ( CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2066:7: CHAR ( LPAREN length RPAREN )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					CHAR1075=(Token)match(input,CHAR,FOLLOW_CHAR_in_column_data_type_header25554); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHAR1075_tree = (Object)adaptor.create(CHAR1075);
					adaptor.addChild(root_0, CHAR1075_tree);
					}

					// MySQL.g:2066:14: ( LPAREN length RPAREN )?
					int alt373=2;
					int LA373_0 = input.LA(1);
					if ( (LA373_0==LPAREN) ) {
						alt373=1;
					}
					switch (alt373) {
						case 1 :
							// MySQL.g:2066:15: LPAREN length RPAREN
							{
							LPAREN1076=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25559); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1076_tree = (Object)adaptor.create(LPAREN1076);
							adaptor.addChild(root_0, LPAREN1076_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25561);
							length1077=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1077.getTree());

							RPAREN1078=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25563); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1078_tree = (Object)adaptor.create(RPAREN1078);
							adaptor.addChild(root_0, RPAREN1078_tree);
							}

							}
							break;

					}

					// MySQL.g:2066:38: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt374=2;
					int LA374_0 = input.LA(1);
					if ( (LA374_0==CHARACTER_SYM) ) {
						alt374=1;
					}
					switch (alt374) {
						case 1 :
							// MySQL.g:2066:39: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1079=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25568); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1079_tree = (Object)adaptor.create(CHARACTER_SYM1079);
							adaptor.addChild(root_0, CHARACTER_SYM1079_tree);
							}

							SET_SYM1080=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25570); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1080_tree = (Object)adaptor.create(SET_SYM1080);
							adaptor.addChild(root_0, SET_SYM1080_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25572);
							charset_name1081=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1081.getTree());

							}
							break;

					}

					// MySQL.g:2066:76: ( COLLATE_SYM collation_name )?
					int alt375=2;
					int LA375_0 = input.LA(1);
					if ( (LA375_0==COLLATE_SYM) ) {
						alt375=1;
					}
					switch (alt375) {
						case 1 :
							// MySQL.g:2066:77: COLLATE_SYM collation_name
							{
							COLLATE_SYM1082=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25577); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1082_tree = (Object)adaptor.create(COLLATE_SYM1082);
							adaptor.addChild(root_0, COLLATE_SYM1082_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25579);
							collation_name1083=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1083.getTree());

							}
							break;

					}

					// MySQL.g:2066:106: ( null_or_notnull )?
					int alt376=2;
					int LA376_0 = input.LA(1);
					if ( (LA376_0==NOT_SYM||LA376_0==NULL_SYM) ) {
						alt376=1;
					}
					switch (alt376) {
						case 1 :
							// MySQL.g:2066:107: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25584);
							null_or_notnull1084=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1084.getTree());

							}
							break;

					}

					// MySQL.g:2066:125: ( DEFAULT TEXT_STRING )?
					int alt377=2;
					int LA377_0 = input.LA(1);
					if ( (LA377_0==DEFAULT) ) {
						alt377=1;
					}
					switch (alt377) {
						case 1 :
							// MySQL.g:2066:126: DEFAULT TEXT_STRING
							{
							DEFAULT1085=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25589); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1085_tree = (Object)adaptor.create(DEFAULT1085);
							adaptor.addChild(root_0, DEFAULT1085_tree);
							}

							TEXT_STRING1086=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25591); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1086_tree = (Object)adaptor.create(TEXT_STRING1086);
							adaptor.addChild(root_0, TEXT_STRING1086_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 19 :
					// MySQL.g:2067:4: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2067:4: ( VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2067:7: VARCHAR LPAREN length RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					VARCHAR1087=(Token)match(input,VARCHAR,FOLLOW_VARCHAR_in_column_data_type_header25604); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VARCHAR1087_tree = (Object)adaptor.create(VARCHAR1087);
					adaptor.addChild(root_0, VARCHAR1087_tree);
					}

					LPAREN1088=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25606); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1088_tree = (Object)adaptor.create(LPAREN1088);
					adaptor.addChild(root_0, LPAREN1088_tree);
					}

					pushFollow(FOLLOW_length_in_column_data_type_header25608);
					length1089=length();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, length1089.getTree());

					RPAREN1090=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25610); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1090_tree = (Object)adaptor.create(RPAREN1090);
					adaptor.addChild(root_0, RPAREN1090_tree);
					}

					// MySQL.g:2067:38: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt378=2;
					int LA378_0 = input.LA(1);
					if ( (LA378_0==CHARACTER_SYM) ) {
						alt378=1;
					}
					switch (alt378) {
						case 1 :
							// MySQL.g:2067:39: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1091=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25615); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1091_tree = (Object)adaptor.create(CHARACTER_SYM1091);
							adaptor.addChild(root_0, CHARACTER_SYM1091_tree);
							}

							SET_SYM1092=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25617); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1092_tree = (Object)adaptor.create(SET_SYM1092);
							adaptor.addChild(root_0, SET_SYM1092_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25619);
							charset_name1093=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1093.getTree());

							}
							break;

					}

					// MySQL.g:2067:76: ( COLLATE_SYM collation_name )?
					int alt379=2;
					int LA379_0 = input.LA(1);
					if ( (LA379_0==COLLATE_SYM) ) {
						alt379=1;
					}
					switch (alt379) {
						case 1 :
							// MySQL.g:2067:77: COLLATE_SYM collation_name
							{
							COLLATE_SYM1094=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25624); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1094_tree = (Object)adaptor.create(COLLATE_SYM1094);
							adaptor.addChild(root_0, COLLATE_SYM1094_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25626);
							collation_name1095=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1095.getTree());

							}
							break;

					}

					// MySQL.g:2067:106: ( null_or_notnull )?
					int alt380=2;
					int LA380_0 = input.LA(1);
					if ( (LA380_0==NOT_SYM||LA380_0==NULL_SYM) ) {
						alt380=1;
					}
					switch (alt380) {
						case 1 :
							// MySQL.g:2067:107: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25631);
							null_or_notnull1096=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1096.getTree());

							}
							break;

					}

					// MySQL.g:2067:125: ( DEFAULT TEXT_STRING )?
					int alt381=2;
					int LA381_0 = input.LA(1);
					if ( (LA381_0==DEFAULT) ) {
						alt381=1;
					}
					switch (alt381) {
						case 1 :
							// MySQL.g:2067:126: DEFAULT TEXT_STRING
							{
							DEFAULT1097=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25636); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1097_tree = (Object)adaptor.create(DEFAULT1097);
							adaptor.addChild(root_0, DEFAULT1097_tree);
							}

							TEXT_STRING1098=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25638); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1098_tree = (Object)adaptor.create(TEXT_STRING1098);
							adaptor.addChild(root_0, TEXT_STRING1098_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 20 :
					// MySQL.g:2068:4: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2068:4: ( BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2068:7: BINARY ( LPAREN length RPAREN )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					BINARY1099=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header25651); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BINARY1099_tree = (Object)adaptor.create(BINARY1099);
					adaptor.addChild(root_0, BINARY1099_tree);
					}

					// MySQL.g:2068:16: ( LPAREN length RPAREN )?
					int alt382=2;
					int LA382_0 = input.LA(1);
					if ( (LA382_0==LPAREN) ) {
						alt382=1;
					}
					switch (alt382) {
						case 1 :
							// MySQL.g:2068:17: LPAREN length RPAREN
							{
							LPAREN1100=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25656); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1100_tree = (Object)adaptor.create(LPAREN1100);
							adaptor.addChild(root_0, LPAREN1100_tree);
							}

							pushFollow(FOLLOW_length_in_column_data_type_header25658);
							length1101=length();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, length1101.getTree());

							RPAREN1102=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25660); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1102_tree = (Object)adaptor.create(RPAREN1102);
							adaptor.addChild(root_0, RPAREN1102_tree);
							}

							}
							break;

					}

					// MySQL.g:2068:40: ( null_or_notnull )?
					int alt383=2;
					int LA383_0 = input.LA(1);
					if ( (LA383_0==NOT_SYM||LA383_0==NULL_SYM) ) {
						alt383=1;
					}
					switch (alt383) {
						case 1 :
							// MySQL.g:2068:41: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25665);
							null_or_notnull1103=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1103.getTree());

							}
							break;

					}

					// MySQL.g:2068:59: ( DEFAULT TEXT_STRING )?
					int alt384=2;
					int LA384_0 = input.LA(1);
					if ( (LA384_0==DEFAULT) ) {
						alt384=1;
					}
					switch (alt384) {
						case 1 :
							// MySQL.g:2068:60: DEFAULT TEXT_STRING
							{
							DEFAULT1104=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25670); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1104_tree = (Object)adaptor.create(DEFAULT1104);
							adaptor.addChild(root_0, DEFAULT1104_tree);
							}

							TEXT_STRING1105=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25672); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1105_tree = (Object)adaptor.create(TEXT_STRING1105);
							adaptor.addChild(root_0, TEXT_STRING1105_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 21 :
					// MySQL.g:2069:4: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2069:4: ( VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2069:7: VARBINARY LPAREN length RPAREN ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					VARBINARY1106=(Token)match(input,VARBINARY,FOLLOW_VARBINARY_in_column_data_type_header25685); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VARBINARY1106_tree = (Object)adaptor.create(VARBINARY1106);
					adaptor.addChild(root_0, VARBINARY1106_tree);
					}

					LPAREN1107=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25687); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1107_tree = (Object)adaptor.create(LPAREN1107);
					adaptor.addChild(root_0, LPAREN1107_tree);
					}

					pushFollow(FOLLOW_length_in_column_data_type_header25689);
					length1108=length();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, length1108.getTree());

					RPAREN1109=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25691); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1109_tree = (Object)adaptor.create(RPAREN1109);
					adaptor.addChild(root_0, RPAREN1109_tree);
					}

					// MySQL.g:2069:38: ( null_or_notnull )?
					int alt385=2;
					int LA385_0 = input.LA(1);
					if ( (LA385_0==NOT_SYM||LA385_0==NULL_SYM) ) {
						alt385=1;
					}
					switch (alt385) {
						case 1 :
							// MySQL.g:2069:39: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25694);
							null_or_notnull1110=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1110.getTree());

							}
							break;

					}

					// MySQL.g:2069:57: ( DEFAULT TEXT_STRING )?
					int alt386=2;
					int LA386_0 = input.LA(1);
					if ( (LA386_0==DEFAULT) ) {
						alt386=1;
					}
					switch (alt386) {
						case 1 :
							// MySQL.g:2069:58: DEFAULT TEXT_STRING
							{
							DEFAULT1111=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25699); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1111_tree = (Object)adaptor.create(DEFAULT1111);
							adaptor.addChild(root_0, DEFAULT1111_tree);
							}

							TEXT_STRING1112=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25701); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1112_tree = (Object)adaptor.create(TEXT_STRING1112);
							adaptor.addChild(root_0, TEXT_STRING1112_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 22 :
					// MySQL.g:2070:4: ( TINYBLOB ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2070:4: ( TINYBLOB ( null_or_notnull )? )
					// MySQL.g:2070:7: TINYBLOB ( null_or_notnull )?
					{
					TINYBLOB1113=(Token)match(input,TINYBLOB,FOLLOW_TINYBLOB_in_column_data_type_header25714); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYBLOB1113_tree = (Object)adaptor.create(TINYBLOB1113);
					adaptor.addChild(root_0, TINYBLOB1113_tree);
					}

					// MySQL.g:2070:16: ( null_or_notnull )?
					int alt387=2;
					int LA387_0 = input.LA(1);
					if ( (LA387_0==NOT_SYM||LA387_0==NULL_SYM) ) {
						alt387=1;
					}
					switch (alt387) {
						case 1 :
							// MySQL.g:2070:17: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25717);
							null_or_notnull1114=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1114.getTree());

							}
							break;

					}

					}

					}
					break;
				case 23 :
					// MySQL.g:2071:4: ( BLOB_SYM ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2071:4: ( BLOB_SYM ( null_or_notnull )? )
					// MySQL.g:2071:7: BLOB_SYM ( null_or_notnull )?
					{
					BLOB_SYM1115=(Token)match(input,BLOB_SYM,FOLLOW_BLOB_SYM_in_column_data_type_header25730); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BLOB_SYM1115_tree = (Object)adaptor.create(BLOB_SYM1115);
					adaptor.addChild(root_0, BLOB_SYM1115_tree);
					}

					// MySQL.g:2071:16: ( null_or_notnull )?
					int alt388=2;
					int LA388_0 = input.LA(1);
					if ( (LA388_0==NOT_SYM||LA388_0==NULL_SYM) ) {
						alt388=1;
					}
					switch (alt388) {
						case 1 :
							// MySQL.g:2071:17: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25733);
							null_or_notnull1116=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1116.getTree());

							}
							break;

					}

					}

					}
					break;
				case 24 :
					// MySQL.g:2072:4: ( MEDIUMBLOB ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2072:4: ( MEDIUMBLOB ( null_or_notnull )? )
					// MySQL.g:2072:7: MEDIUMBLOB ( null_or_notnull )?
					{
					MEDIUMBLOB1117=(Token)match(input,MEDIUMBLOB,FOLLOW_MEDIUMBLOB_in_column_data_type_header25746); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMBLOB1117_tree = (Object)adaptor.create(MEDIUMBLOB1117);
					adaptor.addChild(root_0, MEDIUMBLOB1117_tree);
					}

					// MySQL.g:2072:18: ( null_or_notnull )?
					int alt389=2;
					int LA389_0 = input.LA(1);
					if ( (LA389_0==NOT_SYM||LA389_0==NULL_SYM) ) {
						alt389=1;
					}
					switch (alt389) {
						case 1 :
							// MySQL.g:2072:19: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25749);
							null_or_notnull1118=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1118.getTree());

							}
							break;

					}

					}

					}
					break;
				case 25 :
					// MySQL.g:2073:4: ( LONGBLOB ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2073:4: ( LONGBLOB ( null_or_notnull )? )
					// MySQL.g:2073:7: LONGBLOB ( null_or_notnull )?
					{
					LONGBLOB1119=(Token)match(input,LONGBLOB,FOLLOW_LONGBLOB_in_column_data_type_header25762); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGBLOB1119_tree = (Object)adaptor.create(LONGBLOB1119);
					adaptor.addChild(root_0, LONGBLOB1119_tree);
					}

					// MySQL.g:2073:16: ( null_or_notnull )?
					int alt390=2;
					int LA390_0 = input.LA(1);
					if ( (LA390_0==NOT_SYM||LA390_0==NULL_SYM) ) {
						alt390=1;
					}
					switch (alt390) {
						case 1 :
							// MySQL.g:2073:17: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25765);
							null_or_notnull1120=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1120.getTree());

							}
							break;

					}

					}

					}
					break;
				case 26 :
					// MySQL.g:2074:4: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2074:4: ( TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// MySQL.g:2074:7: TINYTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					TINYTEXT1121=(Token)match(input,TINYTEXT,FOLLOW_TINYTEXT_in_column_data_type_header25778); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TINYTEXT1121_tree = (Object)adaptor.create(TINYTEXT1121);
					adaptor.addChild(root_0, TINYTEXT1121_tree);
					}

					// MySQL.g:2074:18: ( BINARY )?
					int alt391=2;
					int LA391_0 = input.LA(1);
					if ( (LA391_0==BINARY) ) {
						alt391=1;
					}
					switch (alt391) {
						case 1 :
							// MySQL.g:2074:19: BINARY
							{
							BINARY1122=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header25783); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1122_tree = (Object)adaptor.create(BINARY1122);
							adaptor.addChild(root_0, BINARY1122_tree);
							}

							}
							break;

					}

					// MySQL.g:2074:28: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt392=2;
					int LA392_0 = input.LA(1);
					if ( (LA392_0==CHARACTER_SYM) ) {
						alt392=1;
					}
					switch (alt392) {
						case 1 :
							// MySQL.g:2074:29: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1123=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25788); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1123_tree = (Object)adaptor.create(CHARACTER_SYM1123);
							adaptor.addChild(root_0, CHARACTER_SYM1123_tree);
							}

							SET_SYM1124=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25790); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1124_tree = (Object)adaptor.create(SET_SYM1124);
							adaptor.addChild(root_0, SET_SYM1124_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25792);
							charset_name1125=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1125.getTree());

							}
							break;

					}

					// MySQL.g:2074:66: ( COLLATE_SYM collation_name )?
					int alt393=2;
					int LA393_0 = input.LA(1);
					if ( (LA393_0==COLLATE_SYM) ) {
						alt393=1;
					}
					switch (alt393) {
						case 1 :
							// MySQL.g:2074:67: COLLATE_SYM collation_name
							{
							COLLATE_SYM1126=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25797); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1126_tree = (Object)adaptor.create(COLLATE_SYM1126);
							adaptor.addChild(root_0, COLLATE_SYM1126_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25799);
							collation_name1127=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1127.getTree());

							}
							break;

					}

					// MySQL.g:2074:96: ( null_or_notnull )?
					int alt394=2;
					int LA394_0 = input.LA(1);
					if ( (LA394_0==NOT_SYM||LA394_0==NULL_SYM) ) {
						alt394=1;
					}
					switch (alt394) {
						case 1 :
							// MySQL.g:2074:97: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25804);
							null_or_notnull1128=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1128.getTree());

							}
							break;

					}

					}

					}
					break;
				case 27 :
					// MySQL.g:2075:4: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2075:4: ( TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// MySQL.g:2075:7: TEXT_SYM ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					TEXT_SYM1129=(Token)match(input,TEXT_SYM,FOLLOW_TEXT_SYM_in_column_data_type_header25817); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_SYM1129_tree = (Object)adaptor.create(TEXT_SYM1129);
					adaptor.addChild(root_0, TEXT_SYM1129_tree);
					}

					// MySQL.g:2075:18: ( BINARY )?
					int alt395=2;
					int LA395_0 = input.LA(1);
					if ( (LA395_0==BINARY) ) {
						alt395=1;
					}
					switch (alt395) {
						case 1 :
							// MySQL.g:2075:19: BINARY
							{
							BINARY1130=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header25822); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1130_tree = (Object)adaptor.create(BINARY1130);
							adaptor.addChild(root_0, BINARY1130_tree);
							}

							}
							break;

					}

					// MySQL.g:2075:28: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt396=2;
					int LA396_0 = input.LA(1);
					if ( (LA396_0==CHARACTER_SYM) ) {
						alt396=1;
					}
					switch (alt396) {
						case 1 :
							// MySQL.g:2075:29: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1131=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25827); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1131_tree = (Object)adaptor.create(CHARACTER_SYM1131);
							adaptor.addChild(root_0, CHARACTER_SYM1131_tree);
							}

							SET_SYM1132=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25829); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1132_tree = (Object)adaptor.create(SET_SYM1132);
							adaptor.addChild(root_0, SET_SYM1132_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25831);
							charset_name1133=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1133.getTree());

							}
							break;

					}

					// MySQL.g:2075:66: ( COLLATE_SYM collation_name )?
					int alt397=2;
					int LA397_0 = input.LA(1);
					if ( (LA397_0==COLLATE_SYM) ) {
						alt397=1;
					}
					switch (alt397) {
						case 1 :
							// MySQL.g:2075:67: COLLATE_SYM collation_name
							{
							COLLATE_SYM1134=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25836); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1134_tree = (Object)adaptor.create(COLLATE_SYM1134);
							adaptor.addChild(root_0, COLLATE_SYM1134_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25838);
							collation_name1135=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1135.getTree());

							}
							break;

					}

					// MySQL.g:2075:96: ( null_or_notnull )?
					int alt398=2;
					int LA398_0 = input.LA(1);
					if ( (LA398_0==NOT_SYM||LA398_0==NULL_SYM) ) {
						alt398=1;
					}
					switch (alt398) {
						case 1 :
							// MySQL.g:2075:97: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25843);
							null_or_notnull1136=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1136.getTree());

							}
							break;

					}

					}

					}
					break;
				case 28 :
					// MySQL.g:2076:4: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2076:4: ( MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// MySQL.g:2076:7: MEDIUMTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					MEDIUMTEXT1137=(Token)match(input,MEDIUMTEXT,FOLLOW_MEDIUMTEXT_in_column_data_type_header25856); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MEDIUMTEXT1137_tree = (Object)adaptor.create(MEDIUMTEXT1137);
					adaptor.addChild(root_0, MEDIUMTEXT1137_tree);
					}

					// MySQL.g:2076:18: ( BINARY )?
					int alt399=2;
					int LA399_0 = input.LA(1);
					if ( (LA399_0==BINARY) ) {
						alt399=1;
					}
					switch (alt399) {
						case 1 :
							// MySQL.g:2076:19: BINARY
							{
							BINARY1138=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header25859); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1138_tree = (Object)adaptor.create(BINARY1138);
							adaptor.addChild(root_0, BINARY1138_tree);
							}

							}
							break;

					}

					// MySQL.g:2076:28: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt400=2;
					int LA400_0 = input.LA(1);
					if ( (LA400_0==CHARACTER_SYM) ) {
						alt400=1;
					}
					switch (alt400) {
						case 1 :
							// MySQL.g:2076:29: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1139=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25864); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1139_tree = (Object)adaptor.create(CHARACTER_SYM1139);
							adaptor.addChild(root_0, CHARACTER_SYM1139_tree);
							}

							SET_SYM1140=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25866); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1140_tree = (Object)adaptor.create(SET_SYM1140);
							adaptor.addChild(root_0, SET_SYM1140_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25868);
							charset_name1141=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1141.getTree());

							}
							break;

					}

					// MySQL.g:2076:66: ( COLLATE_SYM collation_name )?
					int alt401=2;
					int LA401_0 = input.LA(1);
					if ( (LA401_0==COLLATE_SYM) ) {
						alt401=1;
					}
					switch (alt401) {
						case 1 :
							// MySQL.g:2076:67: COLLATE_SYM collation_name
							{
							COLLATE_SYM1142=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25873); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1142_tree = (Object)adaptor.create(COLLATE_SYM1142);
							adaptor.addChild(root_0, COLLATE_SYM1142_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25875);
							collation_name1143=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1143.getTree());

							}
							break;

					}

					// MySQL.g:2076:96: ( null_or_notnull )?
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==NOT_SYM||LA402_0==NULL_SYM) ) {
						alt402=1;
					}
					switch (alt402) {
						case 1 :
							// MySQL.g:2076:97: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25880);
							null_or_notnull1144=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1144.getTree());

							}
							break;

					}

					}

					}
					break;
				case 29 :
					// MySQL.g:2077:4: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2077:4: ( LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? )
					// MySQL.g:2077:7: LONGTEXT ( BINARY )? ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )?
					{
					LONGTEXT1145=(Token)match(input,LONGTEXT,FOLLOW_LONGTEXT_in_column_data_type_header25893); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGTEXT1145_tree = (Object)adaptor.create(LONGTEXT1145);
					adaptor.addChild(root_0, LONGTEXT1145_tree);
					}

					// MySQL.g:2077:18: ( BINARY )?
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==BINARY) ) {
						alt403=1;
					}
					switch (alt403) {
						case 1 :
							// MySQL.g:2077:19: BINARY
							{
							BINARY1146=(Token)match(input,BINARY,FOLLOW_BINARY_in_column_data_type_header25898); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							BINARY1146_tree = (Object)adaptor.create(BINARY1146);
							adaptor.addChild(root_0, BINARY1146_tree);
							}

							}
							break;

					}

					// MySQL.g:2077:28: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==CHARACTER_SYM) ) {
						alt404=1;
					}
					switch (alt404) {
						case 1 :
							// MySQL.g:2077:29: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1147=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25903); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1147_tree = (Object)adaptor.create(CHARACTER_SYM1147);
							adaptor.addChild(root_0, CHARACTER_SYM1147_tree);
							}

							SET_SYM1148=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25905); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1148_tree = (Object)adaptor.create(SET_SYM1148);
							adaptor.addChild(root_0, SET_SYM1148_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25907);
							charset_name1149=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1149.getTree());

							}
							break;

					}

					// MySQL.g:2077:66: ( COLLATE_SYM collation_name )?
					int alt405=2;
					int LA405_0 = input.LA(1);
					if ( (LA405_0==COLLATE_SYM) ) {
						alt405=1;
					}
					switch (alt405) {
						case 1 :
							// MySQL.g:2077:67: COLLATE_SYM collation_name
							{
							COLLATE_SYM1150=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25912); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1150_tree = (Object)adaptor.create(COLLATE_SYM1150);
							adaptor.addChild(root_0, COLLATE_SYM1150_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25914);
							collation_name1151=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1151.getTree());

							}
							break;

					}

					// MySQL.g:2077:96: ( null_or_notnull )?
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==NOT_SYM||LA406_0==NULL_SYM) ) {
						alt406=1;
					}
					switch (alt406) {
						case 1 :
							// MySQL.g:2077:97: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25919);
							null_or_notnull1152=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1152.getTree());

							}
							break;

					}

					}

					}
					break;
				case 30 :
					// MySQL.g:2078:4: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2078:4: ( ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2078:7: ENUM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					ENUM1153=(Token)match(input,ENUM,FOLLOW_ENUM_in_column_data_type_header25932); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENUM1153_tree = (Object)adaptor.create(ENUM1153);
					adaptor.addChild(root_0, ENUM1153_tree);
					}

					LPAREN1154=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25937); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1154_tree = (Object)adaptor.create(LPAREN1154);
					adaptor.addChild(root_0, LPAREN1154_tree);
					}

					TEXT_STRING1155=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25939); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1155_tree = (Object)adaptor.create(TEXT_STRING1155);
					adaptor.addChild(root_0, TEXT_STRING1155_tree);
					}

					// MySQL.g:2078:34: ( COMMA TEXT_STRING )*
					loop407:
					while (true) {
						int alt407=2;
						int LA407_0 = input.LA(1);
						if ( (LA407_0==COMMA) ) {
							alt407=1;
						}

						switch (alt407) {
						case 1 :
							// MySQL.g:2078:35: COMMA TEXT_STRING
							{
							COMMA1156=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25942); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1156_tree = (Object)adaptor.create(COMMA1156);
							adaptor.addChild(root_0, COMMA1156_tree);
							}

							TEXT_STRING1157=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25944); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1157_tree = (Object)adaptor.create(TEXT_STRING1157);
							adaptor.addChild(root_0, TEXT_STRING1157_tree);
							}

							}
							break;

						default :
							break loop407;
						}
					}

					RPAREN1158=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header25948); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1158_tree = (Object)adaptor.create(RPAREN1158);
					adaptor.addChild(root_0, RPAREN1158_tree);
					}

					// MySQL.g:2078:62: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==CHARACTER_SYM) ) {
						alt408=1;
					}
					switch (alt408) {
						case 1 :
							// MySQL.g:2078:63: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1159=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header25951); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1159_tree = (Object)adaptor.create(CHARACTER_SYM1159);
							adaptor.addChild(root_0, CHARACTER_SYM1159_tree);
							}

							SET_SYM1160=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25953); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1160_tree = (Object)adaptor.create(SET_SYM1160);
							adaptor.addChild(root_0, SET_SYM1160_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header25955);
							charset_name1161=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1161.getTree());

							}
							break;

					}

					// MySQL.g:2078:100: ( COLLATE_SYM collation_name )?
					int alt409=2;
					int LA409_0 = input.LA(1);
					if ( (LA409_0==COLLATE_SYM) ) {
						alt409=1;
					}
					switch (alt409) {
						case 1 :
							// MySQL.g:2078:101: COLLATE_SYM collation_name
							{
							COLLATE_SYM1162=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header25960); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1162_tree = (Object)adaptor.create(COLLATE_SYM1162);
							adaptor.addChild(root_0, COLLATE_SYM1162_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header25962);
							collation_name1163=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1163.getTree());

							}
							break;

					}

					// MySQL.g:2078:130: ( null_or_notnull )?
					int alt410=2;
					int LA410_0 = input.LA(1);
					if ( (LA410_0==NOT_SYM||LA410_0==NULL_SYM) ) {
						alt410=1;
					}
					switch (alt410) {
						case 1 :
							// MySQL.g:2078:131: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header25967);
							null_or_notnull1164=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1164.getTree());

							}
							break;

					}

					// MySQL.g:2078:149: ( DEFAULT TEXT_STRING )?
					int alt411=2;
					int LA411_0 = input.LA(1);
					if ( (LA411_0==DEFAULT) ) {
						alt411=1;
					}
					switch (alt411) {
						case 1 :
							// MySQL.g:2078:150: DEFAULT TEXT_STRING
							{
							DEFAULT1165=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header25972); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1165_tree = (Object)adaptor.create(DEFAULT1165);
							adaptor.addChild(root_0, DEFAULT1165_tree);
							}

							TEXT_STRING1166=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25974); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1166_tree = (Object)adaptor.create(TEXT_STRING1166);
							adaptor.addChild(root_0, TEXT_STRING1166_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 31 :
					// MySQL.g:2079:4: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2079:4: ( SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )? )
					// MySQL.g:2079:7: SET_SYM LPAREN TEXT_STRING ( COMMA TEXT_STRING )* RPAREN ( CHARACTER_SYM SET_SYM charset_name )? ( COLLATE_SYM collation_name )? ( null_or_notnull )? ( DEFAULT TEXT_STRING )?
					{
					SET_SYM1167=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header25987); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1167_tree = (Object)adaptor.create(SET_SYM1167);
					adaptor.addChild(root_0, SET_SYM1167_tree);
					}

					LPAREN1168=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_column_data_type_header25989); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1168_tree = (Object)adaptor.create(LPAREN1168);
					adaptor.addChild(root_0, LPAREN1168_tree);
					}

					TEXT_STRING1169=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25991); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1169_tree = (Object)adaptor.create(TEXT_STRING1169);
					adaptor.addChild(root_0, TEXT_STRING1169_tree);
					}

					// MySQL.g:2079:34: ( COMMA TEXT_STRING )*
					loop412:
					while (true) {
						int alt412=2;
						int LA412_0 = input.LA(1);
						if ( (LA412_0==COMMA) ) {
							alt412=1;
						}

						switch (alt412) {
						case 1 :
							// MySQL.g:2079:35: COMMA TEXT_STRING
							{
							COMMA1170=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_data_type_header25994); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1170_tree = (Object)adaptor.create(COMMA1170);
							adaptor.addChild(root_0, COMMA1170_tree);
							}

							TEXT_STRING1171=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header25996); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1171_tree = (Object)adaptor.create(TEXT_STRING1171);
							adaptor.addChild(root_0, TEXT_STRING1171_tree);
							}

							}
							break;

						default :
							break loop412;
						}
					}

					RPAREN1172=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_column_data_type_header26000); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1172_tree = (Object)adaptor.create(RPAREN1172);
					adaptor.addChild(root_0, RPAREN1172_tree);
					}

					// MySQL.g:2079:62: ( CHARACTER_SYM SET_SYM charset_name )?
					int alt413=2;
					int LA413_0 = input.LA(1);
					if ( (LA413_0==CHARACTER_SYM) ) {
						alt413=1;
					}
					switch (alt413) {
						case 1 :
							// MySQL.g:2079:63: CHARACTER_SYM SET_SYM charset_name
							{
							CHARACTER_SYM1173=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_column_data_type_header26003); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CHARACTER_SYM1173_tree = (Object)adaptor.create(CHARACTER_SYM1173);
							adaptor.addChild(root_0, CHARACTER_SYM1173_tree);
							}

							SET_SYM1174=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_column_data_type_header26005); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1174_tree = (Object)adaptor.create(SET_SYM1174);
							adaptor.addChild(root_0, SET_SYM1174_tree);
							}

							pushFollow(FOLLOW_charset_name_in_column_data_type_header26007);
							charset_name1175=charset_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1175.getTree());

							}
							break;

					}

					// MySQL.g:2079:100: ( COLLATE_SYM collation_name )?
					int alt414=2;
					int LA414_0 = input.LA(1);
					if ( (LA414_0==COLLATE_SYM) ) {
						alt414=1;
					}
					switch (alt414) {
						case 1 :
							// MySQL.g:2079:101: COLLATE_SYM collation_name
							{
							COLLATE_SYM1176=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_column_data_type_header26012); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1176_tree = (Object)adaptor.create(COLLATE_SYM1176);
							adaptor.addChild(root_0, COLLATE_SYM1176_tree);
							}

							pushFollow(FOLLOW_collation_name_in_column_data_type_header26014);
							collation_name1177=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1177.getTree());

							}
							break;

					}

					// MySQL.g:2079:130: ( null_or_notnull )?
					int alt415=2;
					int LA415_0 = input.LA(1);
					if ( (LA415_0==NOT_SYM||LA415_0==NULL_SYM) ) {
						alt415=1;
					}
					switch (alt415) {
						case 1 :
							// MySQL.g:2079:131: null_or_notnull
							{
							pushFollow(FOLLOW_null_or_notnull_in_column_data_type_header26019);
							null_or_notnull1178=null_or_notnull();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, null_or_notnull1178.getTree());

							}
							break;

					}

					// MySQL.g:2079:149: ( DEFAULT TEXT_STRING )?
					int alt416=2;
					int LA416_0 = input.LA(1);
					if ( (LA416_0==DEFAULT) ) {
						alt416=1;
					}
					switch (alt416) {
						case 1 :
							// MySQL.g:2079:150: DEFAULT TEXT_STRING
							{
							DEFAULT1179=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_column_data_type_header26024); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1179_tree = (Object)adaptor.create(DEFAULT1179);
							adaptor.addChild(root_0, DEFAULT1179_tree);
							}

							TEXT_STRING1180=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_column_data_type_header26026); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							TEXT_STRING1180_tree = (Object)adaptor.create(TEXT_STRING1180);
							adaptor.addChild(root_0, TEXT_STRING1180_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_data_type_header"


	public static class index_column_name_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_column_name"
	// MySQL.g:2083:1: index_column_name : column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? ;
	public final MySQLParser.index_column_name_return index_column_name() throws RecognitionException {
		MySQLParser.index_column_name_return retval = new MySQLParser.index_column_name_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LPAREN1182=null;
		Token INTEGER_NUM1183=null;
		Token RPAREN1184=null;
		Token set1185=null;
		ParserRuleReturnScope column_name1181 =null;

		Object LPAREN1182_tree=null;
		Object INTEGER_NUM1183_tree=null;
		Object RPAREN1184_tree=null;
		Object set1185_tree=null;

		try {
			// MySQL.g:2083:18: ( column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )? )
			// MySQL.g:2084:2: column_name ( LPAREN INTEGER_NUM RPAREN )? ( ASC | DESC )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_name_in_index_column_name26042);
			column_name1181=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1181.getTree());

			// MySQL.g:2084:14: ( LPAREN INTEGER_NUM RPAREN )?
			int alt418=2;
			int LA418_0 = input.LA(1);
			if ( (LA418_0==LPAREN) ) {
				alt418=1;
			}
			switch (alt418) {
				case 1 :
					// MySQL.g:2084:15: LPAREN INTEGER_NUM RPAREN
					{
					LPAREN1182=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_index_column_name26045); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1182_tree = (Object)adaptor.create(LPAREN1182);
					adaptor.addChild(root_0, LPAREN1182_tree);
					}

					INTEGER_NUM1183=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_column_name26047); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1183_tree = (Object)adaptor.create(INTEGER_NUM1183);
					adaptor.addChild(root_0, INTEGER_NUM1183_tree);
					}

					RPAREN1184=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_index_column_name26049); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1184_tree = (Object)adaptor.create(RPAREN1184);
					adaptor.addChild(root_0, RPAREN1184_tree);
					}

					}
					break;

			}

			// MySQL.g:2084:43: ( ASC | DESC )?
			int alt419=2;
			int LA419_0 = input.LA(1);
			if ( (LA419_0==ASC||LA419_0==DESC) ) {
				alt419=1;
			}
			switch (alt419) {
				case 1 :
					// MySQL.g:
					{
					set1185=input.LT(1);
					if ( input.LA(1)==ASC||input.LA(1)==DESC ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1185));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_column_name"


	public static class reference_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reference_definition"
	// MySQL.g:2087:1: reference_definition : REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? ;
	public final MySQLParser.reference_definition_return reference_definition() throws RecognitionException {
		MySQLParser.reference_definition_return retval = new MySQLParser.reference_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token REFERENCES1186=null;
		Token LPAREN1188=null;
		Token COMMA1190=null;
		Token RPAREN1192=null;
		Token MATCH1193=null;
		Token FULL1194=null;
		Token MATCH1195=null;
		Token PARTIAL1196=null;
		Token MATCH1197=null;
		Token SIMPLE_SYM1198=null;
		Token ON1199=null;
		Token DELETE_SYM1200=null;
		Token ON1202=null;
		Token UPDATE1203=null;
		ParserRuleReturnScope table_name1187 =null;
		ParserRuleReturnScope index_column_name1189 =null;
		ParserRuleReturnScope index_column_name1191 =null;
		ParserRuleReturnScope reference_option1201 =null;
		ParserRuleReturnScope reference_option1204 =null;

		Object REFERENCES1186_tree=null;
		Object LPAREN1188_tree=null;
		Object COMMA1190_tree=null;
		Object RPAREN1192_tree=null;
		Object MATCH1193_tree=null;
		Object FULL1194_tree=null;
		Object MATCH1195_tree=null;
		Object PARTIAL1196_tree=null;
		Object MATCH1197_tree=null;
		Object SIMPLE_SYM1198_tree=null;
		Object ON1199_tree=null;
		Object DELETE_SYM1200_tree=null;
		Object ON1202_tree=null;
		Object UPDATE1203_tree=null;

		try {
			// MySQL.g:2087:21: ( REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )? )
			// MySQL.g:2088:2: REFERENCES table_name LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )? ( ON DELETE_SYM reference_option )? ( ON UPDATE reference_option )?
			{
			root_0 = (Object)adaptor.nil();


			REFERENCES1186=(Token)match(input,REFERENCES,FOLLOW_REFERENCES_in_reference_definition26069); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			REFERENCES1186_tree = (Object)adaptor.create(REFERENCES1186);
			adaptor.addChild(root_0, REFERENCES1186_tree);
			}

			pushFollow(FOLLOW_table_name_in_reference_definition26071);
			table_name1187=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1187.getTree());

			LPAREN1188=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_definition26073); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			LPAREN1188_tree = (Object)adaptor.create(LPAREN1188);
			adaptor.addChild(root_0, LPAREN1188_tree);
			}

			pushFollow(FOLLOW_index_column_name_in_reference_definition26075);
			index_column_name1189=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1189.getTree());

			// MySQL.g:2088:49: ( COMMA index_column_name )*
			loop420:
			while (true) {
				int alt420=2;
				int LA420_0 = input.LA(1);
				if ( (LA420_0==COMMA) ) {
					alt420=1;
				}

				switch (alt420) {
				case 1 :
					// MySQL.g:2088:50: COMMA index_column_name
					{
					COMMA1190=(Token)match(input,COMMA,FOLLOW_COMMA_in_reference_definition26078); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1190_tree = (Object)adaptor.create(COMMA1190);
					adaptor.addChild(root_0, COMMA1190_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_reference_definition26080);
					index_column_name1191=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1191.getTree());

					}
					break;

				default :
					break loop420;
				}
			}

			RPAREN1192=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_definition26084); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RPAREN1192_tree = (Object)adaptor.create(RPAREN1192);
			adaptor.addChild(root_0, RPAREN1192_tree);
			}

			// MySQL.g:2089:2: ( ( MATCH FULL ) | ( MATCH PARTIAL ) | ( MATCH SIMPLE_SYM ) )?
			int alt421=4;
			int LA421_0 = input.LA(1);
			if ( (LA421_0==MATCH) ) {
				switch ( input.LA(2) ) {
					case FULL:
						{
						alt421=1;
						}
						break;
					case PARTIAL:
						{
						alt421=2;
						}
						break;
					case SIMPLE_SYM:
						{
						alt421=3;
						}
						break;
				}
			}
			switch (alt421) {
				case 1 :
					// MySQL.g:2089:4: ( MATCH FULL )
					{
					// MySQL.g:2089:4: ( MATCH FULL )
					// MySQL.g:2089:5: MATCH FULL
					{
					MATCH1193=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition26090); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1193_tree = (Object)adaptor.create(MATCH1193);
					adaptor.addChild(root_0, MATCH1193_tree);
					}

					FULL1194=(Token)match(input,FULL,FOLLOW_FULL_in_reference_definition26092); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FULL1194_tree = (Object)adaptor.create(FULL1194);
					adaptor.addChild(root_0, FULL1194_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2089:19: ( MATCH PARTIAL )
					{
					// MySQL.g:2089:19: ( MATCH PARTIAL )
					// MySQL.g:2089:20: MATCH PARTIAL
					{
					MATCH1195=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition26098); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1195_tree = (Object)adaptor.create(MATCH1195);
					adaptor.addChild(root_0, MATCH1195_tree);
					}

					PARTIAL1196=(Token)match(input,PARTIAL,FOLLOW_PARTIAL_in_reference_definition26100); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTIAL1196_tree = (Object)adaptor.create(PARTIAL1196);
					adaptor.addChild(root_0, PARTIAL1196_tree);
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2089:37: ( MATCH SIMPLE_SYM )
					{
					// MySQL.g:2089:37: ( MATCH SIMPLE_SYM )
					// MySQL.g:2089:38: MATCH SIMPLE_SYM
					{
					MATCH1197=(Token)match(input,MATCH,FOLLOW_MATCH_in_reference_definition26106); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MATCH1197_tree = (Object)adaptor.create(MATCH1197);
					adaptor.addChild(root_0, MATCH1197_tree);
					}

					SIMPLE_SYM1198=(Token)match(input,SIMPLE_SYM,FOLLOW_SIMPLE_SYM_in_reference_definition26108); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIMPLE_SYM1198_tree = (Object)adaptor.create(SIMPLE_SYM1198);
					adaptor.addChild(root_0, SIMPLE_SYM1198_tree);
					}

					}

					}
					break;

			}

			// MySQL.g:2090:2: ( ON DELETE_SYM reference_option )?
			int alt422=2;
			int LA422_0 = input.LA(1);
			if ( (LA422_0==ON) ) {
				int LA422_1 = input.LA(2);
				if ( (LA422_1==DELETE_SYM) ) {
					alt422=1;
				}
			}
			switch (alt422) {
				case 1 :
					// MySQL.g:2090:3: ON DELETE_SYM reference_option
					{
					ON1199=(Token)match(input,ON,FOLLOW_ON_in_reference_definition26116); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON1199_tree = (Object)adaptor.create(ON1199);
					adaptor.addChild(root_0, ON1199_tree);
					}

					DELETE_SYM1200=(Token)match(input,DELETE_SYM,FOLLOW_DELETE_SYM_in_reference_definition26118); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DELETE_SYM1200_tree = (Object)adaptor.create(DELETE_SYM1200);
					adaptor.addChild(root_0, DELETE_SYM1200_tree);
					}

					pushFollow(FOLLOW_reference_option_in_reference_definition26120);
					reference_option1201=reference_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option1201.getTree());

					}
					break;

			}

			// MySQL.g:2091:2: ( ON UPDATE reference_option )?
			int alt423=2;
			int LA423_0 = input.LA(1);
			if ( (LA423_0==ON) ) {
				alt423=1;
			}
			switch (alt423) {
				case 1 :
					// MySQL.g:2091:3: ON UPDATE reference_option
					{
					ON1202=(Token)match(input,ON,FOLLOW_ON_in_reference_definition26126); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ON1202_tree = (Object)adaptor.create(ON1202);
					adaptor.addChild(root_0, ON1202_tree);
					}

					UPDATE1203=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_reference_definition26128); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UPDATE1203_tree = (Object)adaptor.create(UPDATE1203);
					adaptor.addChild(root_0, UPDATE1203_tree);
					}

					pushFollow(FOLLOW_reference_option_in_reference_definition26130);
					reference_option1204=reference_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_option1204.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_definition"


	public static class reference_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "reference_option"
	// MySQL.g:2093:1: reference_option : ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) );
	public final MySQLParser.reference_option_return reference_option() throws RecognitionException {
		MySQLParser.reference_option_return retval = new MySQLParser.reference_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token RESTRICT1205=null;
		Token CASCADE1206=null;
		Token SET_SYM1207=null;
		Token NULL_SYM1208=null;
		Token NO_SYM1209=null;
		Token ACTION1210=null;

		Object RESTRICT1205_tree=null;
		Object CASCADE1206_tree=null;
		Object SET_SYM1207_tree=null;
		Object NULL_SYM1208_tree=null;
		Object NO_SYM1209_tree=null;
		Object ACTION1210_tree=null;

		try {
			// MySQL.g:2093:17: ( ( RESTRICT ) | ( CASCADE ) | ( SET_SYM NULL_SYM ) | ( NO_SYM ACTION ) )
			int alt424=4;
			switch ( input.LA(1) ) {
			case RESTRICT:
				{
				alt424=1;
				}
				break;
			case CASCADE:
				{
				alt424=2;
				}
				break;
			case SET_SYM:
				{
				alt424=3;
				}
				break;
			case NO_SYM:
				{
				alt424=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 424, 0, input);
				throw nvae;
			}
			switch (alt424) {
				case 1 :
					// MySQL.g:2094:2: ( RESTRICT )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2094:2: ( RESTRICT )
					// MySQL.g:2094:3: RESTRICT
					{
					RESTRICT1205=(Token)match(input,RESTRICT,FOLLOW_RESTRICT_in_reference_option26141); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RESTRICT1205_tree = (Object)adaptor.create(RESTRICT1205);
					adaptor.addChild(root_0, RESTRICT1205_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2094:15: ( CASCADE )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2094:15: ( CASCADE )
					// MySQL.g:2094:16: CASCADE
					{
					CASCADE1206=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_reference_option26147); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CASCADE1206_tree = (Object)adaptor.create(CASCADE1206);
					adaptor.addChild(root_0, CASCADE1206_tree);
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2094:27: ( SET_SYM NULL_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2094:27: ( SET_SYM NULL_SYM )
					// MySQL.g:2094:28: SET_SYM NULL_SYM
					{
					SET_SYM1207=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_reference_option26153); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1207_tree = (Object)adaptor.create(SET_SYM1207);
					adaptor.addChild(root_0, SET_SYM1207_tree);
					}

					NULL_SYM1208=(Token)match(input,NULL_SYM,FOLLOW_NULL_SYM_in_reference_option26155); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NULL_SYM1208_tree = (Object)adaptor.create(NULL_SYM1208);
					adaptor.addChild(root_0, NULL_SYM1208_tree);
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:2094:48: ( NO_SYM ACTION )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2094:48: ( NO_SYM ACTION )
					// MySQL.g:2094:49: NO_SYM ACTION
					{
					NO_SYM1209=(Token)match(input,NO_SYM,FOLLOW_NO_SYM_in_reference_option26161); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					NO_SYM1209_tree = (Object)adaptor.create(NO_SYM1209);
					adaptor.addChild(root_0, NO_SYM1209_tree);
					}

					ACTION1210=(Token)match(input,ACTION,FOLLOW_ACTION_in_reference_option26163); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ACTION1210_tree = (Object)adaptor.create(ACTION1210);
					adaptor.addChild(root_0, ACTION1210_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_option"


	public static class table_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_options"
	// MySQL.g:2097:1: table_options : table_option ( ( COMMA )? table_option )* ;
	public final MySQLParser.table_options_return table_options() throws RecognitionException {
		MySQLParser.table_options_return retval = new MySQLParser.table_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1212=null;
		ParserRuleReturnScope table_option1211 =null;
		ParserRuleReturnScope table_option1213 =null;

		Object COMMA1212_tree=null;

		try {
			// MySQL.g:2097:14: ( table_option ( ( COMMA )? table_option )* )
			// MySQL.g:2098:2: table_option ( ( COMMA )? table_option )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_table_option_in_table_options26173);
			table_option1211=table_option();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option1211.getTree());

			// MySQL.g:2098:15: ( ( COMMA )? table_option )*
			loop426:
			while (true) {
				int alt426=2;
				alt426 = dfa426.predict(input);
				switch (alt426) {
				case 1 :
					// MySQL.g:2098:16: ( COMMA )? table_option
					{
					// MySQL.g:2098:16: ( COMMA )?
					int alt425=2;
					int LA425_0 = input.LA(1);
					if ( (LA425_0==COMMA) ) {
						alt425=1;
					}
					switch (alt425) {
						case 1 :
							// MySQL.g:2098:18: COMMA
							{
							COMMA1212=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_options26178); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1212_tree = (Object)adaptor.create(COMMA1212);
							adaptor.addChild(root_0, COMMA1212_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_table_option_in_table_options26183);
					table_option1213=table_option();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_option1213.getTree());

					}
					break;

				default :
					break loop426;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_options"


	public static class table_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_option"
	// MySQL.g:2100:1: table_option : ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) );
	public final MySQLParser.table_option_return table_option() throws RecognitionException {
		MySQLParser.table_option_return retval = new MySQLParser.table_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ENGINE_SYM1214=null;
		Token EQ_SYM1215=null;
		Token AUTO_INCREMENT1217=null;
		Token EQ_SYM1218=null;
		Token INTEGER_NUM1219=null;
		Token AVG_ROW_LENGTH1220=null;
		Token EQ_SYM1221=null;
		Token INTEGER_NUM1222=null;
		Token DEFAULT1223=null;
		Token CHARACTER_SYM1224=null;
		Token SET_SYM1225=null;
		Token EQ_SYM1226=null;
		Token CHECKSUM_SYM1228=null;
		Token EQ_SYM1229=null;
		Token INTEGER_NUM1230=null;
		Token DEFAULT1231=null;
		Token COLLATE_SYM1232=null;
		Token EQ_SYM1233=null;
		Token COMMENT_SYM1235=null;
		Token EQ_SYM1236=null;
		Token TEXT_STRING1237=null;
		Token CONNECTION_SYM1238=null;
		Token EQ_SYM1239=null;
		Token TEXT_STRING1240=null;
		Token DATA_SYM1241=null;
		Token DIRECTORY_SYM1242=null;
		Token EQ_SYM1243=null;
		Token TEXT_STRING1244=null;
		Token DELAY_KEY_WRITE_SYM1245=null;
		Token EQ_SYM1246=null;
		Token INTEGER_NUM1247=null;
		Token INDEX_SYM1248=null;
		Token DIRECTORY_SYM1249=null;
		Token EQ_SYM1250=null;
		Token TEXT_STRING1251=null;
		Token INSERT_METHOD1252=null;
		Token EQ_SYM1253=null;
		Token set1254=null;
		Token KEY_BLOCK_SIZE1255=null;
		Token EQ_SYM1256=null;
		Token INTEGER_NUM1257=null;
		Token MAX_ROWS1258=null;
		Token EQ_SYM1259=null;
		Token INTEGER_NUM1260=null;
		Token MIN_ROWS1261=null;
		Token EQ_SYM1262=null;
		Token INTEGER_NUM1263=null;
		Token PACK_KEYS_SYM1264=null;
		Token EQ_SYM1265=null;
		Token set1266=null;
		Token PASSWORD1267=null;
		Token EQ_SYM1268=null;
		Token TEXT_STRING1269=null;
		Token ROW_FORMAT_SYM1270=null;
		Token EQ_SYM1271=null;
		Token set1272=null;
		Token STATS_AUTO_RECALC1273=null;
		Token EQ_SYM1274=null;
		Token set1275=null;
		Token STATS_PERSISTENT1276=null;
		Token EQ_SYM1277=null;
		Token set1278=null;
		Token UNION_SYM1279=null;
		Token EQ_SYM1280=null;
		Token LPAREN1281=null;
		Token COMMA1283=null;
		Token RPAREN1285=null;
		ParserRuleReturnScope engine_name1216 =null;
		ParserRuleReturnScope charset_name1227 =null;
		ParserRuleReturnScope collation_name1234 =null;
		ParserRuleReturnScope table_name1282 =null;
		ParserRuleReturnScope table_name1284 =null;

		Object ENGINE_SYM1214_tree=null;
		Object EQ_SYM1215_tree=null;
		Object AUTO_INCREMENT1217_tree=null;
		Object EQ_SYM1218_tree=null;
		Object INTEGER_NUM1219_tree=null;
		Object AVG_ROW_LENGTH1220_tree=null;
		Object EQ_SYM1221_tree=null;
		Object INTEGER_NUM1222_tree=null;
		Object DEFAULT1223_tree=null;
		Object CHARACTER_SYM1224_tree=null;
		Object SET_SYM1225_tree=null;
		Object EQ_SYM1226_tree=null;
		Object CHECKSUM_SYM1228_tree=null;
		Object EQ_SYM1229_tree=null;
		Object INTEGER_NUM1230_tree=null;
		Object DEFAULT1231_tree=null;
		Object COLLATE_SYM1232_tree=null;
		Object EQ_SYM1233_tree=null;
		Object COMMENT_SYM1235_tree=null;
		Object EQ_SYM1236_tree=null;
		Object TEXT_STRING1237_tree=null;
		Object CONNECTION_SYM1238_tree=null;
		Object EQ_SYM1239_tree=null;
		Object TEXT_STRING1240_tree=null;
		Object DATA_SYM1241_tree=null;
		Object DIRECTORY_SYM1242_tree=null;
		Object EQ_SYM1243_tree=null;
		Object TEXT_STRING1244_tree=null;
		Object DELAY_KEY_WRITE_SYM1245_tree=null;
		Object EQ_SYM1246_tree=null;
		Object INTEGER_NUM1247_tree=null;
		Object INDEX_SYM1248_tree=null;
		Object DIRECTORY_SYM1249_tree=null;
		Object EQ_SYM1250_tree=null;
		Object TEXT_STRING1251_tree=null;
		Object INSERT_METHOD1252_tree=null;
		Object EQ_SYM1253_tree=null;
		Object set1254_tree=null;
		Object KEY_BLOCK_SIZE1255_tree=null;
		Object EQ_SYM1256_tree=null;
		Object INTEGER_NUM1257_tree=null;
		Object MAX_ROWS1258_tree=null;
		Object EQ_SYM1259_tree=null;
		Object INTEGER_NUM1260_tree=null;
		Object MIN_ROWS1261_tree=null;
		Object EQ_SYM1262_tree=null;
		Object INTEGER_NUM1263_tree=null;
		Object PACK_KEYS_SYM1264_tree=null;
		Object EQ_SYM1265_tree=null;
		Object set1266_tree=null;
		Object PASSWORD1267_tree=null;
		Object EQ_SYM1268_tree=null;
		Object TEXT_STRING1269_tree=null;
		Object ROW_FORMAT_SYM1270_tree=null;
		Object EQ_SYM1271_tree=null;
		Object set1272_tree=null;
		Object STATS_AUTO_RECALC1273_tree=null;
		Object EQ_SYM1274_tree=null;
		Object set1275_tree=null;
		Object STATS_PERSISTENT1276_tree=null;
		Object EQ_SYM1277_tree=null;
		Object set1278_tree=null;
		Object UNION_SYM1279_tree=null;
		Object EQ_SYM1280_tree=null;
		Object LPAREN1281_tree=null;
		Object COMMA1283_tree=null;
		Object RPAREN1285_tree=null;

		try {
			// MySQL.g:2100:13: ( ( ENGINE_SYM ( EQ_SYM )? engine_name ) | ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM ) | ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ) | ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM ) | ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name ) | ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING ) | ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING ) | ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM ) | ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING ) | ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) ) | ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM ) | ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) ) | ( PASSWORD ( EQ_SYM )? TEXT_STRING ) | ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) ) | ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) ) | ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN ) )
			int alt451=21;
			switch ( input.LA(1) ) {
			case ENGINE_SYM:
				{
				alt451=1;
				}
				break;
			case AUTO_INCREMENT:
				{
				alt451=2;
				}
				break;
			case AVG_ROW_LENGTH:
				{
				alt451=3;
				}
				break;
			case DEFAULT:
				{
				int LA451_4 = input.LA(2);
				if ( (LA451_4==CHARACTER_SYM) ) {
					alt451=4;
				}
				else if ( (LA451_4==COLLATE_SYM) ) {
					alt451=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 451, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				alt451=4;
				}
				break;
			case CHECKSUM_SYM:
				{
				alt451=5;
				}
				break;
			case COLLATE_SYM:
				{
				alt451=6;
				}
				break;
			case COMMENT_SYM:
				{
				alt451=7;
				}
				break;
			case CONNECTION_SYM:
				{
				alt451=8;
				}
				break;
			case DATA_SYM:
				{
				alt451=9;
				}
				break;
			case DELAY_KEY_WRITE_SYM:
				{
				alt451=10;
				}
				break;
			case INDEX_SYM:
				{
				alt451=11;
				}
				break;
			case INSERT_METHOD:
				{
				alt451=12;
				}
				break;
			case KEY_BLOCK_SIZE:
				{
				alt451=13;
				}
				break;
			case MAX_ROWS:
				{
				alt451=14;
				}
				break;
			case MIN_ROWS:
				{
				alt451=15;
				}
				break;
			case PACK_KEYS_SYM:
				{
				alt451=16;
				}
				break;
			case PASSWORD:
				{
				alt451=17;
				}
				break;
			case ROW_FORMAT_SYM:
				{
				alt451=18;
				}
				break;
			case STATS_AUTO_RECALC:
				{
				alt451=19;
				}
				break;
			case STATS_PERSISTENT:
				{
				alt451=20;
				}
				break;
			case UNION_SYM:
				{
				alt451=21;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 451, 0, input);
				throw nvae;
			}
			switch (alt451) {
				case 1 :
					// MySQL.g:2101:4: ( ENGINE_SYM ( EQ_SYM )? engine_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2101:4: ( ENGINE_SYM ( EQ_SYM )? engine_name )
					// MySQL.g:2101:7: ENGINE_SYM ( EQ_SYM )? engine_name
					{
					ENGINE_SYM1214=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_table_option26198); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1214_tree = (Object)adaptor.create(ENGINE_SYM1214);
					adaptor.addChild(root_0, ENGINE_SYM1214_tree);
					}

					// MySQL.g:2101:18: ( EQ_SYM )?
					int alt427=2;
					int LA427_0 = input.LA(1);
					if ( (LA427_0==EQ_SYM) ) {
						alt427=1;
					}
					switch (alt427) {
						case 1 :
							// MySQL.g:2101:19: EQ_SYM
							{
							EQ_SYM1215=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26201); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1215_tree = (Object)adaptor.create(EQ_SYM1215);
							adaptor.addChild(root_0, EQ_SYM1215_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_table_option26205);
					engine_name1216=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1216.getTree());

					}

					}
					break;
				case 2 :
					// MySQL.g:2102:4: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2102:4: ( AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2102:7: AUTO_INCREMENT ( EQ_SYM )? INTEGER_NUM
					{
					AUTO_INCREMENT1217=(Token)match(input,AUTO_INCREMENT,FOLLOW_AUTO_INCREMENT_in_table_option26216); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AUTO_INCREMENT1217_tree = (Object)adaptor.create(AUTO_INCREMENT1217);
					adaptor.addChild(root_0, AUTO_INCREMENT1217_tree);
					}

					// MySQL.g:2102:22: ( EQ_SYM )?
					int alt428=2;
					int LA428_0 = input.LA(1);
					if ( (LA428_0==EQ_SYM) ) {
						alt428=1;
					}
					switch (alt428) {
						case 1 :
							// MySQL.g:2102:23: EQ_SYM
							{
							EQ_SYM1218=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26219); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1218_tree = (Object)adaptor.create(EQ_SYM1218);
							adaptor.addChild(root_0, EQ_SYM1218_tree);
							}

							}
							break;

					}

					INTEGER_NUM1219=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26223); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1219_tree = (Object)adaptor.create(INTEGER_NUM1219);
					adaptor.addChild(root_0, INTEGER_NUM1219_tree);
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2103:4: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2103:4: ( AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2103:7: AVG_ROW_LENGTH ( EQ_SYM )? INTEGER_NUM
					{
					AVG_ROW_LENGTH1220=(Token)match(input,AVG_ROW_LENGTH,FOLLOW_AVG_ROW_LENGTH_in_table_option26234); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					AVG_ROW_LENGTH1220_tree = (Object)adaptor.create(AVG_ROW_LENGTH1220);
					adaptor.addChild(root_0, AVG_ROW_LENGTH1220_tree);
					}

					// MySQL.g:2103:22: ( EQ_SYM )?
					int alt429=2;
					int LA429_0 = input.LA(1);
					if ( (LA429_0==EQ_SYM) ) {
						alt429=1;
					}
					switch (alt429) {
						case 1 :
							// MySQL.g:2103:23: EQ_SYM
							{
							EQ_SYM1221=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26237); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1221_tree = (Object)adaptor.create(EQ_SYM1221);
							adaptor.addChild(root_0, EQ_SYM1221_tree);
							}

							}
							break;

					}

					INTEGER_NUM1222=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26241); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1222_tree = (Object)adaptor.create(INTEGER_NUM1222);
					adaptor.addChild(root_0, INTEGER_NUM1222_tree);
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:2104:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2104:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name )
					// MySQL.g:2104:7: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name
					{
					// MySQL.g:2104:7: ( DEFAULT )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==DEFAULT) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// MySQL.g:2104:8: DEFAULT
							{
							DEFAULT1223=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option26253); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1223_tree = (Object)adaptor.create(DEFAULT1223);
							adaptor.addChild(root_0, DEFAULT1223_tree);
							}

							}
							break;

					}

					CHARACTER_SYM1224=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_table_option26257); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1224_tree = (Object)adaptor.create(CHARACTER_SYM1224);
					adaptor.addChild(root_0, CHARACTER_SYM1224_tree);
					}

					SET_SYM1225=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_table_option26259); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1225_tree = (Object)adaptor.create(SET_SYM1225);
					adaptor.addChild(root_0, SET_SYM1225_tree);
					}

					// MySQL.g:2104:40: ( EQ_SYM )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==EQ_SYM) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// MySQL.g:2104:41: EQ_SYM
							{
							EQ_SYM1226=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26262); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1226_tree = (Object)adaptor.create(EQ_SYM1226);
							adaptor.addChild(root_0, EQ_SYM1226_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_table_option26266);
					charset_name1227=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1227.getTree());

					}

					}
					break;
				case 5 :
					// MySQL.g:2105:4: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2105:4: ( CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2105:7: CHECKSUM_SYM ( EQ_SYM )? INTEGER_NUM
					{
					CHECKSUM_SYM1228=(Token)match(input,CHECKSUM_SYM,FOLLOW_CHECKSUM_SYM_in_table_option26277); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECKSUM_SYM1228_tree = (Object)adaptor.create(CHECKSUM_SYM1228);
					adaptor.addChild(root_0, CHECKSUM_SYM1228_tree);
					}

					// MySQL.g:2105:20: ( EQ_SYM )?
					int alt432=2;
					int LA432_0 = input.LA(1);
					if ( (LA432_0==EQ_SYM) ) {
						alt432=1;
					}
					switch (alt432) {
						case 1 :
							// MySQL.g:2105:21: EQ_SYM
							{
							EQ_SYM1229=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26280); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1229_tree = (Object)adaptor.create(EQ_SYM1229);
							adaptor.addChild(root_0, EQ_SYM1229_tree);
							}

							}
							break;

					}

					INTEGER_NUM1230=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26284); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1230_tree = (Object)adaptor.create(INTEGER_NUM1230);
					adaptor.addChild(root_0, INTEGER_NUM1230_tree);
					}

					}

					}
					break;
				case 6 :
					// MySQL.g:2106:4: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2106:4: ( ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name )
					// MySQL.g:2106:7: ( DEFAULT )? COLLATE_SYM ( EQ_SYM )? collation_name
					{
					// MySQL.g:2106:7: ( DEFAULT )?
					int alt433=2;
					int LA433_0 = input.LA(1);
					if ( (LA433_0==DEFAULT) ) {
						alt433=1;
					}
					switch (alt433) {
						case 1 :
							// MySQL.g:2106:8: DEFAULT
							{
							DEFAULT1231=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_table_option26296); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1231_tree = (Object)adaptor.create(DEFAULT1231);
							adaptor.addChild(root_0, DEFAULT1231_tree);
							}

							}
							break;

					}

					COLLATE_SYM1232=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_table_option26300); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COLLATE_SYM1232_tree = (Object)adaptor.create(COLLATE_SYM1232);
					adaptor.addChild(root_0, COLLATE_SYM1232_tree);
					}

					// MySQL.g:2106:30: ( EQ_SYM )?
					int alt434=2;
					int LA434_0 = input.LA(1);
					if ( (LA434_0==EQ_SYM) ) {
						alt434=1;
					}
					switch (alt434) {
						case 1 :
							// MySQL.g:2106:31: EQ_SYM
							{
							EQ_SYM1233=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26303); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1233_tree = (Object)adaptor.create(EQ_SYM1233);
							adaptor.addChild(root_0, EQ_SYM1233_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_collation_name_in_table_option26307);
					collation_name1234=collation_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1234.getTree());

					}

					}
					break;
				case 7 :
					// MySQL.g:2107:4: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2107:4: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )
					// MySQL.g:2107:7: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1235=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_table_option26318); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1235_tree = (Object)adaptor.create(COMMENT_SYM1235);
					adaptor.addChild(root_0, COMMENT_SYM1235_tree);
					}

					// MySQL.g:2107:19: ( EQ_SYM )?
					int alt435=2;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==EQ_SYM) ) {
						alt435=1;
					}
					switch (alt435) {
						case 1 :
							// MySQL.g:2107:20: EQ_SYM
							{
							EQ_SYM1236=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26321); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1236_tree = (Object)adaptor.create(EQ_SYM1236);
							adaptor.addChild(root_0, EQ_SYM1236_tree);
							}

							}
							break;

					}

					TEXT_STRING1237=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option26325); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1237_tree = (Object)adaptor.create(TEXT_STRING1237);
					adaptor.addChild(root_0, TEXT_STRING1237_tree);
					}

					}

					}
					break;
				case 8 :
					// MySQL.g:2108:4: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2108:4: ( CONNECTION_SYM ( EQ_SYM )? TEXT_STRING )
					// MySQL.g:2108:7: CONNECTION_SYM ( EQ_SYM )? TEXT_STRING
					{
					CONNECTION_SYM1238=(Token)match(input,CONNECTION_SYM,FOLLOW_CONNECTION_SYM_in_table_option26336); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONNECTION_SYM1238_tree = (Object)adaptor.create(CONNECTION_SYM1238);
					adaptor.addChild(root_0, CONNECTION_SYM1238_tree);
					}

					// MySQL.g:2108:22: ( EQ_SYM )?
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==EQ_SYM) ) {
						alt436=1;
					}
					switch (alt436) {
						case 1 :
							// MySQL.g:2108:23: EQ_SYM
							{
							EQ_SYM1239=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26339); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1239_tree = (Object)adaptor.create(EQ_SYM1239);
							adaptor.addChild(root_0, EQ_SYM1239_tree);
							}

							}
							break;

					}

					TEXT_STRING1240=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option26343); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1240_tree = (Object)adaptor.create(TEXT_STRING1240);
					adaptor.addChild(root_0, TEXT_STRING1240_tree);
					}

					}

					}
					break;
				case 9 :
					// MySQL.g:2109:4: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2109:4: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					// MySQL.g:2109:7: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1241=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_table_option26354); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1241_tree = (Object)adaptor.create(DATA_SYM1241);
					adaptor.addChild(root_0, DATA_SYM1241_tree);
					}

					DIRECTORY_SYM1242=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option26356); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1242_tree = (Object)adaptor.create(DIRECTORY_SYM1242);
					adaptor.addChild(root_0, DIRECTORY_SYM1242_tree);
					}

					// MySQL.g:2109:30: ( EQ_SYM )?
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==EQ_SYM) ) {
						alt437=1;
					}
					switch (alt437) {
						case 1 :
							// MySQL.g:2109:31: EQ_SYM
							{
							EQ_SYM1243=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26359); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1243_tree = (Object)adaptor.create(EQ_SYM1243);
							adaptor.addChild(root_0, EQ_SYM1243_tree);
							}

							}
							break;

					}

					TEXT_STRING1244=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option26363); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1244_tree = (Object)adaptor.create(TEXT_STRING1244);
					adaptor.addChild(root_0, TEXT_STRING1244_tree);
					}

					}

					}
					break;
				case 10 :
					// MySQL.g:2110:4: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2110:4: ( DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2110:7: DELAY_KEY_WRITE_SYM ( EQ_SYM )? INTEGER_NUM
					{
					DELAY_KEY_WRITE_SYM1245=(Token)match(input,DELAY_KEY_WRITE_SYM,FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option26374); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DELAY_KEY_WRITE_SYM1245_tree = (Object)adaptor.create(DELAY_KEY_WRITE_SYM1245);
					adaptor.addChild(root_0, DELAY_KEY_WRITE_SYM1245_tree);
					}

					// MySQL.g:2110:27: ( EQ_SYM )?
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==EQ_SYM) ) {
						alt438=1;
					}
					switch (alt438) {
						case 1 :
							// MySQL.g:2110:28: EQ_SYM
							{
							EQ_SYM1246=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26377); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1246_tree = (Object)adaptor.create(EQ_SYM1246);
							adaptor.addChild(root_0, EQ_SYM1246_tree);
							}

							}
							break;

					}

					INTEGER_NUM1247=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26381); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1247_tree = (Object)adaptor.create(INTEGER_NUM1247);
					adaptor.addChild(root_0, INTEGER_NUM1247_tree);
					}

					}

					}
					break;
				case 11 :
					// MySQL.g:2111:4: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2111:4: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )
					// MySQL.g:2111:7: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1248=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_table_option26392); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1248_tree = (Object)adaptor.create(INDEX_SYM1248);
					adaptor.addChild(root_0, INDEX_SYM1248_tree);
					}

					DIRECTORY_SYM1249=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_table_option26394); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1249_tree = (Object)adaptor.create(DIRECTORY_SYM1249);
					adaptor.addChild(root_0, DIRECTORY_SYM1249_tree);
					}

					// MySQL.g:2111:31: ( EQ_SYM )?
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==EQ_SYM) ) {
						alt439=1;
					}
					switch (alt439) {
						case 1 :
							// MySQL.g:2111:32: EQ_SYM
							{
							EQ_SYM1250=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26397); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1250_tree = (Object)adaptor.create(EQ_SYM1250);
							adaptor.addChild(root_0, EQ_SYM1250_tree);
							}

							}
							break;

					}

					TEXT_STRING1251=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option26401); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1251_tree = (Object)adaptor.create(TEXT_STRING1251);
					adaptor.addChild(root_0, TEXT_STRING1251_tree);
					}

					}

					}
					break;
				case 12 :
					// MySQL.g:2112:4: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2112:4: ( INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM ) )
					// MySQL.g:2112:7: INSERT_METHOD ( EQ_SYM )? ( NO_SYM | FIRST_SYM | LAST_SYM )
					{
					INSERT_METHOD1252=(Token)match(input,INSERT_METHOD,FOLLOW_INSERT_METHOD_in_table_option26412); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INSERT_METHOD1252_tree = (Object)adaptor.create(INSERT_METHOD1252);
					adaptor.addChild(root_0, INSERT_METHOD1252_tree);
					}

					// MySQL.g:2112:21: ( EQ_SYM )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==EQ_SYM) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// MySQL.g:2112:22: EQ_SYM
							{
							EQ_SYM1253=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26415); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1253_tree = (Object)adaptor.create(EQ_SYM1253);
							adaptor.addChild(root_0, EQ_SYM1253_tree);
							}

							}
							break;

					}

					set1254=input.LT(1);
					if ( input.LA(1)==FIRST_SYM||input.LA(1)==LAST_SYM||input.LA(1)==NO_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1254));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 13 :
					// MySQL.g:2113:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2113:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2113:7: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
					{
					KEY_BLOCK_SIZE1255=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_table_option26442); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_BLOCK_SIZE1255_tree = (Object)adaptor.create(KEY_BLOCK_SIZE1255);
					adaptor.addChild(root_0, KEY_BLOCK_SIZE1255_tree);
					}

					// MySQL.g:2113:22: ( EQ_SYM )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==EQ_SYM) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// MySQL.g:2113:23: EQ_SYM
							{
							EQ_SYM1256=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26445); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1256_tree = (Object)adaptor.create(EQ_SYM1256);
							adaptor.addChild(root_0, EQ_SYM1256_tree);
							}

							}
							break;

					}

					INTEGER_NUM1257=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26449); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1257_tree = (Object)adaptor.create(INTEGER_NUM1257);
					adaptor.addChild(root_0, INTEGER_NUM1257_tree);
					}

					}

					}
					break;
				case 14 :
					// MySQL.g:2114:4: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2114:4: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2114:7: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1258=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_table_option26460); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1258_tree = (Object)adaptor.create(MAX_ROWS1258);
					adaptor.addChild(root_0, MAX_ROWS1258_tree);
					}

					// MySQL.g:2114:16: ( EQ_SYM )?
					int alt442=2;
					int LA442_0 = input.LA(1);
					if ( (LA442_0==EQ_SYM) ) {
						alt442=1;
					}
					switch (alt442) {
						case 1 :
							// MySQL.g:2114:17: EQ_SYM
							{
							EQ_SYM1259=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26463); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1259_tree = (Object)adaptor.create(EQ_SYM1259);
							adaptor.addChild(root_0, EQ_SYM1259_tree);
							}

							}
							break;

					}

					INTEGER_NUM1260=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26467); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1260_tree = (Object)adaptor.create(INTEGER_NUM1260);
					adaptor.addChild(root_0, INTEGER_NUM1260_tree);
					}

					}

					}
					break;
				case 15 :
					// MySQL.g:2115:4: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2115:4: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2115:7: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1261=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_table_option26478); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1261_tree = (Object)adaptor.create(MIN_ROWS1261);
					adaptor.addChild(root_0, MIN_ROWS1261_tree);
					}

					// MySQL.g:2115:16: ( EQ_SYM )?
					int alt443=2;
					int LA443_0 = input.LA(1);
					if ( (LA443_0==EQ_SYM) ) {
						alt443=1;
					}
					switch (alt443) {
						case 1 :
							// MySQL.g:2115:17: EQ_SYM
							{
							EQ_SYM1262=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26481); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1262_tree = (Object)adaptor.create(EQ_SYM1262);
							adaptor.addChild(root_0, EQ_SYM1262_tree);
							}

							}
							break;

					}

					INTEGER_NUM1263=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_table_option26485); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1263_tree = (Object)adaptor.create(INTEGER_NUM1263);
					adaptor.addChild(root_0, INTEGER_NUM1263_tree);
					}

					}

					}
					break;
				case 16 :
					// MySQL.g:2116:4: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2116:4: ( PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT ) )
					// MySQL.g:2116:7: PACK_KEYS_SYM ( EQ_SYM )? ( INTEGER_NUM | DEFAULT )
					{
					PACK_KEYS_SYM1264=(Token)match(input,PACK_KEYS_SYM,FOLLOW_PACK_KEYS_SYM_in_table_option26496); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PACK_KEYS_SYM1264_tree = (Object)adaptor.create(PACK_KEYS_SYM1264);
					adaptor.addChild(root_0, PACK_KEYS_SYM1264_tree);
					}

					// MySQL.g:2116:21: ( EQ_SYM )?
					int alt444=2;
					int LA444_0 = input.LA(1);
					if ( (LA444_0==EQ_SYM) ) {
						alt444=1;
					}
					switch (alt444) {
						case 1 :
							// MySQL.g:2116:22: EQ_SYM
							{
							EQ_SYM1265=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26499); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1265_tree = (Object)adaptor.create(EQ_SYM1265);
							adaptor.addChild(root_0, EQ_SYM1265_tree);
							}

							}
							break;

					}

					set1266=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1266));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 17 :
					// MySQL.g:2117:4: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2117:4: ( PASSWORD ( EQ_SYM )? TEXT_STRING )
					// MySQL.g:2117:7: PASSWORD ( EQ_SYM )? TEXT_STRING
					{
					PASSWORD1267=(Token)match(input,PASSWORD,FOLLOW_PASSWORD_in_table_option26520); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PASSWORD1267_tree = (Object)adaptor.create(PASSWORD1267);
					adaptor.addChild(root_0, PASSWORD1267_tree);
					}

					// MySQL.g:2117:16: ( EQ_SYM )?
					int alt445=2;
					int LA445_0 = input.LA(1);
					if ( (LA445_0==EQ_SYM) ) {
						alt445=1;
					}
					switch (alt445) {
						case 1 :
							// MySQL.g:2117:17: EQ_SYM
							{
							EQ_SYM1268=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26523); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1268_tree = (Object)adaptor.create(EQ_SYM1268);
							adaptor.addChild(root_0, EQ_SYM1268_tree);
							}

							}
							break;

					}

					TEXT_STRING1269=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_table_option26527); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1269_tree = (Object)adaptor.create(TEXT_STRING1269);
					adaptor.addChild(root_0, TEXT_STRING1269_tree);
					}

					}

					}
					break;
				case 18 :
					// MySQL.g:2118:4: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2118:4: ( ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM ) )
					// MySQL.g:2118:7: ROW_FORMAT_SYM ( EQ_SYM )? ( DEFAULT | DYNAMIC_SYM | FIXED_SYM | COMPRESSED_SYM | REDUNDANT_SYM | COMPACT_SYM )
					{
					ROW_FORMAT_SYM1270=(Token)match(input,ROW_FORMAT_SYM,FOLLOW_ROW_FORMAT_SYM_in_table_option26538); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ROW_FORMAT_SYM1270_tree = (Object)adaptor.create(ROW_FORMAT_SYM1270);
					adaptor.addChild(root_0, ROW_FORMAT_SYM1270_tree);
					}

					// MySQL.g:2118:22: ( EQ_SYM )?
					int alt446=2;
					int LA446_0 = input.LA(1);
					if ( (LA446_0==EQ_SYM) ) {
						alt446=1;
					}
					switch (alt446) {
						case 1 :
							// MySQL.g:2118:23: EQ_SYM
							{
							EQ_SYM1271=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26541); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1271_tree = (Object)adaptor.create(EQ_SYM1271);
							adaptor.addChild(root_0, EQ_SYM1271_tree);
							}

							}
							break;

					}

					set1272=input.LT(1);
					if ( input.LA(1)==COMPACT_SYM||input.LA(1)==COMPRESSED_SYM||input.LA(1)==DEFAULT||input.LA(1)==DYNAMIC_SYM||input.LA(1)==FIXED_SYM||input.LA(1)==REDUNDANT_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1272));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 19 :
					// MySQL.g:2119:4: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2119:4: ( STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					// MySQL.g:2119:7: STATS_AUTO_RECALC ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
					{
					STATS_AUTO_RECALC1273=(Token)match(input,STATS_AUTO_RECALC,FOLLOW_STATS_AUTO_RECALC_in_table_option26568); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STATS_AUTO_RECALC1273_tree = (Object)adaptor.create(STATS_AUTO_RECALC1273);
					adaptor.addChild(root_0, STATS_AUTO_RECALC1273_tree);
					}

					// MySQL.g:2119:25: ( EQ_SYM )?
					int alt447=2;
					int LA447_0 = input.LA(1);
					if ( (LA447_0==EQ_SYM) ) {
						alt447=1;
					}
					switch (alt447) {
						case 1 :
							// MySQL.g:2119:26: EQ_SYM
							{
							EQ_SYM1274=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26571); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1274_tree = (Object)adaptor.create(EQ_SYM1274);
							adaptor.addChild(root_0, EQ_SYM1274_tree);
							}

							}
							break;

					}

					set1275=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1275));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 20 :
					// MySQL.g:2120:4: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2120:4: ( STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM ) )
					// MySQL.g:2120:7: STATS_PERSISTENT ( EQ_SYM )? ( DEFAULT | INTEGER_NUM )
					{
					STATS_PERSISTENT1276=(Token)match(input,STATS_PERSISTENT,FOLLOW_STATS_PERSISTENT_in_table_option26592); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					STATS_PERSISTENT1276_tree = (Object)adaptor.create(STATS_PERSISTENT1276);
					adaptor.addChild(root_0, STATS_PERSISTENT1276_tree);
					}

					// MySQL.g:2120:24: ( EQ_SYM )?
					int alt448=2;
					int LA448_0 = input.LA(1);
					if ( (LA448_0==EQ_SYM) ) {
						alt448=1;
					}
					switch (alt448) {
						case 1 :
							// MySQL.g:2120:25: EQ_SYM
							{
							EQ_SYM1277=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26595); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1277_tree = (Object)adaptor.create(EQ_SYM1277);
							adaptor.addChild(root_0, EQ_SYM1277_tree);
							}

							}
							break;

					}

					set1278=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==INTEGER_NUM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1278));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 21 :
					// MySQL.g:2121:4: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2121:4: ( UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN )
					// MySQL.g:2121:7: UNION_SYM ( EQ_SYM )? LPAREN table_name ( COMMA table_name )* RPAREN
					{
					UNION_SYM1279=(Token)match(input,UNION_SYM,FOLLOW_UNION_SYM_in_table_option26616); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNION_SYM1279_tree = (Object)adaptor.create(UNION_SYM1279);
					adaptor.addChild(root_0, UNION_SYM1279_tree);
					}

					// MySQL.g:2121:17: ( EQ_SYM )?
					int alt449=2;
					int LA449_0 = input.LA(1);
					if ( (LA449_0==EQ_SYM) ) {
						alt449=1;
					}
					switch (alt449) {
						case 1 :
							// MySQL.g:2121:18: EQ_SYM
							{
							EQ_SYM1280=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_table_option26619); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1280_tree = (Object)adaptor.create(EQ_SYM1280);
							adaptor.addChild(root_0, EQ_SYM1280_tree);
							}

							}
							break;

					}

					LPAREN1281=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_option26623); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1281_tree = (Object)adaptor.create(LPAREN1281);
					adaptor.addChild(root_0, LPAREN1281_tree);
					}

					pushFollow(FOLLOW_table_name_in_table_option26625);
					table_name1282=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1282.getTree());

					// MySQL.g:2121:44: ( COMMA table_name )*
					loop450:
					while (true) {
						int alt450=2;
						int LA450_0 = input.LA(1);
						if ( (LA450_0==COMMA) ) {
							alt450=1;
						}

						switch (alt450) {
						case 1 :
							// MySQL.g:2121:46: COMMA table_name
							{
							COMMA1283=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_option26628); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1283_tree = (Object)adaptor.create(COMMA1283);
							adaptor.addChild(root_0, COMMA1283_tree);
							}

							pushFollow(FOLLOW_table_name_in_table_option26630);
							table_name1284=table_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1284.getTree());

							}
							break;

						default :
							break loop450;
						}
					}

					RPAREN1285=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_option26634); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1285_tree = (Object)adaptor.create(RPAREN1285);
					adaptor.addChild(root_0, RPAREN1285_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_option"


	public static class partition_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_options"
	// MySQL.g:2124:1: partition_options : PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? ;
	public final MySQLParser.partition_options_return partition_options() throws RecognitionException {
		MySQLParser.partition_options_return retval = new MySQLParser.partition_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PARTITION_SYM1286=null;
		Token BY_SYM1287=null;
		Token LINEAR_SYM1288=null;
		Token HASH_SYM1289=null;
		Token LPAREN1290=null;
		Token RPAREN1292=null;
		Token LINEAR_SYM1293=null;
		Token KEY_SYM1294=null;
		Token LPAREN1295=null;
		Token RPAREN1297=null;
		Token RANGE_SYM1298=null;
		Token LPAREN1299=null;
		Token RPAREN1301=null;
		Token COLUMNS_SYM1302=null;
		Token LPAREN1303=null;
		Token RPAREN1305=null;
		Token LIST_SYM1306=null;
		Token LPAREN1307=null;
		Token RPAREN1309=null;
		Token COLUMNS_SYM1310=null;
		Token LPAREN1311=null;
		Token RPAREN1313=null;
		Token PARTITIONS_SYM1314=null;
		Token INTEGER_NUM1315=null;
		Token SUBPARTITION_SYM1316=null;
		Token BY_SYM1317=null;
		Token LINEAR_SYM1318=null;
		Token HASH_SYM1319=null;
		Token LPAREN1320=null;
		Token RPAREN1322=null;
		Token LINEAR_SYM1323=null;
		Token KEY_SYM1324=null;
		Token LPAREN1325=null;
		Token RPAREN1327=null;
		Token SUBPARTITIONS_SYM1328=null;
		Token INTEGER_NUM1329=null;
		Token LPAREN1330=null;
		Token COMMA1332=null;
		Token RPAREN1334=null;
		ParserRuleReturnScope expression1291 =null;
		ParserRuleReturnScope column_list1296 =null;
		ParserRuleReturnScope expression1300 =null;
		ParserRuleReturnScope column_list1304 =null;
		ParserRuleReturnScope expression1308 =null;
		ParserRuleReturnScope column_list1312 =null;
		ParserRuleReturnScope expression1321 =null;
		ParserRuleReturnScope column_list1326 =null;
		ParserRuleReturnScope partition_definition1331 =null;
		ParserRuleReturnScope partition_definition1333 =null;

		Object PARTITION_SYM1286_tree=null;
		Object BY_SYM1287_tree=null;
		Object LINEAR_SYM1288_tree=null;
		Object HASH_SYM1289_tree=null;
		Object LPAREN1290_tree=null;
		Object RPAREN1292_tree=null;
		Object LINEAR_SYM1293_tree=null;
		Object KEY_SYM1294_tree=null;
		Object LPAREN1295_tree=null;
		Object RPAREN1297_tree=null;
		Object RANGE_SYM1298_tree=null;
		Object LPAREN1299_tree=null;
		Object RPAREN1301_tree=null;
		Object COLUMNS_SYM1302_tree=null;
		Object LPAREN1303_tree=null;
		Object RPAREN1305_tree=null;
		Object LIST_SYM1306_tree=null;
		Object LPAREN1307_tree=null;
		Object RPAREN1309_tree=null;
		Object COLUMNS_SYM1310_tree=null;
		Object LPAREN1311_tree=null;
		Object RPAREN1313_tree=null;
		Object PARTITIONS_SYM1314_tree=null;
		Object INTEGER_NUM1315_tree=null;
		Object SUBPARTITION_SYM1316_tree=null;
		Object BY_SYM1317_tree=null;
		Object LINEAR_SYM1318_tree=null;
		Object HASH_SYM1319_tree=null;
		Object LPAREN1320_tree=null;
		Object RPAREN1322_tree=null;
		Object LINEAR_SYM1323_tree=null;
		Object KEY_SYM1324_tree=null;
		Object LPAREN1325_tree=null;
		Object RPAREN1327_tree=null;
		Object SUBPARTITIONS_SYM1328_tree=null;
		Object INTEGER_NUM1329_tree=null;
		Object LPAREN1330_tree=null;
		Object COMMA1332_tree=null;
		Object RPAREN1334_tree=null;

		try {
			// MySQL.g:2124:18: ( PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )? )
			// MySQL.g:2125:2: PARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) ) ( PARTITIONS_SYM INTEGER_NUM )? ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )? ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
			{
			root_0 = (Object)adaptor.nil();


			PARTITION_SYM1286=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_options26646); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM1286_tree = (Object)adaptor.create(PARTITION_SYM1286);
			adaptor.addChild(root_0, PARTITION_SYM1286_tree);
			}

			BY_SYM1287=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options26648); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			BY_SYM1287_tree = (Object)adaptor.create(BY_SYM1287);
			adaptor.addChild(root_0, BY_SYM1287_tree);
			}

			// MySQL.g:2126:2: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) | ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) | ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) ) )
			int alt456=4;
			switch ( input.LA(1) ) {
			case LINEAR_SYM:
				{
				int LA456_1 = input.LA(2);
				if ( (LA456_1==HASH_SYM) ) {
					alt456=1;
				}
				else if ( (LA456_1==KEY_SYM) ) {
					alt456=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 456, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYM:
				{
				alt456=1;
				}
				break;
			case KEY_SYM:
				{
				alt456=2;
				}
				break;
			case RANGE_SYM:
				{
				alt456=3;
				}
				break;
			case LIST_SYM:
				{
				alt456=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 456, 0, input);
				throw nvae;
			}
			switch (alt456) {
				case 1 :
					// MySQL.g:2127:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
					{
					// MySQL.g:2127:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
					// MySQL.g:2127:7: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
					{
					// MySQL.g:2127:7: ( LINEAR_SYM )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==LINEAR_SYM) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// MySQL.g:2127:8: LINEAR_SYM
							{
							LINEAR_SYM1288=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options26661); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LINEAR_SYM1288_tree = (Object)adaptor.create(LINEAR_SYM1288);
							adaptor.addChild(root_0, LINEAR_SYM1288_tree);
							}

							}
							break;

					}

					HASH_SYM1289=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options26665); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					HASH_SYM1289_tree = (Object)adaptor.create(HASH_SYM1289);
					adaptor.addChild(root_0, HASH_SYM1289_tree);
					}

					LPAREN1290=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26667); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1290_tree = (Object)adaptor.create(LPAREN1290);
					adaptor.addChild(root_0, LPAREN1290_tree);
					}

					pushFollow(FOLLOW_expression_in_partition_options26669);
					expression1291=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1291.getTree());

					RPAREN1292=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26671); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1292_tree = (Object)adaptor.create(RPAREN1292);
					adaptor.addChild(root_0, RPAREN1292_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2128:5: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
					{
					// MySQL.g:2128:5: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
					// MySQL.g:2128:7: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
					{
					// MySQL.g:2128:7: ( LINEAR_SYM )?
					int alt453=2;
					int LA453_0 = input.LA(1);
					if ( (LA453_0==LINEAR_SYM) ) {
						alt453=1;
					}
					switch (alt453) {
						case 1 :
							// MySQL.g:2128:8: LINEAR_SYM
							{
							LINEAR_SYM1293=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options26682); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LINEAR_SYM1293_tree = (Object)adaptor.create(LINEAR_SYM1293);
							adaptor.addChild(root_0, LINEAR_SYM1293_tree);
							}

							}
							break;

					}

					KEY_SYM1294=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options26686); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1294_tree = (Object)adaptor.create(KEY_SYM1294);
					adaptor.addChild(root_0, KEY_SYM1294_tree);
					}

					LPAREN1295=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26688); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1295_tree = (Object)adaptor.create(LPAREN1295);
					adaptor.addChild(root_0, LPAREN1295_tree);
					}

					pushFollow(FOLLOW_column_list_in_partition_options26690);
					column_list1296=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1296.getTree());

					RPAREN1297=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26692); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1297_tree = (Object)adaptor.create(RPAREN1297);
					adaptor.addChild(root_0, RPAREN1297_tree);
					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2129:5: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					{
					// MySQL.g:2129:5: ( RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					// MySQL.g:2129:7: RANGE_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					{
					RANGE_SYM1298=(Token)match(input,RANGE_SYM,FOLLOW_RANGE_SYM_in_partition_options26702); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RANGE_SYM1298_tree = (Object)adaptor.create(RANGE_SYM1298);
					adaptor.addChild(root_0, RANGE_SYM1298_tree);
					}

					// MySQL.g:2129:16: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==LPAREN) ) {
						alt454=1;
					}
					else if ( (LA454_0==COLUMNS_SYM) ) {
						alt454=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 454, 0, input);
						throw nvae;
					}

					switch (alt454) {
						case 1 :
							// MySQL.g:2129:17: LPAREN expression RPAREN
							{
							LPAREN1299=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26704); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1299_tree = (Object)adaptor.create(LPAREN1299);
							adaptor.addChild(root_0, LPAREN1299_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options26706);
							expression1300=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1300.getTree());

							RPAREN1301=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26708); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1301_tree = (Object)adaptor.create(RPAREN1301);
							adaptor.addChild(root_0, RPAREN1301_tree);
							}

							}
							break;
						case 2 :
							// MySQL.g:2129:44: COLUMNS_SYM LPAREN column_list RPAREN
							{
							COLUMNS_SYM1302=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options26712); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMNS_SYM1302_tree = (Object)adaptor.create(COLUMNS_SYM1302);
							adaptor.addChild(root_0, COLUMNS_SYM1302_tree);
							}

							LPAREN1303=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26714); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1303_tree = (Object)adaptor.create(LPAREN1303);
							adaptor.addChild(root_0, LPAREN1303_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options26716);
							column_list1304=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1304.getTree());

							RPAREN1305=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26718); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1305_tree = (Object)adaptor.create(RPAREN1305);
							adaptor.addChild(root_0, RPAREN1305_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 4 :
					// MySQL.g:2130:5: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					{
					// MySQL.g:2130:5: ( LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN ) )
					// MySQL.g:2130:7: LIST_SYM ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					{
					LIST_SYM1306=(Token)match(input,LIST_SYM,FOLLOW_LIST_SYM_in_partition_options26729); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LIST_SYM1306_tree = (Object)adaptor.create(LIST_SYM1306);
					adaptor.addChild(root_0, LIST_SYM1306_tree);
					}

					// MySQL.g:2130:15: ( LPAREN expression RPAREN | COLUMNS_SYM LPAREN column_list RPAREN )
					int alt455=2;
					int LA455_0 = input.LA(1);
					if ( (LA455_0==LPAREN) ) {
						alt455=1;
					}
					else if ( (LA455_0==COLUMNS_SYM) ) {
						alt455=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 455, 0, input);
						throw nvae;
					}

					switch (alt455) {
						case 1 :
							// MySQL.g:2130:16: LPAREN expression RPAREN
							{
							LPAREN1307=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26731); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1307_tree = (Object)adaptor.create(LPAREN1307);
							adaptor.addChild(root_0, LPAREN1307_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options26733);
							expression1308=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1308.getTree());

							RPAREN1309=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26735); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1309_tree = (Object)adaptor.create(RPAREN1309);
							adaptor.addChild(root_0, RPAREN1309_tree);
							}

							}
							break;
						case 2 :
							// MySQL.g:2130:43: COLUMNS_SYM LPAREN column_list RPAREN
							{
							COLUMNS_SYM1310=(Token)match(input,COLUMNS_SYM,FOLLOW_COLUMNS_SYM_in_partition_options26739); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMNS_SYM1310_tree = (Object)adaptor.create(COLUMNS_SYM1310);
							adaptor.addChild(root_0, COLUMNS_SYM1310_tree);
							}

							LPAREN1311=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26741); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1311_tree = (Object)adaptor.create(LPAREN1311);
							adaptor.addChild(root_0, LPAREN1311_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options26743);
							column_list1312=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1312.getTree());

							RPAREN1313=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26745); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1313_tree = (Object)adaptor.create(RPAREN1313);
							adaptor.addChild(root_0, RPAREN1313_tree);
							}

							}
							break;

					}

					}

					}
					break;

			}

			// MySQL.g:2133:2: ( PARTITIONS_SYM INTEGER_NUM )?
			int alt457=2;
			int LA457_0 = input.LA(1);
			if ( (LA457_0==PARTITIONS_SYM) ) {
				alt457=1;
			}
			switch (alt457) {
				case 1 :
					// MySQL.g:2133:3: PARTITIONS_SYM INTEGER_NUM
					{
					PARTITIONS_SYM1314=(Token)match(input,PARTITIONS_SYM,FOLLOW_PARTITIONS_SYM_in_partition_options26757); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITIONS_SYM1314_tree = (Object)adaptor.create(PARTITIONS_SYM1314);
					adaptor.addChild(root_0, PARTITIONS_SYM1314_tree);
					}

					INTEGER_NUM1315=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options26759); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1315_tree = (Object)adaptor.create(INTEGER_NUM1315);
					adaptor.addChild(root_0, INTEGER_NUM1315_tree);
					}

					}
					break;

			}

			// MySQL.g:2135:2: ( SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )? )?
			int alt462=2;
			int LA462_0 = input.LA(1);
			if ( (LA462_0==SUBPARTITION_SYM) ) {
				alt462=1;
			}
			switch (alt462) {
				case 1 :
					// MySQL.g:2136:3: SUBPARTITION_SYM BY_SYM ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) ) ( SUBPARTITIONS_SYM INTEGER_NUM )?
					{
					SUBPARTITION_SYM1316=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_partition_options26770); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SUBPARTITION_SYM1316_tree = (Object)adaptor.create(SUBPARTITION_SYM1316);
					adaptor.addChild(root_0, SUBPARTITION_SYM1316_tree);
					}

					BY_SYM1317=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_partition_options26772); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM1317_tree = (Object)adaptor.create(BY_SYM1317);
					adaptor.addChild(root_0, BY_SYM1317_tree);
					}

					// MySQL.g:2137:3: ( ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN ) | ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN ) )
					int alt460=2;
					switch ( input.LA(1) ) {
					case LINEAR_SYM:
						{
						int LA460_1 = input.LA(2);
						if ( (LA460_1==HASH_SYM) ) {
							alt460=1;
						}
						else if ( (LA460_1==KEY_SYM) ) {
							alt460=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 460, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case HASH_SYM:
						{
						alt460=1;
						}
						break;
					case KEY_SYM:
						{
						alt460=2;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 460, 0, input);
						throw nvae;
					}
					switch (alt460) {
						case 1 :
							// MySQL.g:2137:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
							{
							// MySQL.g:2137:5: ( ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN )
							// MySQL.g:2137:7: ( LINEAR_SYM )? HASH_SYM LPAREN expression RPAREN
							{
							// MySQL.g:2137:7: ( LINEAR_SYM )?
							int alt458=2;
							int LA458_0 = input.LA(1);
							if ( (LA458_0==LINEAR_SYM) ) {
								alt458=1;
							}
							switch (alt458) {
								case 1 :
									// MySQL.g:2137:8: LINEAR_SYM
									{
									LINEAR_SYM1318=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options26781); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LINEAR_SYM1318_tree = (Object)adaptor.create(LINEAR_SYM1318);
									adaptor.addChild(root_0, LINEAR_SYM1318_tree);
									}

									}
									break;

							}

							HASH_SYM1319=(Token)match(input,HASH_SYM,FOLLOW_HASH_SYM_in_partition_options26785); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							HASH_SYM1319_tree = (Object)adaptor.create(HASH_SYM1319);
							adaptor.addChild(root_0, HASH_SYM1319_tree);
							}

							LPAREN1320=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26787); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1320_tree = (Object)adaptor.create(LPAREN1320);
							adaptor.addChild(root_0, LPAREN1320_tree);
							}

							pushFollow(FOLLOW_expression_in_partition_options26789);
							expression1321=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression1321.getTree());

							RPAREN1322=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26791); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1322_tree = (Object)adaptor.create(RPAREN1322);
							adaptor.addChild(root_0, RPAREN1322_tree);
							}

							}

							}
							break;
						case 2 :
							// MySQL.g:2137:59: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
							{
							// MySQL.g:2137:59: ( ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN )
							// MySQL.g:2137:61: ( LINEAR_SYM )? KEY_SYM LPAREN column_list RPAREN
							{
							// MySQL.g:2137:61: ( LINEAR_SYM )?
							int alt459=2;
							int LA459_0 = input.LA(1);
							if ( (LA459_0==LINEAR_SYM) ) {
								alt459=1;
							}
							switch (alt459) {
								case 1 :
									// MySQL.g:2137:62: LINEAR_SYM
									{
									LINEAR_SYM1323=(Token)match(input,LINEAR_SYM,FOLLOW_LINEAR_SYM_in_partition_options26800); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LINEAR_SYM1323_tree = (Object)adaptor.create(LINEAR_SYM1323);
									adaptor.addChild(root_0, LINEAR_SYM1323_tree);
									}

									}
									break;

							}

							KEY_SYM1324=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_partition_options26804); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KEY_SYM1324_tree = (Object)adaptor.create(KEY_SYM1324);
							adaptor.addChild(root_0, KEY_SYM1324_tree);
							}

							LPAREN1325=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26806); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1325_tree = (Object)adaptor.create(LPAREN1325);
							adaptor.addChild(root_0, LPAREN1325_tree);
							}

							pushFollow(FOLLOW_column_list_in_partition_options26808);
							column_list1326=column_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1326.getTree());

							RPAREN1327=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26810); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1327_tree = (Object)adaptor.create(RPAREN1327);
							adaptor.addChild(root_0, RPAREN1327_tree);
							}

							}

							}
							break;

					}

					// MySQL.g:2138:3: ( SUBPARTITIONS_SYM INTEGER_NUM )?
					int alt461=2;
					int LA461_0 = input.LA(1);
					if ( (LA461_0==SUBPARTITIONS_SYM) ) {
						alt461=1;
					}
					switch (alt461) {
						case 1 :
							// MySQL.g:2138:4: SUBPARTITIONS_SYM INTEGER_NUM
							{
							SUBPARTITIONS_SYM1328=(Token)match(input,SUBPARTITIONS_SYM,FOLLOW_SUBPARTITIONS_SYM_in_partition_options26819); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SUBPARTITIONS_SYM1328_tree = (Object)adaptor.create(SUBPARTITIONS_SYM1328);
							adaptor.addChild(root_0, SUBPARTITIONS_SYM1328_tree);
							}

							INTEGER_NUM1329=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_options26821); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							INTEGER_NUM1329_tree = (Object)adaptor.create(INTEGER_NUM1329);
							adaptor.addChild(root_0, INTEGER_NUM1329_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// MySQL.g:2141:2: ( LPAREN partition_definition ( COMMA partition_definition )* RPAREN )?
			int alt464=2;
			int LA464_0 = input.LA(1);
			if ( (LA464_0==LPAREN) ) {
				alt464=1;
			}
			switch (alt464) {
				case 1 :
					// MySQL.g:2141:3: LPAREN partition_definition ( COMMA partition_definition )* RPAREN
					{
					LPAREN1330=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_options26833); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1330_tree = (Object)adaptor.create(LPAREN1330);
					adaptor.addChild(root_0, LPAREN1330_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_partition_options26835);
					partition_definition1331=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1331.getTree());

					// MySQL.g:2141:31: ( COMMA partition_definition )*
					loop463:
					while (true) {
						int alt463=2;
						int LA463_0 = input.LA(1);
						if ( (LA463_0==COMMA) ) {
							alt463=1;
						}

						switch (alt463) {
						case 1 :
							// MySQL.g:2141:33: COMMA partition_definition
							{
							COMMA1332=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_options26839); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1332_tree = (Object)adaptor.create(COMMA1332);
							adaptor.addChild(root_0, COMMA1332_tree);
							}

							pushFollow(FOLLOW_partition_definition_in_partition_options26842);
							partition_definition1333=partition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1333.getTree());

							}
							break;

						default :
							break loop463;
						}
					}

					RPAREN1334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_options26846); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1334_tree = (Object)adaptor.create(RPAREN1334);
					adaptor.addChild(root_0, RPAREN1334_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_options"


	public static class partition_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_definition"
	// MySQL.g:2144:1: partition_definition : PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? ;
	public final MySQLParser.partition_definition_return partition_definition() throws RecognitionException {
		MySQLParser.partition_definition_return retval = new MySQLParser.partition_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PARTITION_SYM1335=null;
		Token VALUES1337=null;
		Token LESS_SYM1338=null;
		Token THAN_SYM1339=null;
		Token LPAREN1340=null;
		Token RPAREN1342=null;
		Token MAXVALUE_SYM1343=null;
		Token IN_SYM1344=null;
		Token LPAREN1345=null;
		Token RPAREN1347=null;
		Token STORAGE_SYM1348=null;
		Token ENGINE_SYM1349=null;
		Token EQ_SYM1350=null;
		Token COMMENT_SYM1352=null;
		Token EQ_SYM1353=null;
		Token TEXT_STRING1354=null;
		Token DATA_SYM1355=null;
		Token DIRECTORY_SYM1356=null;
		Token EQ_SYM1357=null;
		Token TEXT_STRING1358=null;
		Token INDEX_SYM1359=null;
		Token DIRECTORY_SYM1360=null;
		Token EQ_SYM1361=null;
		Token TEXT_STRING1362=null;
		Token MAX_ROWS1363=null;
		Token EQ_SYM1364=null;
		Token INTEGER_NUM1365=null;
		Token MIN_ROWS1366=null;
		Token EQ_SYM1367=null;
		Token INTEGER_NUM1368=null;
		Token LPAREN1369=null;
		Token COMMA1371=null;
		Token RPAREN1373=null;
		ParserRuleReturnScope partition_name1336 =null;
		ParserRuleReturnScope expression_list1341 =null;
		ParserRuleReturnScope expression_list1346 =null;
		ParserRuleReturnScope engine_name1351 =null;
		ParserRuleReturnScope subpartition_definition1370 =null;
		ParserRuleReturnScope subpartition_definition1372 =null;

		Object PARTITION_SYM1335_tree=null;
		Object VALUES1337_tree=null;
		Object LESS_SYM1338_tree=null;
		Object THAN_SYM1339_tree=null;
		Object LPAREN1340_tree=null;
		Object RPAREN1342_tree=null;
		Object MAXVALUE_SYM1343_tree=null;
		Object IN_SYM1344_tree=null;
		Object LPAREN1345_tree=null;
		Object RPAREN1347_tree=null;
		Object STORAGE_SYM1348_tree=null;
		Object ENGINE_SYM1349_tree=null;
		Object EQ_SYM1350_tree=null;
		Object COMMENT_SYM1352_tree=null;
		Object EQ_SYM1353_tree=null;
		Object TEXT_STRING1354_tree=null;
		Object DATA_SYM1355_tree=null;
		Object DIRECTORY_SYM1356_tree=null;
		Object EQ_SYM1357_tree=null;
		Object TEXT_STRING1358_tree=null;
		Object INDEX_SYM1359_tree=null;
		Object DIRECTORY_SYM1360_tree=null;
		Object EQ_SYM1361_tree=null;
		Object TEXT_STRING1362_tree=null;
		Object MAX_ROWS1363_tree=null;
		Object EQ_SYM1364_tree=null;
		Object INTEGER_NUM1365_tree=null;
		Object MIN_ROWS1366_tree=null;
		Object EQ_SYM1367_tree=null;
		Object INTEGER_NUM1368_tree=null;
		Object LPAREN1369_tree=null;
		Object COMMA1371_tree=null;
		Object RPAREN1373_tree=null;

		try {
			// MySQL.g:2144:21: ( PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )? )
			// MySQL.g:2145:2: PARTITION_SYM partition_name ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )? ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
			{
			root_0 = (Object)adaptor.nil();


			PARTITION_SYM1335=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_partition_definition26857); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			PARTITION_SYM1335_tree = (Object)adaptor.create(PARTITION_SYM1335);
			adaptor.addChild(root_0, PARTITION_SYM1335_tree);
			}

			pushFollow(FOLLOW_partition_name_in_partition_definition26859);
			partition_name1336=partition_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name1336.getTree());

			// MySQL.g:2147:2: ( VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) ) )?
			int alt467=2;
			int LA467_0 = input.LA(1);
			if ( (LA467_0==VALUES) ) {
				alt467=1;
			}
			switch (alt467) {
				case 1 :
					// MySQL.g:2148:3: VALUES ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) )
					{
					VALUES1337=(Token)match(input,VALUES,FOLLOW_VALUES_in_partition_definition26868); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VALUES1337_tree = (Object)adaptor.create(VALUES1337);
					adaptor.addChild(root_0, VALUES1337_tree);
					}

					// MySQL.g:2149:3: ( ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) ) | ( IN_SYM LPAREN expression_list RPAREN ) )
					int alt466=2;
					int LA466_0 = input.LA(1);
					if ( (LA466_0==LESS_SYM) ) {
						alt466=1;
					}
					else if ( (LA466_0==IN_SYM) ) {
						alt466=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 466, 0, input);
						throw nvae;
					}

					switch (alt466) {
						case 1 :
							// MySQL.g:2150:4: ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) )
							{
							// MySQL.g:2150:4: ( LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM ) )
							// MySQL.g:2150:5: LESS_SYM THAN_SYM ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM )
							{
							LESS_SYM1338=(Token)match(input,LESS_SYM,FOLLOW_LESS_SYM_in_partition_definition26879); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LESS_SYM1338_tree = (Object)adaptor.create(LESS_SYM1338);
							adaptor.addChild(root_0, LESS_SYM1338_tree);
							}

							THAN_SYM1339=(Token)match(input,THAN_SYM,FOLLOW_THAN_SYM_in_partition_definition26881); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							THAN_SYM1339_tree = (Object)adaptor.create(THAN_SYM1339);
							adaptor.addChild(root_0, THAN_SYM1339_tree);
							}

							// MySQL.g:2150:23: ( ( LPAREN expression_list RPAREN ) | MAXVALUE_SYM )
							int alt465=2;
							int LA465_0 = input.LA(1);
							if ( (LA465_0==LPAREN) ) {
								alt465=1;
							}
							else if ( (LA465_0==MAXVALUE_SYM) ) {
								alt465=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 465, 0, input);
								throw nvae;
							}

							switch (alt465) {
								case 1 :
									// MySQL.g:2150:25: ( LPAREN expression_list RPAREN )
									{
									// MySQL.g:2150:25: ( LPAREN expression_list RPAREN )
									// MySQL.g:2150:26: LPAREN expression_list RPAREN
									{
									LPAREN1340=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition26886); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									LPAREN1340_tree = (Object)adaptor.create(LPAREN1340);
									adaptor.addChild(root_0, LPAREN1340_tree);
									}

									pushFollow(FOLLOW_expression_list_in_partition_definition26888);
									expression_list1341=expression_list();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1341.getTree());

									RPAREN1342=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition26890); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									RPAREN1342_tree = (Object)adaptor.create(RPAREN1342);
									adaptor.addChild(root_0, RPAREN1342_tree);
									}

									}

									}
									break;
								case 2 :
									// MySQL.g:2150:59: MAXVALUE_SYM
									{
									MAXVALUE_SYM1343=(Token)match(input,MAXVALUE_SYM,FOLLOW_MAXVALUE_SYM_in_partition_definition26895); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									MAXVALUE_SYM1343_tree = (Object)adaptor.create(MAXVALUE_SYM1343);
									adaptor.addChild(root_0, MAXVALUE_SYM1343_tree);
									}

									}
									break;

							}

							}

							}
							break;
						case 2 :
							// MySQL.g:2152:4: ( IN_SYM LPAREN expression_list RPAREN )
							{
							// MySQL.g:2152:4: ( IN_SYM LPAREN expression_list RPAREN )
							// MySQL.g:2152:5: IN_SYM LPAREN expression_list RPAREN
							{
							IN_SYM1344=(Token)match(input,IN_SYM,FOLLOW_IN_SYM_in_partition_definition26910); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							IN_SYM1344_tree = (Object)adaptor.create(IN_SYM1344);
							adaptor.addChild(root_0, IN_SYM1344_tree);
							}

							LPAREN1345=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition26912); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							LPAREN1345_tree = (Object)adaptor.create(LPAREN1345);
							adaptor.addChild(root_0, LPAREN1345_tree);
							}

							pushFollow(FOLLOW_expression_list_in_partition_definition26914);
							expression_list1346=expression_list();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1346.getTree());

							RPAREN1347=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition26916); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							RPAREN1347_tree = (Object)adaptor.create(RPAREN1347);
							adaptor.addChild(root_0, RPAREN1347_tree);
							}

							}

							}
							break;

					}

					}
					break;

			}

			// MySQL.g:2156:2: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
			int alt470=2;
			int LA470_0 = input.LA(1);
			if ( (LA470_0==ENGINE_SYM||LA470_0==STORAGE_SYM) ) {
				alt470=1;
			}
			switch (alt470) {
				case 1 :
					// MySQL.g:2156:3: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
					{
					// MySQL.g:2156:3: ( STORAGE_SYM )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==STORAGE_SYM) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// MySQL.g:2156:4: STORAGE_SYM
							{
							STORAGE_SYM1348=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_partition_definition26932); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STORAGE_SYM1348_tree = (Object)adaptor.create(STORAGE_SYM1348);
							adaptor.addChild(root_0, STORAGE_SYM1348_tree);
							}

							}
							break;

					}

					ENGINE_SYM1349=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_partition_definition26936); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1349_tree = (Object)adaptor.create(ENGINE_SYM1349);
					adaptor.addChild(root_0, ENGINE_SYM1349_tree);
					}

					// MySQL.g:2156:29: ( EQ_SYM )?
					int alt469=2;
					int LA469_0 = input.LA(1);
					if ( (LA469_0==EQ_SYM) ) {
						alt469=1;
					}
					switch (alt469) {
						case 1 :
							// MySQL.g:2156:30: EQ_SYM
							{
							EQ_SYM1350=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition26939); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1350_tree = (Object)adaptor.create(EQ_SYM1350);
							adaptor.addChild(root_0, EQ_SYM1350_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_partition_definition26943);
					engine_name1351=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1351.getTree());

					}
					break;

			}

			// MySQL.g:2157:2: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt472=2;
			int LA472_0 = input.LA(1);
			if ( (LA472_0==COMMENT_SYM) ) {
				alt472=1;
			}
			switch (alt472) {
				case 1 :
					// MySQL.g:2157:3: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1352=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_partition_definition26949); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1352_tree = (Object)adaptor.create(COMMENT_SYM1352);
					adaptor.addChild(root_0, COMMENT_SYM1352_tree);
					}

					// MySQL.g:2157:15: ( EQ_SYM )?
					int alt471=2;
					int LA471_0 = input.LA(1);
					if ( (LA471_0==EQ_SYM) ) {
						alt471=1;
					}
					switch (alt471) {
						case 1 :
							// MySQL.g:2157:16: EQ_SYM
							{
							EQ_SYM1353=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition26952); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1353_tree = (Object)adaptor.create(EQ_SYM1353);
							adaptor.addChild(root_0, EQ_SYM1353_tree);
							}

							}
							break;

					}

					TEXT_STRING1354=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition26956); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1354_tree = (Object)adaptor.create(TEXT_STRING1354);
					adaptor.addChild(root_0, TEXT_STRING1354_tree);
					}

					}
					break;

			}

			// MySQL.g:2158:2: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt474=2;
			int LA474_0 = input.LA(1);
			if ( (LA474_0==DATA_SYM) ) {
				alt474=1;
			}
			switch (alt474) {
				case 1 :
					// MySQL.g:2158:3: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1355=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_partition_definition26963); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1355_tree = (Object)adaptor.create(DATA_SYM1355);
					adaptor.addChild(root_0, DATA_SYM1355_tree);
					}

					DIRECTORY_SYM1356=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition26965); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1356_tree = (Object)adaptor.create(DIRECTORY_SYM1356);
					adaptor.addChild(root_0, DIRECTORY_SYM1356_tree);
					}

					// MySQL.g:2158:26: ( EQ_SYM )?
					int alt473=2;
					int LA473_0 = input.LA(1);
					if ( (LA473_0==EQ_SYM) ) {
						alt473=1;
					}
					switch (alt473) {
						case 1 :
							// MySQL.g:2158:27: EQ_SYM
							{
							EQ_SYM1357=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition26968); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1357_tree = (Object)adaptor.create(EQ_SYM1357);
							adaptor.addChild(root_0, EQ_SYM1357_tree);
							}

							}
							break;

					}

					TEXT_STRING1358=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition26972); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1358_tree = (Object)adaptor.create(TEXT_STRING1358);
					adaptor.addChild(root_0, TEXT_STRING1358_tree);
					}

					}
					break;

			}

			// MySQL.g:2159:2: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt476=2;
			int LA476_0 = input.LA(1);
			if ( (LA476_0==INDEX_SYM) ) {
				alt476=1;
			}
			switch (alt476) {
				case 1 :
					// MySQL.g:2159:3: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1359=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_partition_definition26978); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1359_tree = (Object)adaptor.create(INDEX_SYM1359);
					adaptor.addChild(root_0, INDEX_SYM1359_tree);
					}

					DIRECTORY_SYM1360=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_partition_definition26980); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1360_tree = (Object)adaptor.create(DIRECTORY_SYM1360);
					adaptor.addChild(root_0, DIRECTORY_SYM1360_tree);
					}

					// MySQL.g:2159:27: ( EQ_SYM )?
					int alt475=2;
					int LA475_0 = input.LA(1);
					if ( (LA475_0==EQ_SYM) ) {
						alt475=1;
					}
					switch (alt475) {
						case 1 :
							// MySQL.g:2159:28: EQ_SYM
							{
							EQ_SYM1361=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition26983); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1361_tree = (Object)adaptor.create(EQ_SYM1361);
							adaptor.addChild(root_0, EQ_SYM1361_tree);
							}

							}
							break;

					}

					TEXT_STRING1362=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_partition_definition26987); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1362_tree = (Object)adaptor.create(TEXT_STRING1362);
					adaptor.addChild(root_0, TEXT_STRING1362_tree);
					}

					}
					break;

			}

			// MySQL.g:2160:2: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt478=2;
			int LA478_0 = input.LA(1);
			if ( (LA478_0==MAX_ROWS) ) {
				alt478=1;
			}
			switch (alt478) {
				case 1 :
					// MySQL.g:2160:3: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1363=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_partition_definition26993); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1363_tree = (Object)adaptor.create(MAX_ROWS1363);
					adaptor.addChild(root_0, MAX_ROWS1363_tree);
					}

					// MySQL.g:2160:12: ( EQ_SYM )?
					int alt477=2;
					int LA477_0 = input.LA(1);
					if ( (LA477_0==EQ_SYM) ) {
						alt477=1;
					}
					switch (alt477) {
						case 1 :
							// MySQL.g:2160:13: EQ_SYM
							{
							EQ_SYM1364=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition26996); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1364_tree = (Object)adaptor.create(EQ_SYM1364);
							adaptor.addChild(root_0, EQ_SYM1364_tree);
							}

							}
							break;

					}

					INTEGER_NUM1365=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition27000); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1365_tree = (Object)adaptor.create(INTEGER_NUM1365);
					adaptor.addChild(root_0, INTEGER_NUM1365_tree);
					}

					}
					break;

			}

			// MySQL.g:2161:2: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==MIN_ROWS) ) {
				alt480=1;
			}
			switch (alt480) {
				case 1 :
					// MySQL.g:2161:3: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1366=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_partition_definition27006); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1366_tree = (Object)adaptor.create(MIN_ROWS1366);
					adaptor.addChild(root_0, MIN_ROWS1366_tree);
					}

					// MySQL.g:2161:12: ( EQ_SYM )?
					int alt479=2;
					int LA479_0 = input.LA(1);
					if ( (LA479_0==EQ_SYM) ) {
						alt479=1;
					}
					switch (alt479) {
						case 1 :
							// MySQL.g:2161:13: EQ_SYM
							{
							EQ_SYM1367=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_partition_definition27009); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1367_tree = (Object)adaptor.create(EQ_SYM1367);
							adaptor.addChild(root_0, EQ_SYM1367_tree);
							}

							}
							break;

					}

					INTEGER_NUM1368=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_partition_definition27013); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1368_tree = (Object)adaptor.create(INTEGER_NUM1368);
					adaptor.addChild(root_0, INTEGER_NUM1368_tree);
					}

					}
					break;

			}

			// MySQL.g:2162:2: ( LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN )?
			int alt482=2;
			int LA482_0 = input.LA(1);
			if ( (LA482_0==LPAREN) ) {
				alt482=1;
			}
			switch (alt482) {
				case 1 :
					// MySQL.g:2162:3: LPAREN subpartition_definition ( COMMA subpartition_definition )* RPAREN
					{
					LPAREN1369=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_partition_definition27019); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1369_tree = (Object)adaptor.create(LPAREN1369);
					adaptor.addChild(root_0, LPAREN1369_tree);
					}

					pushFollow(FOLLOW_subpartition_definition_in_partition_definition27021);
					subpartition_definition1370=subpartition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition1370.getTree());

					// MySQL.g:2162:34: ( COMMA subpartition_definition )*
					loop481:
					while (true) {
						int alt481=2;
						int LA481_0 = input.LA(1);
						if ( (LA481_0==COMMA) ) {
							alt481=1;
						}

						switch (alt481) {
						case 1 :
							// MySQL.g:2162:35: COMMA subpartition_definition
							{
							COMMA1371=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_definition27024); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1371_tree = (Object)adaptor.create(COMMA1371);
							adaptor.addChild(root_0, COMMA1371_tree);
							}

							pushFollow(FOLLOW_subpartition_definition_in_partition_definition27027);
							subpartition_definition1372=subpartition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, subpartition_definition1372.getTree());

							}
							break;

						default :
							break loop481;
						}
					}

					RPAREN1373=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_partition_definition27031); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1373_tree = (Object)adaptor.create(RPAREN1373);
					adaptor.addChild(root_0, RPAREN1373_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_definition"


	public static class subpartition_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subpartition_definition"
	// MySQL.g:2165:1: subpartition_definition : SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? ;
	public final MySQLParser.subpartition_definition_return subpartition_definition() throws RecognitionException {
		MySQLParser.subpartition_definition_return retval = new MySQLParser.subpartition_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SUBPARTITION_SYM1374=null;
		Token STORAGE_SYM1376=null;
		Token ENGINE_SYM1377=null;
		Token EQ_SYM1378=null;
		Token COMMENT_SYM1380=null;
		Token EQ_SYM1381=null;
		Token TEXT_STRING1382=null;
		Token DATA_SYM1383=null;
		Token DIRECTORY_SYM1384=null;
		Token EQ_SYM1385=null;
		Token TEXT_STRING1386=null;
		Token INDEX_SYM1387=null;
		Token DIRECTORY_SYM1388=null;
		Token EQ_SYM1389=null;
		Token TEXT_STRING1390=null;
		Token MAX_ROWS1391=null;
		Token EQ_SYM1392=null;
		Token INTEGER_NUM1393=null;
		Token MIN_ROWS1394=null;
		Token EQ_SYM1395=null;
		Token INTEGER_NUM1396=null;
		ParserRuleReturnScope partition_logical_name1375 =null;
		ParserRuleReturnScope engine_name1379 =null;

		Object SUBPARTITION_SYM1374_tree=null;
		Object STORAGE_SYM1376_tree=null;
		Object ENGINE_SYM1377_tree=null;
		Object EQ_SYM1378_tree=null;
		Object COMMENT_SYM1380_tree=null;
		Object EQ_SYM1381_tree=null;
		Object TEXT_STRING1382_tree=null;
		Object DATA_SYM1383_tree=null;
		Object DIRECTORY_SYM1384_tree=null;
		Object EQ_SYM1385_tree=null;
		Object TEXT_STRING1386_tree=null;
		Object INDEX_SYM1387_tree=null;
		Object DIRECTORY_SYM1388_tree=null;
		Object EQ_SYM1389_tree=null;
		Object TEXT_STRING1390_tree=null;
		Object MAX_ROWS1391_tree=null;
		Object EQ_SYM1392_tree=null;
		Object INTEGER_NUM1393_tree=null;
		Object MIN_ROWS1394_tree=null;
		Object EQ_SYM1395_tree=null;
		Object INTEGER_NUM1396_tree=null;

		try {
			// MySQL.g:2165:24: ( SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )? )
			// MySQL.g:2166:2: SUBPARTITION_SYM partition_logical_name ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )? ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )? ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )? ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )? ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			{
			root_0 = (Object)adaptor.nil();


			SUBPARTITION_SYM1374=(Token)match(input,SUBPARTITION_SYM,FOLLOW_SUBPARTITION_SYM_in_subpartition_definition27042); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			SUBPARTITION_SYM1374_tree = (Object)adaptor.create(SUBPARTITION_SYM1374);
			adaptor.addChild(root_0, SUBPARTITION_SYM1374_tree);
			}

			pushFollow(FOLLOW_partition_logical_name_in_subpartition_definition27044);
			partition_logical_name1375=partition_logical_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_logical_name1375.getTree());

			// MySQL.g:2167:2: ( ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name )?
			int alt485=2;
			int LA485_0 = input.LA(1);
			if ( (LA485_0==ENGINE_SYM||LA485_0==STORAGE_SYM) ) {
				alt485=1;
			}
			switch (alt485) {
				case 1 :
					// MySQL.g:2167:3: ( STORAGE_SYM )? ENGINE_SYM ( EQ_SYM )? engine_name
					{
					// MySQL.g:2167:3: ( STORAGE_SYM )?
					int alt483=2;
					int LA483_0 = input.LA(1);
					if ( (LA483_0==STORAGE_SYM) ) {
						alt483=1;
					}
					switch (alt483) {
						case 1 :
							// MySQL.g:2167:4: STORAGE_SYM
							{
							STORAGE_SYM1376=(Token)match(input,STORAGE_SYM,FOLLOW_STORAGE_SYM_in_subpartition_definition27049); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							STORAGE_SYM1376_tree = (Object)adaptor.create(STORAGE_SYM1376);
							adaptor.addChild(root_0, STORAGE_SYM1376_tree);
							}

							}
							break;

					}

					ENGINE_SYM1377=(Token)match(input,ENGINE_SYM,FOLLOW_ENGINE_SYM_in_subpartition_definition27053); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENGINE_SYM1377_tree = (Object)adaptor.create(ENGINE_SYM1377);
					adaptor.addChild(root_0, ENGINE_SYM1377_tree);
					}

					// MySQL.g:2167:29: ( EQ_SYM )?
					int alt484=2;
					int LA484_0 = input.LA(1);
					if ( (LA484_0==EQ_SYM) ) {
						alt484=1;
					}
					switch (alt484) {
						case 1 :
							// MySQL.g:2167:30: EQ_SYM
							{
							EQ_SYM1378=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition27056); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1378_tree = (Object)adaptor.create(EQ_SYM1378);
							adaptor.addChild(root_0, EQ_SYM1378_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_engine_name_in_subpartition_definition27060);
					engine_name1379=engine_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, engine_name1379.getTree());

					}
					break;

			}

			// MySQL.g:2168:2: ( COMMENT_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt487=2;
			int LA487_0 = input.LA(1);
			if ( (LA487_0==COMMENT_SYM) ) {
				alt487=1;
			}
			switch (alt487) {
				case 1 :
					// MySQL.g:2168:3: COMMENT_SYM ( EQ_SYM )? TEXT_STRING
					{
					COMMENT_SYM1380=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_subpartition_definition27066); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1380_tree = (Object)adaptor.create(COMMENT_SYM1380);
					adaptor.addChild(root_0, COMMENT_SYM1380_tree);
					}

					// MySQL.g:2168:15: ( EQ_SYM )?
					int alt486=2;
					int LA486_0 = input.LA(1);
					if ( (LA486_0==EQ_SYM) ) {
						alt486=1;
					}
					switch (alt486) {
						case 1 :
							// MySQL.g:2168:16: EQ_SYM
							{
							EQ_SYM1381=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition27069); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1381_tree = (Object)adaptor.create(EQ_SYM1381);
							adaptor.addChild(root_0, EQ_SYM1381_tree);
							}

							}
							break;

					}

					TEXT_STRING1382=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition27073); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1382_tree = (Object)adaptor.create(TEXT_STRING1382);
					adaptor.addChild(root_0, TEXT_STRING1382_tree);
					}

					}
					break;

			}

			// MySQL.g:2169:2: ( DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt489=2;
			int LA489_0 = input.LA(1);
			if ( (LA489_0==DATA_SYM) ) {
				alt489=1;
			}
			switch (alt489) {
				case 1 :
					// MySQL.g:2169:3: DATA_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					DATA_SYM1383=(Token)match(input,DATA_SYM,FOLLOW_DATA_SYM_in_subpartition_definition27080); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DATA_SYM1383_tree = (Object)adaptor.create(DATA_SYM1383);
					adaptor.addChild(root_0, DATA_SYM1383_tree);
					}

					DIRECTORY_SYM1384=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition27082); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1384_tree = (Object)adaptor.create(DIRECTORY_SYM1384);
					adaptor.addChild(root_0, DIRECTORY_SYM1384_tree);
					}

					// MySQL.g:2169:26: ( EQ_SYM )?
					int alt488=2;
					int LA488_0 = input.LA(1);
					if ( (LA488_0==EQ_SYM) ) {
						alt488=1;
					}
					switch (alt488) {
						case 1 :
							// MySQL.g:2169:27: EQ_SYM
							{
							EQ_SYM1385=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition27085); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1385_tree = (Object)adaptor.create(EQ_SYM1385);
							adaptor.addChild(root_0, EQ_SYM1385_tree);
							}

							}
							break;

					}

					TEXT_STRING1386=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition27089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1386_tree = (Object)adaptor.create(TEXT_STRING1386);
					adaptor.addChild(root_0, TEXT_STRING1386_tree);
					}

					}
					break;

			}

			// MySQL.g:2170:2: ( INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==INDEX_SYM) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// MySQL.g:2170:3: INDEX_SYM DIRECTORY_SYM ( EQ_SYM )? TEXT_STRING
					{
					INDEX_SYM1387=(Token)match(input,INDEX_SYM,FOLLOW_INDEX_SYM_in_subpartition_definition27095); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INDEX_SYM1387_tree = (Object)adaptor.create(INDEX_SYM1387);
					adaptor.addChild(root_0, INDEX_SYM1387_tree);
					}

					DIRECTORY_SYM1388=(Token)match(input,DIRECTORY_SYM,FOLLOW_DIRECTORY_SYM_in_subpartition_definition27097); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DIRECTORY_SYM1388_tree = (Object)adaptor.create(DIRECTORY_SYM1388);
					adaptor.addChild(root_0, DIRECTORY_SYM1388_tree);
					}

					// MySQL.g:2170:27: ( EQ_SYM )?
					int alt490=2;
					int LA490_0 = input.LA(1);
					if ( (LA490_0==EQ_SYM) ) {
						alt490=1;
					}
					switch (alt490) {
						case 1 :
							// MySQL.g:2170:28: EQ_SYM
							{
							EQ_SYM1389=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition27100); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1389_tree = (Object)adaptor.create(EQ_SYM1389);
							adaptor.addChild(root_0, EQ_SYM1389_tree);
							}

							}
							break;

					}

					TEXT_STRING1390=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_subpartition_definition27104); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1390_tree = (Object)adaptor.create(TEXT_STRING1390);
					adaptor.addChild(root_0, TEXT_STRING1390_tree);
					}

					}
					break;

			}

			// MySQL.g:2171:2: ( MAX_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt493=2;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==MAX_ROWS) ) {
				alt493=1;
			}
			switch (alt493) {
				case 1 :
					// MySQL.g:2171:3: MAX_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MAX_ROWS1391=(Token)match(input,MAX_ROWS,FOLLOW_MAX_ROWS_in_subpartition_definition27110); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MAX_ROWS1391_tree = (Object)adaptor.create(MAX_ROWS1391);
					adaptor.addChild(root_0, MAX_ROWS1391_tree);
					}

					// MySQL.g:2171:12: ( EQ_SYM )?
					int alt492=2;
					int LA492_0 = input.LA(1);
					if ( (LA492_0==EQ_SYM) ) {
						alt492=1;
					}
					switch (alt492) {
						case 1 :
							// MySQL.g:2171:13: EQ_SYM
							{
							EQ_SYM1392=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition27113); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1392_tree = (Object)adaptor.create(EQ_SYM1392);
							adaptor.addChild(root_0, EQ_SYM1392_tree);
							}

							}
							break;

					}

					INTEGER_NUM1393=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition27117); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1393_tree = (Object)adaptor.create(INTEGER_NUM1393);
					adaptor.addChild(root_0, INTEGER_NUM1393_tree);
					}

					}
					break;

			}

			// MySQL.g:2172:2: ( MIN_ROWS ( EQ_SYM )? INTEGER_NUM )?
			int alt495=2;
			int LA495_0 = input.LA(1);
			if ( (LA495_0==MIN_ROWS) ) {
				alt495=1;
			}
			switch (alt495) {
				case 1 :
					// MySQL.g:2172:3: MIN_ROWS ( EQ_SYM )? INTEGER_NUM
					{
					MIN_ROWS1394=(Token)match(input,MIN_ROWS,FOLLOW_MIN_ROWS_in_subpartition_definition27123); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MIN_ROWS1394_tree = (Object)adaptor.create(MIN_ROWS1394);
					adaptor.addChild(root_0, MIN_ROWS1394_tree);
					}

					// MySQL.g:2172:12: ( EQ_SYM )?
					int alt494=2;
					int LA494_0 = input.LA(1);
					if ( (LA494_0==EQ_SYM) ) {
						alt494=1;
					}
					switch (alt494) {
						case 1 :
							// MySQL.g:2172:13: EQ_SYM
							{
							EQ_SYM1395=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_subpartition_definition27126); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1395_tree = (Object)adaptor.create(EQ_SYM1395);
							adaptor.addChild(root_0, EQ_SYM1395_tree);
							}

							}
							break;

					}

					INTEGER_NUM1396=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_subpartition_definition27130); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1396_tree = (Object)adaptor.create(INTEGER_NUM1396);
					adaptor.addChild(root_0, INTEGER_NUM1396_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subpartition_definition"


	public static class length_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "length"
	// MySQL.g:2175:1: length : INTEGER_NUM ;
	public final MySQLParser.length_return length() throws RecognitionException {
		MySQLParser.length_return retval = new MySQLParser.length_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token INTEGER_NUM1397=null;

		Object INTEGER_NUM1397_tree=null;

		try {
			// MySQL.g:2175:8: ( INTEGER_NUM )
			// MySQL.g:2175:10: INTEGER_NUM
			{
			root_0 = (Object)adaptor.nil();


			INTEGER_NUM1397=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_length27141); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			INTEGER_NUM1397_tree = (Object)adaptor.create(INTEGER_NUM1397);
			adaptor.addChild(root_0, INTEGER_NUM1397_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "length"


	public static class alter_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_table_statement"
	// MySQL.g:2179:1: alter_table_statement : ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? ;
	public final MySQLParser.alter_table_statement_return alter_table_statement() throws RecognitionException {
		MySQLParser.alter_table_statement_return retval = new MySQLParser.alter_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER1398=null;
		Token IGNORE_SYM1399=null;
		Token TABLE1400=null;
		Token COMMA1403=null;
		ParserRuleReturnScope table_name1401 =null;
		ParserRuleReturnScope alter_table_specification1402 =null;
		ParserRuleReturnScope alter_table_specification1404 =null;
		ParserRuleReturnScope partition_options1405 =null;

		Object ALTER1398_tree=null;
		Object IGNORE_SYM1399_tree=null;
		Object TABLE1400_tree=null;
		Object COMMA1403_tree=null;

		try {
			// MySQL.g:2179:22: ( ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )? )
			// MySQL.g:2180:2: ALTER ( IGNORE_SYM )? TABLE table_name ( alter_table_specification ( COMMA alter_table_specification )* )? ( partition_options )?
			{
			root_0 = (Object)adaptor.nil();


			ALTER1398=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_statement27151); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER1398_tree = (Object)adaptor.create(ALTER1398);
			adaptor.addChild(root_0, ALTER1398_tree);
			}

			// MySQL.g:2180:8: ( IGNORE_SYM )?
			int alt496=2;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==IGNORE_SYM) ) {
				alt496=1;
			}
			switch (alt496) {
				case 1 :
					// MySQL.g:2180:9: IGNORE_SYM
					{
					IGNORE_SYM1399=(Token)match(input,IGNORE_SYM,FOLLOW_IGNORE_SYM_in_alter_table_statement27154); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IGNORE_SYM1399_tree = (Object)adaptor.create(IGNORE_SYM1399);
					adaptor.addChild(root_0, IGNORE_SYM1399_tree);
					}

					}
					break;

			}

			TABLE1400=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_statement27158); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1400_tree = (Object)adaptor.create(TABLE1400);
			adaptor.addChild(root_0, TABLE1400_tree);
			}

			pushFollow(FOLLOW_table_name_in_alter_table_statement27160);
			table_name1401=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1401.getTree());

			// MySQL.g:2181:2: ( alter_table_specification ( COMMA alter_table_specification )* )?
			int alt498=2;
			int LA498_0 = input.LA(1);
			if ( (LA498_0==ADD_SYM||LA498_0==ALGORITHM_SYM||(LA498_0 >= ALTER && LA498_0 <= ANALYZE_SYM)||LA498_0==AUTO_INCREMENT||LA498_0==AVG_ROW_LENGTH||LA498_0==CHANGE||LA498_0==CHARACTER_SYM||(LA498_0 >= CHECKSUM_SYM && LA498_0 <= CHECK_SYM)||LA498_0==COALESCE||LA498_0==COLLATE_SYM||LA498_0==COMMENT_SYM||LA498_0==CONNECTION_SYM||LA498_0==CONVERT_SYM||LA498_0==DATA_SYM||LA498_0==DEFAULT||LA498_0==DELAY_KEY_WRITE_SYM||(LA498_0 >= DISABLE_SYM && LA498_0 <= DISCARD)||LA498_0==DROP||LA498_0==ENABLE_SYM||LA498_0==ENGINE_SYM||LA498_0==EXCHANGE_SYM||LA498_0==FORCE_SYM||LA498_0==IMPORT||LA498_0==INDEX_SYM||LA498_0==INSERT_METHOD||LA498_0==KEY_BLOCK_SIZE||LA498_0==LOCK||LA498_0==MAX_ROWS||LA498_0==MIN_ROWS||LA498_0==MODIFY_SYM||LA498_0==OPTIMIZE||LA498_0==ORDER_SYM||LA498_0==PACK_KEYS_SYM||LA498_0==PASSWORD||LA498_0==REBUILD_SYM||(LA498_0 >= REMOVE_SYM && LA498_0 <= REPAIR)||LA498_0==ROW_FORMAT_SYM||(LA498_0 >= STATS_AUTO_RECALC && LA498_0 <= STATS_PERSISTENT)||LA498_0==TRUNCATE||LA498_0==UNION_SYM) ) {
				alt498=1;
			}
			switch (alt498) {
				case 1 :
					// MySQL.g:2181:4: alter_table_specification ( COMMA alter_table_specification )*
					{
					pushFollow(FOLLOW_alter_table_specification_in_alter_table_statement27165);
					alter_table_specification1402=alter_table_specification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification1402.getTree());

					// MySQL.g:2181:30: ( COMMA alter_table_specification )*
					loop497:
					while (true) {
						int alt497=2;
						int LA497_0 = input.LA(1);
						if ( (LA497_0==COMMA) ) {
							switch ( input.LA(2) ) {
							case ALTER:
								{
								int LA497_3 = input.LA(3);
								if ( (LA497_3==COLUMN_SYM||LA497_3==ID) ) {
									alt497=1;
								}

								}
								break;
							case DROP:
								{
								int LA497_4 = input.LA(3);
								if ( (LA497_4==INDEX_SYM) ) {
									int LA497_8 = input.LA(4);
									if ( (LA497_8==ID) ) {
										int LA497_9 = input.LA(5);
										if ( (LA497_9==EOF||LA497_9==COMMA||LA497_9==PARTITION_SYM||LA497_9==SEMI) ) {
											alt497=1;
										}

									}

								}
								else if ( (LA497_4==COLUMN_SYM||LA497_4==FOREIGN||LA497_4==ID||LA497_4==KEY_SYM||LA497_4==PARTITION_SYM||LA497_4==PRIMARY_SYM) ) {
									alt497=1;
								}

								}
								break;
							case RENAME:
								{
								int LA497_5 = input.LA(3);
								if ( (LA497_5==AS_SYM||LA497_5==ID||LA497_5==TO_SYM) ) {
									alt497=1;
								}

								}
								break;
							case TRUNCATE:
								{
								int LA497_6 = input.LA(3);
								if ( (LA497_6==PARTITION_SYM) ) {
									alt497=1;
								}

								}
								break;
							case ADD_SYM:
							case ALGORITHM_SYM:
							case ANALYZE_SYM:
							case AUTO_INCREMENT:
							case AVG_ROW_LENGTH:
							case CHANGE:
							case CHARACTER_SYM:
							case CHECKSUM_SYM:
							case CHECK_SYM:
							case COALESCE:
							case COLLATE_SYM:
							case COMMENT_SYM:
							case CONNECTION_SYM:
							case CONVERT_SYM:
							case DATA_SYM:
							case DEFAULT:
							case DELAY_KEY_WRITE_SYM:
							case DISABLE_SYM:
							case DISCARD:
							case ENABLE_SYM:
							case ENGINE_SYM:
							case EXCHANGE_SYM:
							case FORCE_SYM:
							case IMPORT:
							case INDEX_SYM:
							case INSERT_METHOD:
							case KEY_BLOCK_SIZE:
							case LOCK:
							case MAX_ROWS:
							case MIN_ROWS:
							case MODIFY_SYM:
							case OPTIMIZE:
							case ORDER_SYM:
							case PACK_KEYS_SYM:
							case PASSWORD:
							case REBUILD_SYM:
							case REMOVE_SYM:
							case REORGANIZE_SYM:
							case REPAIR:
							case ROW_FORMAT_SYM:
							case STATS_AUTO_RECALC:
							case STATS_PERSISTENT:
							case UNION_SYM:
								{
								alt497=1;
								}
								break;
							}
						}

						switch (alt497) {
						case 1 :
							// MySQL.g:2181:31: COMMA alter_table_specification
							{
							COMMA1403=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_statement27168); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1403_tree = (Object)adaptor.create(COMMA1403);
							adaptor.addChild(root_0, COMMA1403_tree);
							}

							pushFollow(FOLLOW_alter_table_specification_in_alter_table_statement27170);
							alter_table_specification1404=alter_table_specification();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_table_specification1404.getTree());

							}
							break;

						default :
							break loop497;
						}
					}

					}
					break;

			}

			// MySQL.g:2182:2: ( partition_options )?
			int alt499=2;
			int LA499_0 = input.LA(1);
			if ( (LA499_0==PARTITION_SYM) ) {
				alt499=1;
			}
			switch (alt499) {
				case 1 :
					// MySQL.g:2182:4: partition_options
					{
					pushFollow(FOLLOW_partition_options_in_alter_table_statement27180);
					partition_options1405=partition_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_options1405.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_table_statement"


	public static class alter_table_specification_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_table_specification"
	// MySQL.g:2184:1: alter_table_specification : ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) );
	public final MySQLParser.alter_table_specification_return alter_table_specification() throws RecognitionException {
		MySQLParser.alter_table_specification_return retval = new MySQLParser.alter_table_specification_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ADD_SYM1407=null;
		Token COLUMN_SYM1408=null;
		Token set1411=null;
		Token ADD_SYM1413=null;
		Token COLUMN_SYM1414=null;
		Token LPAREN1415=null;
		Token RPAREN1417=null;
		Token ADD_SYM1418=null;
		Token set1419=null;
		Token LPAREN1422=null;
		Token RPAREN1424=null;
		Token ADD_SYM1426=null;
		Token CONSTRAINT1427=null;
		Token PRIMARY_SYM1429=null;
		Token KEY_SYM1430=null;
		Token LPAREN1432=null;
		Token RPAREN1434=null;
		Token ADD_SYM1436=null;
		Token CONSTRAINT1437=null;
		Token UNIQUE_SYM1439=null;
		Token set1440=null;
		Token LPAREN1443=null;
		Token COMMA1445=null;
		Token RPAREN1447=null;
		Token ADD_SYM1449=null;
		Token FULLTEXT_SYM1450=null;
		Token set1451=null;
		Token LPAREN1453=null;
		Token RPAREN1455=null;
		Token ADD_SYM1457=null;
		Token SPATIAL_SYM1458=null;
		Token set1459=null;
		Token LPAREN1461=null;
		Token RPAREN1463=null;
		Token ADD_SYM1465=null;
		Token CONSTRAINT1466=null;
		Token FOREIGN1468=null;
		Token KEY_SYM1469=null;
		Token LPAREN1471=null;
		Token RPAREN1473=null;
		Token ALGORITHM_SYM1475=null;
		Token EQ_SYM1476=null;
		Token set1477=null;
		Token ALTER1478=null;
		Token COLUMN_SYM1479=null;
		Token SET_SYM1481=null;
		Token DEFAULT1482=null;
		Token DROP1484=null;
		Token DEFAULT1485=null;
		Token CHANGE1486=null;
		Token COLUMN_SYM1487=null;
		Token FIRST_SYM1491=null;
		Token AFTER_SYM1492=null;
		Token LOCK1494=null;
		Token EQ_SYM1495=null;
		Token set1496=null;
		Token MODIFY_SYM1497=null;
		Token COLUMN_SYM1498=null;
		Token FIRST_SYM1501=null;
		Token AFTER_SYM1502=null;
		Token DROP1504=null;
		Token COLUMN_SYM1505=null;
		Token DROP1507=null;
		Token PRIMARY_SYM1508=null;
		Token KEY_SYM1509=null;
		Token DROP1510=null;
		Token set1511=null;
		Token DROP1513=null;
		Token FOREIGN1514=null;
		Token KEY_SYM1515=null;
		Token DISABLE_SYM1517=null;
		Token KEYS1518=null;
		Token ENABLE_SYM1519=null;
		Token KEYS1520=null;
		Token RENAME1521=null;
		Token set1522=null;
		Token ORDER_SYM1524=null;
		Token BY_SYM1525=null;
		Token COMMA1527=null;
		Token CONVERT_SYM1529=null;
		Token TO_SYM1530=null;
		Token CHARACTER_SYM1531=null;
		Token SET_SYM1532=null;
		Token COLLATE_SYM1534=null;
		Token DEFAULT1536=null;
		Token CHARACTER_SYM1537=null;
		Token SET_SYM1538=null;
		Token EQ_SYM1539=null;
		Token COLLATE_SYM1541=null;
		Token EQ_SYM1542=null;
		Token DISCARD1544=null;
		Token TABLESPACE1545=null;
		Token IMPORT1546=null;
		Token TABLESPACE1547=null;
		Token FORCE_SYM1548=null;
		Token ADD_SYM1549=null;
		Token PARTITION_SYM1550=null;
		Token LPAREN1551=null;
		Token RPAREN1553=null;
		Token DROP1554=null;
		Token PARTITION_SYM1555=null;
		Token TRUNCATE1557=null;
		Token PARTITION_SYM1558=null;
		Token ALL1560=null;
		Token COALESCE1561=null;
		Token PARTITION_SYM1562=null;
		Token INTEGER_NUM1563=null;
		Token REORGANIZE_SYM1564=null;
		Token PARTITION_SYM1565=null;
		Token INTO1567=null;
		Token LPAREN1568=null;
		Token COMMA1570=null;
		Token RPAREN1572=null;
		Token EXCHANGE_SYM1573=null;
		Token PARTITION_SYM1574=null;
		Token WITH1576=null;
		Token TABLE1577=null;
		Token ANALYZE_SYM1579=null;
		Token PARTITION_SYM1580=null;
		Token ALL1582=null;
		Token CHECK_SYM1583=null;
		Token PARTITION_SYM1584=null;
		Token ALL1586=null;
		Token OPTIMIZE1587=null;
		Token PARTITION_SYM1588=null;
		Token ALL1590=null;
		Token REBUILD_SYM1591=null;
		Token PARTITION_SYM1592=null;
		Token ALL1594=null;
		Token REPAIR1595=null;
		Token PARTITION_SYM1596=null;
		Token ALL1598=null;
		Token REMOVE_SYM1599=null;
		Token PARTITIONING_SYM1600=null;
		ParserRuleReturnScope table_options1406 =null;
		ParserRuleReturnScope column_name1409 =null;
		ParserRuleReturnScope column_definition1410 =null;
		ParserRuleReturnScope column_name1412 =null;
		ParserRuleReturnScope column_definitions1416 =null;
		ParserRuleReturnScope index_name1420 =null;
		ParserRuleReturnScope index_type1421 =null;
		ParserRuleReturnScope index_column_names1423 =null;
		ParserRuleReturnScope index_option1425 =null;
		ParserRuleReturnScope constraint_symbol_name1428 =null;
		ParserRuleReturnScope index_type1431 =null;
		ParserRuleReturnScope index_column_names1433 =null;
		ParserRuleReturnScope index_option1435 =null;
		ParserRuleReturnScope constraint_symbol_name1438 =null;
		ParserRuleReturnScope index_name1441 =null;
		ParserRuleReturnScope index_type1442 =null;
		ParserRuleReturnScope index_column_name1444 =null;
		ParserRuleReturnScope index_column_name1446 =null;
		ParserRuleReturnScope index_option1448 =null;
		ParserRuleReturnScope index_name1452 =null;
		ParserRuleReturnScope index_column_names1454 =null;
		ParserRuleReturnScope index_option1456 =null;
		ParserRuleReturnScope index_name1460 =null;
		ParserRuleReturnScope index_column_names1462 =null;
		ParserRuleReturnScope index_option1464 =null;
		ParserRuleReturnScope constraint_symbol_name1467 =null;
		ParserRuleReturnScope index_name1470 =null;
		ParserRuleReturnScope index_column_names1472 =null;
		ParserRuleReturnScope reference_definition1474 =null;
		ParserRuleReturnScope column_name1480 =null;
		ParserRuleReturnScope literal_value1483 =null;
		ParserRuleReturnScope column_name1488 =null;
		ParserRuleReturnScope column_name1489 =null;
		ParserRuleReturnScope column_definition1490 =null;
		ParserRuleReturnScope column_name1493 =null;
		ParserRuleReturnScope column_name1499 =null;
		ParserRuleReturnScope column_definition1500 =null;
		ParserRuleReturnScope column_name1503 =null;
		ParserRuleReturnScope column_name1506 =null;
		ParserRuleReturnScope index_name1512 =null;
		ParserRuleReturnScope foreign_key_symbol_name1516 =null;
		ParserRuleReturnScope table_name1523 =null;
		ParserRuleReturnScope column_name1526 =null;
		ParserRuleReturnScope column_name1528 =null;
		ParserRuleReturnScope charset_name1533 =null;
		ParserRuleReturnScope collation_name1535 =null;
		ParserRuleReturnScope charset_name1540 =null;
		ParserRuleReturnScope collation_name1543 =null;
		ParserRuleReturnScope partition_definition1552 =null;
		ParserRuleReturnScope partition_names1556 =null;
		ParserRuleReturnScope partition_names1559 =null;
		ParserRuleReturnScope partition_names1566 =null;
		ParserRuleReturnScope partition_definition1569 =null;
		ParserRuleReturnScope partition_definition1571 =null;
		ParserRuleReturnScope partition_name1575 =null;
		ParserRuleReturnScope table_name1578 =null;
		ParserRuleReturnScope partition_names1581 =null;
		ParserRuleReturnScope partition_names1585 =null;
		ParserRuleReturnScope partition_names1589 =null;
		ParserRuleReturnScope partition_names1593 =null;
		ParserRuleReturnScope partition_names1597 =null;

		Object ADD_SYM1407_tree=null;
		Object COLUMN_SYM1408_tree=null;
		Object set1411_tree=null;
		Object ADD_SYM1413_tree=null;
		Object COLUMN_SYM1414_tree=null;
		Object LPAREN1415_tree=null;
		Object RPAREN1417_tree=null;
		Object ADD_SYM1418_tree=null;
		Object set1419_tree=null;
		Object LPAREN1422_tree=null;
		Object RPAREN1424_tree=null;
		Object ADD_SYM1426_tree=null;
		Object CONSTRAINT1427_tree=null;
		Object PRIMARY_SYM1429_tree=null;
		Object KEY_SYM1430_tree=null;
		Object LPAREN1432_tree=null;
		Object RPAREN1434_tree=null;
		Object ADD_SYM1436_tree=null;
		Object CONSTRAINT1437_tree=null;
		Object UNIQUE_SYM1439_tree=null;
		Object set1440_tree=null;
		Object LPAREN1443_tree=null;
		Object COMMA1445_tree=null;
		Object RPAREN1447_tree=null;
		Object ADD_SYM1449_tree=null;
		Object FULLTEXT_SYM1450_tree=null;
		Object set1451_tree=null;
		Object LPAREN1453_tree=null;
		Object RPAREN1455_tree=null;
		Object ADD_SYM1457_tree=null;
		Object SPATIAL_SYM1458_tree=null;
		Object set1459_tree=null;
		Object LPAREN1461_tree=null;
		Object RPAREN1463_tree=null;
		Object ADD_SYM1465_tree=null;
		Object CONSTRAINT1466_tree=null;
		Object FOREIGN1468_tree=null;
		Object KEY_SYM1469_tree=null;
		Object LPAREN1471_tree=null;
		Object RPAREN1473_tree=null;
		Object ALGORITHM_SYM1475_tree=null;
		Object EQ_SYM1476_tree=null;
		Object set1477_tree=null;
		Object ALTER1478_tree=null;
		Object COLUMN_SYM1479_tree=null;
		Object SET_SYM1481_tree=null;
		Object DEFAULT1482_tree=null;
		Object DROP1484_tree=null;
		Object DEFAULT1485_tree=null;
		Object CHANGE1486_tree=null;
		Object COLUMN_SYM1487_tree=null;
		Object FIRST_SYM1491_tree=null;
		Object AFTER_SYM1492_tree=null;
		Object LOCK1494_tree=null;
		Object EQ_SYM1495_tree=null;
		Object set1496_tree=null;
		Object MODIFY_SYM1497_tree=null;
		Object COLUMN_SYM1498_tree=null;
		Object FIRST_SYM1501_tree=null;
		Object AFTER_SYM1502_tree=null;
		Object DROP1504_tree=null;
		Object COLUMN_SYM1505_tree=null;
		Object DROP1507_tree=null;
		Object PRIMARY_SYM1508_tree=null;
		Object KEY_SYM1509_tree=null;
		Object DROP1510_tree=null;
		Object set1511_tree=null;
		Object DROP1513_tree=null;
		Object FOREIGN1514_tree=null;
		Object KEY_SYM1515_tree=null;
		Object DISABLE_SYM1517_tree=null;
		Object KEYS1518_tree=null;
		Object ENABLE_SYM1519_tree=null;
		Object KEYS1520_tree=null;
		Object RENAME1521_tree=null;
		Object set1522_tree=null;
		Object ORDER_SYM1524_tree=null;
		Object BY_SYM1525_tree=null;
		Object COMMA1527_tree=null;
		Object CONVERT_SYM1529_tree=null;
		Object TO_SYM1530_tree=null;
		Object CHARACTER_SYM1531_tree=null;
		Object SET_SYM1532_tree=null;
		Object COLLATE_SYM1534_tree=null;
		Object DEFAULT1536_tree=null;
		Object CHARACTER_SYM1537_tree=null;
		Object SET_SYM1538_tree=null;
		Object EQ_SYM1539_tree=null;
		Object COLLATE_SYM1541_tree=null;
		Object EQ_SYM1542_tree=null;
		Object DISCARD1544_tree=null;
		Object TABLESPACE1545_tree=null;
		Object IMPORT1546_tree=null;
		Object TABLESPACE1547_tree=null;
		Object FORCE_SYM1548_tree=null;
		Object ADD_SYM1549_tree=null;
		Object PARTITION_SYM1550_tree=null;
		Object LPAREN1551_tree=null;
		Object RPAREN1553_tree=null;
		Object DROP1554_tree=null;
		Object PARTITION_SYM1555_tree=null;
		Object TRUNCATE1557_tree=null;
		Object PARTITION_SYM1558_tree=null;
		Object ALL1560_tree=null;
		Object COALESCE1561_tree=null;
		Object PARTITION_SYM1562_tree=null;
		Object INTEGER_NUM1563_tree=null;
		Object REORGANIZE_SYM1564_tree=null;
		Object PARTITION_SYM1565_tree=null;
		Object INTO1567_tree=null;
		Object LPAREN1568_tree=null;
		Object COMMA1570_tree=null;
		Object RPAREN1572_tree=null;
		Object EXCHANGE_SYM1573_tree=null;
		Object PARTITION_SYM1574_tree=null;
		Object WITH1576_tree=null;
		Object TABLE1577_tree=null;
		Object ANALYZE_SYM1579_tree=null;
		Object PARTITION_SYM1580_tree=null;
		Object ALL1582_tree=null;
		Object CHECK_SYM1583_tree=null;
		Object PARTITION_SYM1584_tree=null;
		Object ALL1586_tree=null;
		Object OPTIMIZE1587_tree=null;
		Object PARTITION_SYM1588_tree=null;
		Object ALL1590_tree=null;
		Object REBUILD_SYM1591_tree=null;
		Object PARTITION_SYM1592_tree=null;
		Object ALL1594_tree=null;
		Object REPAIR1595_tree=null;
		Object PARTITION_SYM1596_tree=null;
		Object ALL1598_tree=null;
		Object REMOVE_SYM1599_tree=null;
		Object PARTITIONING_SYM1600_tree=null;

		try {
			// MySQL.g:2184:26: ( table_options | ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? ) | ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN ) | ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* ) | ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* ) | ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition ) | ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) ) | ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) ) | ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) ) | ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? ) | ( DROP ( COLUMN_SYM )? column_name ) | ( DROP PRIMARY_SYM KEY_SYM ) | ( DROP ( INDEX_SYM | KEY_SYM ) index_name ) | ( DROP FOREIGN KEY_SYM foreign_key_symbol_name ) | ( DISABLE_SYM KEYS ) | ( ENABLE_SYM KEYS ) | ( RENAME ( TO_SYM | AS_SYM )? table_name ) | ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* ) | ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? ) | ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) | ( DISCARD TABLESPACE ) | ( IMPORT TABLESPACE ) | ( FORCE_SYM ) | ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN ) | ( DROP PARTITION_SYM partition_names ) | ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) ) | ( COALESCE PARTITION_SYM INTEGER_NUM ) | ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN ) | ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name ) | ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) ) | ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) ) | ( REPAIR PARTITION_SYM ( partition_names | ALL ) ) | ( REMOVE_SYM PARTITIONING_SYM ) )
			int alt549=39;
			switch ( input.LA(1) ) {
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case CHECKSUM_SYM:
			case COLLATE_SYM:
			case COMMENT_SYM:
			case CONNECTION_SYM:
			case DATA_SYM:
			case DELAY_KEY_WRITE_SYM:
			case ENGINE_SYM:
			case INDEX_SYM:
			case INSERT_METHOD:
			case KEY_BLOCK_SIZE:
			case MAX_ROWS:
			case MIN_ROWS:
			case PACK_KEYS_SYM:
			case PASSWORD:
			case ROW_FORMAT_SYM:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case UNION_SYM:
				{
				alt549=1;
				}
				break;
			case DEFAULT:
				{
				int LA549_2 = input.LA(2);
				if ( (LA549_2==CHARACTER_SYM) ) {
					int LA549_3 = input.LA(3);
					if ( (LA549_3==SET_SYM) ) {
						int LA549_29 = input.LA(4);
						if ( (LA549_29==EQ_SYM) ) {
							int LA549_46 = input.LA(5);
							if ( (LA549_46==ARMSCII8||LA549_46==ASCII_SYM||LA549_46==BIG5||LA549_46==BINARY||(LA549_46 >= CP1250 && LA549_46 <= CP932)||LA549_46==DEC8||(LA549_46 >= EUCJPMS && LA549_46 <= EUCKR)||(LA549_46 >= GB2312 && LA549_46 <= GBK)||LA549_46==GEOSTD8||LA549_46==GREEK||LA549_46==HEBREW||LA549_46==HP8||LA549_46==KEYBCS2||(LA549_46 >= KOI8R && LA549_46 <= KOI8U)||LA549_46==LATIN1||(LA549_46 >= LATIN2 && LA549_46 <= LATIN7)||(LA549_46 >= MACCE && LA549_46 <= MACROMAN)||LA549_46==SJIS||LA549_46==SWE7||LA549_46==TIS620||(LA549_46 >= UCS2 && LA549_46 <= UJIS)||LA549_46==UTF8) ) {
								int LA549_47 = input.LA(6);
								if ( (synpred963_MySQL()) ) {
									alt549=1;
								}
								else if ( (synpred1042_MySQL()) ) {
									alt549=24;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 549, 47, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 46, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}
						else if ( (LA549_29==ARMSCII8||LA549_29==ASCII_SYM||LA549_29==BIG5||LA549_29==BINARY||(LA549_29 >= CP1250 && LA549_29 <= CP932)||LA549_29==DEC8||(LA549_29 >= EUCJPMS && LA549_29 <= EUCKR)||(LA549_29 >= GB2312 && LA549_29 <= GBK)||LA549_29==GEOSTD8||LA549_29==GREEK||LA549_29==HEBREW||LA549_29==HP8||LA549_29==KEYBCS2||(LA549_29 >= KOI8R && LA549_29 <= KOI8U)||LA549_29==LATIN1||(LA549_29 >= LATIN2 && LA549_29 <= LATIN7)||(LA549_29 >= MACCE && LA549_29 <= MACROMAN)||LA549_29==SJIS||LA549_29==SWE7||LA549_29==TIS620||(LA549_29 >= UCS2 && LA549_29 <= UJIS)||LA549_29==UTF8) ) {
							int LA549_47 = input.LA(5);
							if ( (synpred963_MySQL()) ) {
								alt549=1;
							}
							else if ( (synpred1042_MySQL()) ) {
								alt549=24;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 47, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 29, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA549_2==COLLATE_SYM) ) {
					alt549=1;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CHARACTER_SYM:
				{
				int LA549_3 = input.LA(2);
				if ( (LA549_3==SET_SYM) ) {
					int LA549_29 = input.LA(3);
					if ( (LA549_29==EQ_SYM) ) {
						int LA549_46 = input.LA(4);
						if ( (LA549_46==ARMSCII8||LA549_46==ASCII_SYM||LA549_46==BIG5||LA549_46==BINARY||(LA549_46 >= CP1250 && LA549_46 <= CP932)||LA549_46==DEC8||(LA549_46 >= EUCJPMS && LA549_46 <= EUCKR)||(LA549_46 >= GB2312 && LA549_46 <= GBK)||LA549_46==GEOSTD8||LA549_46==GREEK||LA549_46==HEBREW||LA549_46==HP8||LA549_46==KEYBCS2||(LA549_46 >= KOI8R && LA549_46 <= KOI8U)||LA549_46==LATIN1||(LA549_46 >= LATIN2 && LA549_46 <= LATIN7)||(LA549_46 >= MACCE && LA549_46 <= MACROMAN)||LA549_46==SJIS||LA549_46==SWE7||LA549_46==TIS620||(LA549_46 >= UCS2 && LA549_46 <= UJIS)||LA549_46==UTF8) ) {
							int LA549_47 = input.LA(5);
							if ( (synpred963_MySQL()) ) {
								alt549=1;
							}
							else if ( (synpred1042_MySQL()) ) {
								alt549=24;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 5 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 549, 47, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 46, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA549_29==ARMSCII8||LA549_29==ASCII_SYM||LA549_29==BIG5||LA549_29==BINARY||(LA549_29 >= CP1250 && LA549_29 <= CP932)||LA549_29==DEC8||(LA549_29 >= EUCJPMS && LA549_29 <= EUCKR)||(LA549_29 >= GB2312 && LA549_29 <= GBK)||LA549_29==GEOSTD8||LA549_29==GREEK||LA549_29==HEBREW||LA549_29==HP8||LA549_29==KEYBCS2||(LA549_29 >= KOI8R && LA549_29 <= KOI8U)||LA549_29==LATIN1||(LA549_29 >= LATIN2 && LA549_29 <= LATIN7)||(LA549_29 >= MACCE && LA549_29 <= MACROMAN)||LA549_29==SJIS||LA549_29==SWE7||LA549_29==TIS620||(LA549_29 >= UCS2 && LA549_29 <= UJIS)||LA549_29==UTF8) ) {
						int LA549_47 = input.LA(4);
						if ( (synpred963_MySQL()) ) {
							alt549=1;
						}
						else if ( (synpred1042_MySQL()) ) {
							alt549=24;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 47, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 29, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ADD_SYM:
				{
				switch ( input.LA(2) ) {
				case INDEX_SYM:
				case KEY_SYM:
					{
					alt549=4;
					}
					break;
				case FULLTEXT_SYM:
					{
					alt549=7;
					}
					break;
				case SPATIAL_SYM:
					{
					alt549=8;
					}
					break;
				case PARTITION_SYM:
					{
					alt549=28;
					}
					break;
				case COLUMN_SYM:
					{
					int LA549_34 = input.LA(3);
					if ( (LA549_34==ID) ) {
						alt549=2;
					}
					else if ( (LA549_34==LPAREN) ) {
						alt549=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 34, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case ID:
					{
					alt549=2;
					}
					break;
				case LPAREN:
					{
					alt549=3;
					}
					break;
				case CONSTRAINT:
					{
					switch ( input.LA(3) ) {
					case ID:
						{
						switch ( input.LA(4) ) {
						case PRIMARY_SYM:
							{
							alt549=5;
							}
							break;
						case UNIQUE_SYM:
							{
							alt549=6;
							}
							break;
						case FOREIGN:
							{
							alt549=9;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 549, 48, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case PRIMARY_SYM:
						{
						alt549=5;
						}
						break;
					case UNIQUE_SYM:
						{
						alt549=6;
						}
						break;
					case FOREIGN:
						{
						alt549=9;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 549, 37, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
					}
					break;
				case PRIMARY_SYM:
					{
					alt549=5;
					}
					break;
				case UNIQUE_SYM:
					{
					alt549=6;
					}
					break;
				case FOREIGN:
					{
					alt549=9;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case ALGORITHM_SYM:
				{
				alt549=10;
				}
				break;
			case ALTER:
				{
				alt549=11;
				}
				break;
			case CHANGE:
				{
				alt549=12;
				}
				break;
			case LOCK:
				{
				alt549=13;
				}
				break;
			case MODIFY_SYM:
				{
				alt549=14;
				}
				break;
			case DROP:
				{
				switch ( input.LA(2) ) {
				case PRIMARY_SYM:
					{
					alt549=16;
					}
					break;
				case INDEX_SYM:
				case KEY_SYM:
					{
					alt549=17;
					}
					break;
				case FOREIGN:
					{
					alt549=18;
					}
					break;
				case PARTITION_SYM:
					{
					alt549=29;
					}
					break;
				case COLUMN_SYM:
				case ID:
					{
					alt549=15;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 549, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case DISABLE_SYM:
				{
				alt549=19;
				}
				break;
			case ENABLE_SYM:
				{
				alt549=20;
				}
				break;
			case RENAME:
				{
				alt549=21;
				}
				break;
			case ORDER_SYM:
				{
				alt549=22;
				}
				break;
			case CONVERT_SYM:
				{
				alt549=23;
				}
				break;
			case DISCARD:
				{
				alt549=25;
				}
				break;
			case IMPORT:
				{
				alt549=26;
				}
				break;
			case FORCE_SYM:
				{
				alt549=27;
				}
				break;
			case TRUNCATE:
				{
				alt549=30;
				}
				break;
			case COALESCE:
				{
				alt549=31;
				}
				break;
			case REORGANIZE_SYM:
				{
				alt549=32;
				}
				break;
			case EXCHANGE_SYM:
				{
				alt549=33;
				}
				break;
			case ANALYZE_SYM:
				{
				alt549=34;
				}
				break;
			case CHECK_SYM:
				{
				alt549=35;
				}
				break;
			case OPTIMIZE:
				{
				alt549=36;
				}
				break;
			case REBUILD_SYM:
				{
				alt549=37;
				}
				break;
			case REPAIR:
				{
				alt549=38;
				}
				break;
			case REMOVE_SYM:
				{
				alt549=39;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 549, 0, input);
				throw nvae;
			}
			switch (alt549) {
				case 1 :
					// MySQL.g:2185:4: table_options
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_options_in_alter_table_specification27193);
					table_options1406=table_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_options1406.getTree());

					}
					break;
				case 2 :
					// MySQL.g:2186:4: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2186:4: ( ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )? )
					// MySQL.g:2186:6: ADD_SYM ( COLUMN_SYM )? column_name column_definition ( ( FIRST_SYM | AFTER_SYM ) column_name )?
					{
					ADD_SYM1407=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1407_tree = (Object)adaptor.create(ADD_SYM1407);
					adaptor.addChild(root_0, ADD_SYM1407_tree);
					}

					// MySQL.g:2186:14: ( COLUMN_SYM )?
					int alt500=2;
					int LA500_0 = input.LA(1);
					if ( (LA500_0==COLUMN_SYM) ) {
						alt500=1;
					}
					switch (alt500) {
						case 1 :
							// MySQL.g:2186:15: COLUMN_SYM
							{
							COLUMN_SYM1408=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification27203); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1408_tree = (Object)adaptor.create(COLUMN_SYM1408);
							adaptor.addChild(root_0, COLUMN_SYM1408_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification27207);
					column_name1409=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1409.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification27209);
					column_definition1410=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1410.getTree());

					// MySQL.g:2186:58: ( ( FIRST_SYM | AFTER_SYM ) column_name )?
					int alt501=2;
					int LA501_0 = input.LA(1);
					if ( (LA501_0==AFTER_SYM||LA501_0==FIRST_SYM) ) {
						alt501=1;
					}
					switch (alt501) {
						case 1 :
							// MySQL.g:2186:60: ( FIRST_SYM | AFTER_SYM ) column_name
							{
							set1411=input.LT(1);
							if ( input.LA(1)==AFTER_SYM||input.LA(1)==FIRST_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1411));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							pushFollow(FOLLOW_column_name_in_alter_table_specification27219);
							column_name1412=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1412.getTree());

							}
							break;

					}

					}

					}
					break;
				case 3 :
					// MySQL.g:2187:4: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2187:4: ( ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN )
					// MySQL.g:2187:6: ADD_SYM ( COLUMN_SYM )? LPAREN column_definitions RPAREN
					{
					ADD_SYM1413=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27231); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1413_tree = (Object)adaptor.create(ADD_SYM1413);
					adaptor.addChild(root_0, ADD_SYM1413_tree);
					}

					// MySQL.g:2187:14: ( COLUMN_SYM )?
					int alt502=2;
					int LA502_0 = input.LA(1);
					if ( (LA502_0==COLUMN_SYM) ) {
						alt502=1;
					}
					switch (alt502) {
						case 1 :
							// MySQL.g:2187:15: COLUMN_SYM
							{
							COLUMN_SYM1414=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification27234); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1414_tree = (Object)adaptor.create(COLUMN_SYM1414);
							adaptor.addChild(root_0, COLUMN_SYM1414_tree);
							}

							}
							break;

					}

					LPAREN1415=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27238); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1415_tree = (Object)adaptor.create(LPAREN1415);
					adaptor.addChild(root_0, LPAREN1415_tree);
					}

					pushFollow(FOLLOW_column_definitions_in_alter_table_specification27240);
					column_definitions1416=column_definitions();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definitions1416.getTree());

					RPAREN1417=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27242); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1417_tree = (Object)adaptor.create(RPAREN1417);
					adaptor.addChild(root_0, RPAREN1417_tree);
					}

					}

					}
					break;
				case 4 :
					// MySQL.g:2188:4: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2188:4: ( ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					// MySQL.g:2188:6: ADD_SYM ( INDEX_SYM | KEY_SYM ) ( index_name )? ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1418=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27251); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1418_tree = (Object)adaptor.create(ADD_SYM1418);
					adaptor.addChild(root_0, ADD_SYM1418_tree);
					}

					set1419=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1419));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// MySQL.g:2188:34: ( index_name )?
					int alt503=2;
					int LA503_0 = input.LA(1);
					if ( (LA503_0==ID) ) {
						alt503=1;
					}
					switch (alt503) {
						case 1 :
							// MySQL.g:2188:35: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification27260);
							index_name1420=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1420.getTree());

							}
							break;

					}

					// MySQL.g:2188:48: ( index_type )?
					int alt504=2;
					int LA504_0 = input.LA(1);
					if ( (LA504_0==USING_SYM) ) {
						alt504=1;
					}
					switch (alt504) {
						case 1 :
							// MySQL.g:2188:49: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification27265);
							index_type1421=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1421.getTree());

							}
							break;

					}

					LPAREN1422=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27269); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1422_tree = (Object)adaptor.create(LPAREN1422);
					adaptor.addChild(root_0, LPAREN1422_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification27271);
					index_column_names1423=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1423.getTree());

					RPAREN1424=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27273); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1424_tree = (Object)adaptor.create(RPAREN1424);
					adaptor.addChild(root_0, RPAREN1424_tree);
					}

					// MySQL.g:2188:95: ( index_option )*
					loop505:
					while (true) {
						int alt505=2;
						int LA505_0 = input.LA(1);
						if ( (LA505_0==COMMENT_SYM||LA505_0==KEY_BLOCK_SIZE||LA505_0==USING_SYM||LA505_0==WITH) ) {
							alt505=1;
						}

						switch (alt505) {
						case 1 :
							// MySQL.g:2188:96: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification27276);
							index_option1425=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1425.getTree());

							}
							break;

						default :
							break loop505;
						}
					}

					}

					}
					break;
				case 5 :
					// MySQL.g:2189:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2189:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )* )
					// MySQL.g:2189:6: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? PRIMARY_SYM KEY_SYM ( index_type )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1426=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27287); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1426_tree = (Object)adaptor.create(ADD_SYM1426);
					adaptor.addChild(root_0, ADD_SYM1426_tree);
					}

					// MySQL.g:2189:14: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt507=2;
					int LA507_0 = input.LA(1);
					if ( (LA507_0==CONSTRAINT) ) {
						alt507=1;
					}
					switch (alt507) {
						case 1 :
							// MySQL.g:2189:15: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1427=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification27290); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1427_tree = (Object)adaptor.create(CONSTRAINT1427);
							adaptor.addChild(root_0, CONSTRAINT1427_tree);
							}

							// MySQL.g:2189:26: ( constraint_symbol_name )?
							int alt506=2;
							int LA506_0 = input.LA(1);
							if ( (LA506_0==ID) ) {
								alt506=1;
							}
							switch (alt506) {
								case 1 :
									// MySQL.g:2189:27: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification27293);
									constraint_symbol_name1428=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1428.getTree());

									}
									break;

							}

							}
							break;

					}

					PRIMARY_SYM1429=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification27299); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM1429_tree = (Object)adaptor.create(PRIMARY_SYM1429);
					adaptor.addChild(root_0, PRIMARY_SYM1429_tree);
					}

					KEY_SYM1430=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification27301); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1430_tree = (Object)adaptor.create(KEY_SYM1430);
					adaptor.addChild(root_0, KEY_SYM1430_tree);
					}

					// MySQL.g:2189:74: ( index_type )?
					int alt508=2;
					int LA508_0 = input.LA(1);
					if ( (LA508_0==USING_SYM) ) {
						alt508=1;
					}
					switch (alt508) {
						case 1 :
							// MySQL.g:2189:75: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification27304);
							index_type1431=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1431.getTree());

							}
							break;

					}

					LPAREN1432=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1432_tree = (Object)adaptor.create(LPAREN1432);
					adaptor.addChild(root_0, LPAREN1432_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification27310);
					index_column_names1433=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1433.getTree());

					RPAREN1434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27312); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1434_tree = (Object)adaptor.create(RPAREN1434);
					adaptor.addChild(root_0, RPAREN1434_tree);
					}

					// MySQL.g:2189:121: ( index_option )*
					loop509:
					while (true) {
						int alt509=2;
						int LA509_0 = input.LA(1);
						if ( (LA509_0==COMMENT_SYM||LA509_0==KEY_BLOCK_SIZE||LA509_0==USING_SYM||LA509_0==WITH) ) {
							alt509=1;
						}

						switch (alt509) {
						case 1 :
							// MySQL.g:2189:122: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification27315);
							index_option1435=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1435.getTree());

							}
							break;

						default :
							break loop509;
						}
					}

					}

					}
					break;
				case 6 :
					// MySQL.g:2191:3: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2191:3: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )* )
					// MySQL.g:2192:3: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? UNIQUE_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? ( index_type )? LPAREN index_column_name ( COMMA index_column_name )* RPAREN ( index_option )*
					{
					ADD_SYM1436=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27332); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1436_tree = (Object)adaptor.create(ADD_SYM1436);
					adaptor.addChild(root_0, ADD_SYM1436_tree);
					}

					// MySQL.g:2192:11: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt511=2;
					int LA511_0 = input.LA(1);
					if ( (LA511_0==CONSTRAINT) ) {
						alt511=1;
					}
					switch (alt511) {
						case 1 :
							// MySQL.g:2192:12: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1437=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification27335); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1437_tree = (Object)adaptor.create(CONSTRAINT1437);
							adaptor.addChild(root_0, CONSTRAINT1437_tree);
							}

							// MySQL.g:2192:23: ( constraint_symbol_name )?
							int alt510=2;
							int LA510_0 = input.LA(1);
							if ( (LA510_0==ID) ) {
								alt510=1;
							}
							switch (alt510) {
								case 1 :
									// MySQL.g:2192:24: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification27338);
									constraint_symbol_name1438=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1438.getTree());

									}
									break;

							}

							}
							break;

					}

					UNIQUE_SYM1439=(Token)match(input,UNIQUE_SYM,FOLLOW_UNIQUE_SYM_in_alter_table_specification27344); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNIQUE_SYM1439_tree = (Object)adaptor.create(UNIQUE_SYM1439);
					adaptor.addChild(root_0, UNIQUE_SYM1439_tree);
					}

					// MySQL.g:2192:62: ( INDEX_SYM | KEY_SYM )?
					int alt512=2;
					int LA512_0 = input.LA(1);
					if ( (LA512_0==INDEX_SYM||LA512_0==KEY_SYM) ) {
						alt512=1;
					}
					switch (alt512) {
						case 1 :
							// MySQL.g:
							{
							set1440=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1440));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// MySQL.g:2192:83: ( index_name )?
					int alt513=2;
					int LA513_0 = input.LA(1);
					if ( (LA513_0==ID) ) {
						alt513=1;
					}
					switch (alt513) {
						case 1 :
							// MySQL.g:2192:84: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification27354);
							index_name1441=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1441.getTree());

							}
							break;

					}

					// MySQL.g:2193:3: ( index_type )?
					int alt514=2;
					int LA514_0 = input.LA(1);
					if ( (LA514_0==USING_SYM) ) {
						alt514=1;
					}
					switch (alt514) {
						case 1 :
							// MySQL.g:2193:4: index_type
							{
							pushFollow(FOLLOW_index_type_in_alter_table_specification27362);
							index_type1442=index_type();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1442.getTree());

							}
							break;

					}

					LPAREN1443=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27366); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1443_tree = (Object)adaptor.create(LPAREN1443);
					adaptor.addChild(root_0, LPAREN1443_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_alter_table_specification27368);
					index_column_name1444=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1444.getTree());

					// MySQL.g:2193:42: ( COMMA index_column_name )*
					loop515:
					while (true) {
						int alt515=2;
						int LA515_0 = input.LA(1);
						if ( (LA515_0==COMMA) ) {
							alt515=1;
						}

						switch (alt515) {
						case 1 :
							// MySQL.g:2193:43: COMMA index_column_name
							{
							COMMA1445=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification27371); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1445_tree = (Object)adaptor.create(COMMA1445);
							adaptor.addChild(root_0, COMMA1445_tree);
							}

							pushFollow(FOLLOW_index_column_name_in_alter_table_specification27373);
							index_column_name1446=index_column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1446.getTree());

							}
							break;

						default :
							break loop515;
						}
					}

					RPAREN1447=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27377); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1447_tree = (Object)adaptor.create(RPAREN1447);
					adaptor.addChild(root_0, RPAREN1447_tree);
					}

					// MySQL.g:2193:76: ( index_option )*
					loop516:
					while (true) {
						int alt516=2;
						int LA516_0 = input.LA(1);
						if ( (LA516_0==COMMENT_SYM||LA516_0==KEY_BLOCK_SIZE||LA516_0==USING_SYM||LA516_0==WITH) ) {
							alt516=1;
						}

						switch (alt516) {
						case 1 :
							// MySQL.g:2193:77: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification27380);
							index_option1448=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1448.getTree());

							}
							break;

						default :
							break loop516;
						}
					}

					}

					}
					break;
				case 7 :
					// MySQL.g:2195:4: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2195:4: ( ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					// MySQL.g:2195:6: ADD_SYM FULLTEXT_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1449=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27393); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1449_tree = (Object)adaptor.create(ADD_SYM1449);
					adaptor.addChild(root_0, ADD_SYM1449_tree);
					}

					FULLTEXT_SYM1450=(Token)match(input,FULLTEXT_SYM,FOLLOW_FULLTEXT_SYM_in_alter_table_specification27395); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FULLTEXT_SYM1450_tree = (Object)adaptor.create(FULLTEXT_SYM1450);
					adaptor.addChild(root_0, FULLTEXT_SYM1450_tree);
					}

					// MySQL.g:2195:27: ( INDEX_SYM | KEY_SYM )?
					int alt517=2;
					int LA517_0 = input.LA(1);
					if ( (LA517_0==INDEX_SYM||LA517_0==KEY_SYM) ) {
						alt517=1;
					}
					switch (alt517) {
						case 1 :
							// MySQL.g:
							{
							set1451=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1451));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// MySQL.g:2195:48: ( index_name )?
					int alt518=2;
					int LA518_0 = input.LA(1);
					if ( (LA518_0==ID) ) {
						alt518=1;
					}
					switch (alt518) {
						case 1 :
							// MySQL.g:2195:49: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification27405);
							index_name1452=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1452.getTree());

							}
							break;

					}

					LPAREN1453=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27409); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1453_tree = (Object)adaptor.create(LPAREN1453);
					adaptor.addChild(root_0, LPAREN1453_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification27411);
					index_column_names1454=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1454.getTree());

					RPAREN1455=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27413); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1455_tree = (Object)adaptor.create(RPAREN1455);
					adaptor.addChild(root_0, RPAREN1455_tree);
					}

					// MySQL.g:2195:95: ( index_option )*
					loop519:
					while (true) {
						int alt519=2;
						int LA519_0 = input.LA(1);
						if ( (LA519_0==COMMENT_SYM||LA519_0==KEY_BLOCK_SIZE||LA519_0==USING_SYM||LA519_0==WITH) ) {
							alt519=1;
						}

						switch (alt519) {
						case 1 :
							// MySQL.g:2195:96: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification27416);
							index_option1456=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1456.getTree());

							}
							break;

						default :
							break loop519;
						}
					}

					}

					}
					break;
				case 8 :
					// MySQL.g:2196:4: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2196:4: ( ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )* )
					// MySQL.g:2196:6: ADD_SYM SPATIAL_SYM ( INDEX_SYM | KEY_SYM )? ( index_name )? LPAREN index_column_names RPAREN ( index_option )*
					{
					ADD_SYM1457=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27427); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1457_tree = (Object)adaptor.create(ADD_SYM1457);
					adaptor.addChild(root_0, ADD_SYM1457_tree);
					}

					SPATIAL_SYM1458=(Token)match(input,SPATIAL_SYM,FOLLOW_SPATIAL_SYM_in_alter_table_specification27429); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SPATIAL_SYM1458_tree = (Object)adaptor.create(SPATIAL_SYM1458);
					adaptor.addChild(root_0, SPATIAL_SYM1458_tree);
					}

					// MySQL.g:2196:26: ( INDEX_SYM | KEY_SYM )?
					int alt520=2;
					int LA520_0 = input.LA(1);
					if ( (LA520_0==INDEX_SYM||LA520_0==KEY_SYM) ) {
						alt520=1;
					}
					switch (alt520) {
						case 1 :
							// MySQL.g:
							{
							set1459=input.LT(1);
							if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1459));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// MySQL.g:2196:47: ( index_name )?
					int alt521=2;
					int LA521_0 = input.LA(1);
					if ( (LA521_0==ID) ) {
						alt521=1;
					}
					switch (alt521) {
						case 1 :
							// MySQL.g:2196:48: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification27439);
							index_name1460=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1460.getTree());

							}
							break;

					}

					LPAREN1461=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27443); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1461_tree = (Object)adaptor.create(LPAREN1461);
					adaptor.addChild(root_0, LPAREN1461_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification27445);
					index_column_names1462=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1462.getTree());

					RPAREN1463=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27447); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1463_tree = (Object)adaptor.create(RPAREN1463);
					adaptor.addChild(root_0, RPAREN1463_tree);
					}

					// MySQL.g:2196:94: ( index_option )*
					loop522:
					while (true) {
						int alt522=2;
						int LA522_0 = input.LA(1);
						if ( (LA522_0==COMMENT_SYM||LA522_0==KEY_BLOCK_SIZE||LA522_0==USING_SYM||LA522_0==WITH) ) {
							alt522=1;
						}

						switch (alt522) {
						case 1 :
							// MySQL.g:2196:95: index_option
							{
							pushFollow(FOLLOW_index_option_in_alter_table_specification27450);
							index_option1464=index_option();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_option1464.getTree());

							}
							break;

						default :
							break loop522;
						}
					}

					}

					}
					break;
				case 9 :
					// MySQL.g:2197:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2197:4: ( ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition )
					// MySQL.g:2197:6: ADD_SYM ( CONSTRAINT ( constraint_symbol_name )? )? FOREIGN KEY_SYM ( index_name )? LPAREN index_column_names RPAREN reference_definition
					{
					ADD_SYM1465=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27461); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1465_tree = (Object)adaptor.create(ADD_SYM1465);
					adaptor.addChild(root_0, ADD_SYM1465_tree);
					}

					// MySQL.g:2197:14: ( CONSTRAINT ( constraint_symbol_name )? )?
					int alt524=2;
					int LA524_0 = input.LA(1);
					if ( (LA524_0==CONSTRAINT) ) {
						alt524=1;
					}
					switch (alt524) {
						case 1 :
							// MySQL.g:2197:15: CONSTRAINT ( constraint_symbol_name )?
							{
							CONSTRAINT1466=(Token)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_alter_table_specification27464); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CONSTRAINT1466_tree = (Object)adaptor.create(CONSTRAINT1466);
							adaptor.addChild(root_0, CONSTRAINT1466_tree);
							}

							// MySQL.g:2197:26: ( constraint_symbol_name )?
							int alt523=2;
							int LA523_0 = input.LA(1);
							if ( (LA523_0==ID) ) {
								alt523=1;
							}
							switch (alt523) {
								case 1 :
									// MySQL.g:2197:27: constraint_symbol_name
									{
									pushFollow(FOLLOW_constraint_symbol_name_in_alter_table_specification27467);
									constraint_symbol_name1467=constraint_symbol_name();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, constraint_symbol_name1467.getTree());

									}
									break;

							}

							}
							break;

					}

					FOREIGN1468=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification27473); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN1468_tree = (Object)adaptor.create(FOREIGN1468);
					adaptor.addChild(root_0, FOREIGN1468_tree);
					}

					KEY_SYM1469=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification27475); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1469_tree = (Object)adaptor.create(KEY_SYM1469);
					adaptor.addChild(root_0, KEY_SYM1469_tree);
					}

					// MySQL.g:2197:70: ( index_name )?
					int alt525=2;
					int LA525_0 = input.LA(1);
					if ( (LA525_0==ID) ) {
						alt525=1;
					}
					switch (alt525) {
						case 1 :
							// MySQL.g:2197:71: index_name
							{
							pushFollow(FOLLOW_index_name_in_alter_table_specification27478);
							index_name1470=index_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1470.getTree());

							}
							break;

					}

					LPAREN1471=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27482); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1471_tree = (Object)adaptor.create(LPAREN1471);
					adaptor.addChild(root_0, LPAREN1471_tree);
					}

					pushFollow(FOLLOW_index_column_names_in_alter_table_specification27484);
					index_column_names1472=index_column_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_names1472.getTree());

					RPAREN1473=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27486); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1473_tree = (Object)adaptor.create(RPAREN1473);
					adaptor.addChild(root_0, RPAREN1473_tree);
					}

					pushFollow(FOLLOW_reference_definition_in_alter_table_specification27488);
					reference_definition1474=reference_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_definition1474.getTree());

					}

					}
					break;
				case 10 :
					// MySQL.g:2198:4: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2198:4: ( ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM ) )
					// MySQL.g:2198:6: ALGORITHM_SYM ( EQ_SYM )? ( DEFAULT | INPLACE_SYM | COPY_SYM )
					{
					ALGORITHM_SYM1475=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_alter_table_specification27497); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALGORITHM_SYM1475_tree = (Object)adaptor.create(ALGORITHM_SYM1475);
					adaptor.addChild(root_0, ALGORITHM_SYM1475_tree);
					}

					// MySQL.g:2198:20: ( EQ_SYM )?
					int alt526=2;
					int LA526_0 = input.LA(1);
					if ( (LA526_0==EQ_SYM) ) {
						alt526=1;
					}
					switch (alt526) {
						case 1 :
							// MySQL.g:2198:21: EQ_SYM
							{
							EQ_SYM1476=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification27500); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1476_tree = (Object)adaptor.create(EQ_SYM1476);
							adaptor.addChild(root_0, EQ_SYM1476_tree);
							}

							}
							break;

					}

					set1477=input.LT(1);
					if ( input.LA(1)==COPY_SYM||input.LA(1)==DEFAULT||input.LA(1)==INPLACE_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1477));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 11 :
					// MySQL.g:2199:4: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2199:4: ( ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) ) )
					// MySQL.g:2199:6: ALTER ( COLUMN_SYM )? column_name ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
					{
					ALTER1478=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_table_specification27519); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALTER1478_tree = (Object)adaptor.create(ALTER1478);
					adaptor.addChild(root_0, ALTER1478_tree);
					}

					// MySQL.g:2199:12: ( COLUMN_SYM )?
					int alt527=2;
					int LA527_0 = input.LA(1);
					if ( (LA527_0==COLUMN_SYM) ) {
						alt527=1;
					}
					switch (alt527) {
						case 1 :
							// MySQL.g:2199:13: COLUMN_SYM
							{
							COLUMN_SYM1479=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification27522); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1479_tree = (Object)adaptor.create(COLUMN_SYM1479);
							adaptor.addChild(root_0, COLUMN_SYM1479_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification27526);
					column_name1480=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1480.getTree());

					// MySQL.g:2199:38: ( ( SET_SYM DEFAULT literal_value ) | ( DROP DEFAULT ) )
					int alt528=2;
					int LA528_0 = input.LA(1);
					if ( (LA528_0==SET_SYM) ) {
						alt528=1;
					}
					else if ( (LA528_0==DROP) ) {
						alt528=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 528, 0, input);
						throw nvae;
					}

					switch (alt528) {
						case 1 :
							// MySQL.g:2199:39: ( SET_SYM DEFAULT literal_value )
							{
							// MySQL.g:2199:39: ( SET_SYM DEFAULT literal_value )
							// MySQL.g:2199:40: SET_SYM DEFAULT literal_value
							{
							SET_SYM1481=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification27530); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							SET_SYM1481_tree = (Object)adaptor.create(SET_SYM1481);
							adaptor.addChild(root_0, SET_SYM1481_tree);
							}

							DEFAULT1482=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification27532); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1482_tree = (Object)adaptor.create(DEFAULT1482);
							adaptor.addChild(root_0, DEFAULT1482_tree);
							}

							pushFollow(FOLLOW_literal_value_in_alter_table_specification27534);
							literal_value1483=literal_value();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, literal_value1483.getTree());

							}

							}
							break;
						case 2 :
							// MySQL.g:2199:73: ( DROP DEFAULT )
							{
							// MySQL.g:2199:73: ( DROP DEFAULT )
							// MySQL.g:2199:74: DROP DEFAULT
							{
							DROP1484=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification27540); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DROP1484_tree = (Object)adaptor.create(DROP1484);
							adaptor.addChild(root_0, DROP1484_tree);
							}

							DEFAULT1485=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification27542); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1485_tree = (Object)adaptor.create(DEFAULT1485);
							adaptor.addChild(root_0, DEFAULT1485_tree);
							}

							}

							}
							break;

					}

					}

					}
					break;
				case 12 :
					// MySQL.g:2200:4: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2200:4: ( CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					// MySQL.g:2200:6: CHANGE ( COLUMN_SYM )? column_name column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
					{
					CHANGE1486=(Token)match(input,CHANGE,FOLLOW_CHANGE_in_alter_table_specification27553); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHANGE1486_tree = (Object)adaptor.create(CHANGE1486);
					adaptor.addChild(root_0, CHANGE1486_tree);
					}

					// MySQL.g:2200:13: ( COLUMN_SYM )?
					int alt529=2;
					int LA529_0 = input.LA(1);
					if ( (LA529_0==COLUMN_SYM) ) {
						alt529=1;
					}
					switch (alt529) {
						case 1 :
							// MySQL.g:2200:14: COLUMN_SYM
							{
							COLUMN_SYM1487=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification27556); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1487_tree = (Object)adaptor.create(COLUMN_SYM1487);
							adaptor.addChild(root_0, COLUMN_SYM1487_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification27560);
					column_name1488=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1488.getTree());

					pushFollow(FOLLOW_column_name_in_alter_table_specification27562);
					column_name1489=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1489.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification27564);
					column_definition1490=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1490.getTree());

					// MySQL.g:2200:69: ( FIRST_SYM | AFTER_SYM column_name )?
					int alt530=3;
					int LA530_0 = input.LA(1);
					if ( (LA530_0==FIRST_SYM) ) {
						alt530=1;
					}
					else if ( (LA530_0==AFTER_SYM) ) {
						alt530=2;
					}
					switch (alt530) {
						case 1 :
							// MySQL.g:2200:70: FIRST_SYM
							{
							FIRST_SYM1491=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification27567); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							FIRST_SYM1491_tree = (Object)adaptor.create(FIRST_SYM1491);
							adaptor.addChild(root_0, FIRST_SYM1491_tree);
							}

							}
							break;
						case 2 :
							// MySQL.g:2200:80: AFTER_SYM column_name
							{
							AFTER_SYM1492=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification27569); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							AFTER_SYM1492_tree = (Object)adaptor.create(AFTER_SYM1492);
							adaptor.addChild(root_0, AFTER_SYM1492_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification27571);
							column_name1493=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1493.getTree());

							}
							break;

					}

					}

					}
					break;
				case 13 :
					// MySQL.g:2201:4: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2201:4: ( LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM ) )
					// MySQL.g:2201:6: LOCK ( EQ_SYM )? ( DEFAULT | NONE_SYM | SHARED_SYM | EXCLUSIVE_SYM )
					{
					LOCK1494=(Token)match(input,LOCK,FOLLOW_LOCK_in_alter_table_specification27582); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LOCK1494_tree = (Object)adaptor.create(LOCK1494);
					adaptor.addChild(root_0, LOCK1494_tree);
					}

					// MySQL.g:2201:11: ( EQ_SYM )?
					int alt531=2;
					int LA531_0 = input.LA(1);
					if ( (LA531_0==EQ_SYM) ) {
						alt531=1;
					}
					switch (alt531) {
						case 1 :
							// MySQL.g:2201:12: EQ_SYM
							{
							EQ_SYM1495=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification27585); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1495_tree = (Object)adaptor.create(EQ_SYM1495);
							adaptor.addChild(root_0, EQ_SYM1495_tree);
							}

							}
							break;

					}

					set1496=input.LT(1);
					if ( input.LA(1)==DEFAULT||input.LA(1)==EXCLUSIVE_SYM||input.LA(1)==NONE_SYM||input.LA(1)==SHARED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1496));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}

					}
					break;
				case 14 :
					// MySQL.g:2202:4: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2202:4: ( MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )? )
					// MySQL.g:2202:6: MODIFY_SYM ( COLUMN_SYM )? column_name column_definition ( FIRST_SYM | AFTER_SYM column_name )?
					{
					MODIFY_SYM1497=(Token)match(input,MODIFY_SYM,FOLLOW_MODIFY_SYM_in_alter_table_specification27606); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					MODIFY_SYM1497_tree = (Object)adaptor.create(MODIFY_SYM1497);
					adaptor.addChild(root_0, MODIFY_SYM1497_tree);
					}

					// MySQL.g:2202:17: ( COLUMN_SYM )?
					int alt532=2;
					int LA532_0 = input.LA(1);
					if ( (LA532_0==COLUMN_SYM) ) {
						alt532=1;
					}
					switch (alt532) {
						case 1 :
							// MySQL.g:2202:18: COLUMN_SYM
							{
							COLUMN_SYM1498=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification27609); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1498_tree = (Object)adaptor.create(COLUMN_SYM1498);
							adaptor.addChild(root_0, COLUMN_SYM1498_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification27613);
					column_name1499=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1499.getTree());

					pushFollow(FOLLOW_column_definition_in_alter_table_specification27615);
					column_definition1500=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1500.getTree());

					// MySQL.g:2202:61: ( FIRST_SYM | AFTER_SYM column_name )?
					int alt533=3;
					int LA533_0 = input.LA(1);
					if ( (LA533_0==FIRST_SYM) ) {
						alt533=1;
					}
					else if ( (LA533_0==AFTER_SYM) ) {
						alt533=2;
					}
					switch (alt533) {
						case 1 :
							// MySQL.g:2202:62: FIRST_SYM
							{
							FIRST_SYM1501=(Token)match(input,FIRST_SYM,FOLLOW_FIRST_SYM_in_alter_table_specification27618); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							FIRST_SYM1501_tree = (Object)adaptor.create(FIRST_SYM1501);
							adaptor.addChild(root_0, FIRST_SYM1501_tree);
							}

							}
							break;
						case 2 :
							// MySQL.g:2202:74: AFTER_SYM column_name
							{
							AFTER_SYM1502=(Token)match(input,AFTER_SYM,FOLLOW_AFTER_SYM_in_alter_table_specification27622); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							AFTER_SYM1502_tree = (Object)adaptor.create(AFTER_SYM1502);
							adaptor.addChild(root_0, AFTER_SYM1502_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification27624);
							column_name1503=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1503.getTree());

							}
							break;

					}

					}

					}
					break;
				case 15 :
					// MySQL.g:2203:4: ( DROP ( COLUMN_SYM )? column_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2203:4: ( DROP ( COLUMN_SYM )? column_name )
					// MySQL.g:2203:6: DROP ( COLUMN_SYM )? column_name
					{
					DROP1504=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification27635); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1504_tree = (Object)adaptor.create(DROP1504);
					adaptor.addChild(root_0, DROP1504_tree);
					}

					// MySQL.g:2203:11: ( COLUMN_SYM )?
					int alt534=2;
					int LA534_0 = input.LA(1);
					if ( (LA534_0==COLUMN_SYM) ) {
						alt534=1;
					}
					switch (alt534) {
						case 1 :
							// MySQL.g:2203:12: COLUMN_SYM
							{
							COLUMN_SYM1505=(Token)match(input,COLUMN_SYM,FOLLOW_COLUMN_SYM_in_alter_table_specification27638); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLUMN_SYM1505_tree = (Object)adaptor.create(COLUMN_SYM1505);
							adaptor.addChild(root_0, COLUMN_SYM1505_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification27642);
					column_name1506=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1506.getTree());

					}

					}
					break;
				case 16 :
					// MySQL.g:2204:4: ( DROP PRIMARY_SYM KEY_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2204:4: ( DROP PRIMARY_SYM KEY_SYM )
					// MySQL.g:2204:6: DROP PRIMARY_SYM KEY_SYM
					{
					DROP1507=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification27651); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1507_tree = (Object)adaptor.create(DROP1507);
					adaptor.addChild(root_0, DROP1507_tree);
					}

					PRIMARY_SYM1508=(Token)match(input,PRIMARY_SYM,FOLLOW_PRIMARY_SYM_in_alter_table_specification27653); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PRIMARY_SYM1508_tree = (Object)adaptor.create(PRIMARY_SYM1508);
					adaptor.addChild(root_0, PRIMARY_SYM1508_tree);
					}

					KEY_SYM1509=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification27655); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1509_tree = (Object)adaptor.create(KEY_SYM1509);
					adaptor.addChild(root_0, KEY_SYM1509_tree);
					}

					}

					}
					break;
				case 17 :
					// MySQL.g:2205:4: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2205:4: ( DROP ( INDEX_SYM | KEY_SYM ) index_name )
					// MySQL.g:2205:6: DROP ( INDEX_SYM | KEY_SYM ) index_name
					{
					DROP1510=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification27664); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1510_tree = (Object)adaptor.create(DROP1510);
					adaptor.addChild(root_0, DROP1510_tree);
					}

					set1511=input.LT(1);
					if ( input.LA(1)==INDEX_SYM||input.LA(1)==KEY_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1511));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_index_name_in_alter_table_specification27672);
					index_name1512=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name1512.getTree());

					}

					}
					break;
				case 18 :
					// MySQL.g:2206:4: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2206:4: ( DROP FOREIGN KEY_SYM foreign_key_symbol_name )
					// MySQL.g:2206:6: DROP FOREIGN KEY_SYM foreign_key_symbol_name
					{
					DROP1513=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification27681); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1513_tree = (Object)adaptor.create(DROP1513);
					adaptor.addChild(root_0, DROP1513_tree);
					}

					FOREIGN1514=(Token)match(input,FOREIGN,FOLLOW_FOREIGN_in_alter_table_specification27683); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FOREIGN1514_tree = (Object)adaptor.create(FOREIGN1514);
					adaptor.addChild(root_0, FOREIGN1514_tree);
					}

					KEY_SYM1515=(Token)match(input,KEY_SYM,FOLLOW_KEY_SYM_in_alter_table_specification27685); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_SYM1515_tree = (Object)adaptor.create(KEY_SYM1515);
					adaptor.addChild(root_0, KEY_SYM1515_tree);
					}

					pushFollow(FOLLOW_foreign_key_symbol_name_in_alter_table_specification27687);
					foreign_key_symbol_name1516=foreign_key_symbol_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, foreign_key_symbol_name1516.getTree());

					}

					}
					break;
				case 19 :
					// MySQL.g:2207:4: ( DISABLE_SYM KEYS )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2207:4: ( DISABLE_SYM KEYS )
					// MySQL.g:2207:6: DISABLE_SYM KEYS
					{
					DISABLE_SYM1517=(Token)match(input,DISABLE_SYM,FOLLOW_DISABLE_SYM_in_alter_table_specification27696); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISABLE_SYM1517_tree = (Object)adaptor.create(DISABLE_SYM1517);
					adaptor.addChild(root_0, DISABLE_SYM1517_tree);
					}

					KEYS1518=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification27698); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEYS1518_tree = (Object)adaptor.create(KEYS1518);
					adaptor.addChild(root_0, KEYS1518_tree);
					}

					}

					}
					break;
				case 20 :
					// MySQL.g:2208:4: ( ENABLE_SYM KEYS )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2208:4: ( ENABLE_SYM KEYS )
					// MySQL.g:2208:6: ENABLE_SYM KEYS
					{
					ENABLE_SYM1519=(Token)match(input,ENABLE_SYM,FOLLOW_ENABLE_SYM_in_alter_table_specification27707); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ENABLE_SYM1519_tree = (Object)adaptor.create(ENABLE_SYM1519);
					adaptor.addChild(root_0, ENABLE_SYM1519_tree);
					}

					KEYS1520=(Token)match(input,KEYS,FOLLOW_KEYS_in_alter_table_specification27709); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEYS1520_tree = (Object)adaptor.create(KEYS1520);
					adaptor.addChild(root_0, KEYS1520_tree);
					}

					}

					}
					break;
				case 21 :
					// MySQL.g:2209:4: ( RENAME ( TO_SYM | AS_SYM )? table_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2209:4: ( RENAME ( TO_SYM | AS_SYM )? table_name )
					// MySQL.g:2209:6: RENAME ( TO_SYM | AS_SYM )? table_name
					{
					RENAME1521=(Token)match(input,RENAME,FOLLOW_RENAME_in_alter_table_specification27718); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RENAME1521_tree = (Object)adaptor.create(RENAME1521);
					adaptor.addChild(root_0, RENAME1521_tree);
					}

					// MySQL.g:2209:13: ( TO_SYM | AS_SYM )?
					int alt535=2;
					int LA535_0 = input.LA(1);
					if ( (LA535_0==AS_SYM||LA535_0==TO_SYM) ) {
						alt535=1;
					}
					switch (alt535) {
						case 1 :
							// MySQL.g:
							{
							set1522=input.LT(1);
							if ( input.LA(1)==AS_SYM||input.LA(1)==TO_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1522));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_table_name_in_alter_table_specification27727);
					table_name1523=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1523.getTree());

					}

					}
					break;
				case 22 :
					// MySQL.g:2210:4: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2210:4: ( ORDER_SYM BY_SYM column_name ( COMMA column_name )* )
					// MySQL.g:2210:6: ORDER_SYM BY_SYM column_name ( COMMA column_name )*
					{
					ORDER_SYM1524=(Token)match(input,ORDER_SYM,FOLLOW_ORDER_SYM_in_alter_table_specification27736); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ORDER_SYM1524_tree = (Object)adaptor.create(ORDER_SYM1524);
					adaptor.addChild(root_0, ORDER_SYM1524_tree);
					}

					BY_SYM1525=(Token)match(input,BY_SYM,FOLLOW_BY_SYM_in_alter_table_specification27738); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BY_SYM1525_tree = (Object)adaptor.create(BY_SYM1525);
					adaptor.addChild(root_0, BY_SYM1525_tree);
					}

					pushFollow(FOLLOW_column_name_in_alter_table_specification27740);
					column_name1526=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1526.getTree());

					// MySQL.g:2210:35: ( COMMA column_name )*
					loop536:
					while (true) {
						int alt536=2;
						int LA536_0 = input.LA(1);
						if ( (LA536_0==COMMA) ) {
							int LA536_1 = input.LA(2);
							if ( (LA536_1==ID) ) {
								alt536=1;
							}

						}

						switch (alt536) {
						case 1 :
							// MySQL.g:2210:36: COMMA column_name
							{
							COMMA1527=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification27743); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1527_tree = (Object)adaptor.create(COMMA1527);
							adaptor.addChild(root_0, COMMA1527_tree);
							}

							pushFollow(FOLLOW_column_name_in_alter_table_specification27745);
							column_name1528=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1528.getTree());

							}
							break;

						default :
							break loop536;
						}
					}

					}

					}
					break;
				case 23 :
					// MySQL.g:2211:4: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2211:4: ( CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )? )
					// MySQL.g:2211:6: CONVERT_SYM TO_SYM CHARACTER_SYM SET_SYM charset_name ( COLLATE_SYM collation_name )?
					{
					CONVERT_SYM1529=(Token)match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_alter_table_specification27756); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CONVERT_SYM1529_tree = (Object)adaptor.create(CONVERT_SYM1529);
					adaptor.addChild(root_0, CONVERT_SYM1529_tree);
					}

					TO_SYM1530=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_alter_table_specification27758); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM1530_tree = (Object)adaptor.create(TO_SYM1530);
					adaptor.addChild(root_0, TO_SYM1530_tree);
					}

					CHARACTER_SYM1531=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification27760); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1531_tree = (Object)adaptor.create(CHARACTER_SYM1531);
					adaptor.addChild(root_0, CHARACTER_SYM1531_tree);
					}

					SET_SYM1532=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification27762); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1532_tree = (Object)adaptor.create(SET_SYM1532);
					adaptor.addChild(root_0, SET_SYM1532_tree);
					}

					pushFollow(FOLLOW_charset_name_in_alter_table_specification27764);
					charset_name1533=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1533.getTree());

					// MySQL.g:2211:60: ( COLLATE_SYM collation_name )?
					int alt537=2;
					int LA537_0 = input.LA(1);
					if ( (LA537_0==COLLATE_SYM) ) {
						alt537=1;
					}
					switch (alt537) {
						case 1 :
							// MySQL.g:2211:61: COLLATE_SYM collation_name
							{
							COLLATE_SYM1534=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification27767); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1534_tree = (Object)adaptor.create(COLLATE_SYM1534);
							adaptor.addChild(root_0, COLLATE_SYM1534_tree);
							}

							pushFollow(FOLLOW_collation_name_in_alter_table_specification27769);
							collation_name1535=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1535.getTree());

							}
							break;

					}

					}

					}
					break;
				case 24 :
					// MySQL.g:2212:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2212:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
					// MySQL.g:2212:6: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
					{
					// MySQL.g:2212:6: ( DEFAULT )?
					int alt538=2;
					int LA538_0 = input.LA(1);
					if ( (LA538_0==DEFAULT) ) {
						alt538=1;
					}
					switch (alt538) {
						case 1 :
							// MySQL.g:2212:7: DEFAULT
							{
							DEFAULT1536=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_alter_table_specification27781); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DEFAULT1536_tree = (Object)adaptor.create(DEFAULT1536);
							adaptor.addChild(root_0, DEFAULT1536_tree);
							}

							}
							break;

					}

					CHARACTER_SYM1537=(Token)match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_alter_table_specification27785); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARACTER_SYM1537_tree = (Object)adaptor.create(CHARACTER_SYM1537);
					adaptor.addChild(root_0, CHARACTER_SYM1537_tree);
					}

					SET_SYM1538=(Token)match(input,SET_SYM,FOLLOW_SET_SYM_in_alter_table_specification27787); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SET_SYM1538_tree = (Object)adaptor.create(SET_SYM1538);
					adaptor.addChild(root_0, SET_SYM1538_tree);
					}

					// MySQL.g:2212:39: ( EQ_SYM )?
					int alt539=2;
					int LA539_0 = input.LA(1);
					if ( (LA539_0==EQ_SYM) ) {
						alt539=1;
					}
					switch (alt539) {
						case 1 :
							// MySQL.g:2212:40: EQ_SYM
							{
							EQ_SYM1539=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification27790); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1539_tree = (Object)adaptor.create(EQ_SYM1539);
							adaptor.addChild(root_0, EQ_SYM1539_tree);
							}

							}
							break;

					}

					pushFollow(FOLLOW_charset_name_in_alter_table_specification27794);
					charset_name1540=charset_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, charset_name1540.getTree());

					// MySQL.g:2212:62: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
					int alt541=2;
					int LA541_0 = input.LA(1);
					if ( (LA541_0==COLLATE_SYM) ) {
						alt541=1;
					}
					switch (alt541) {
						case 1 :
							// MySQL.g:2212:63: COLLATE_SYM ( EQ_SYM )? collation_name
							{
							COLLATE_SYM1541=(Token)match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_alter_table_specification27797); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COLLATE_SYM1541_tree = (Object)adaptor.create(COLLATE_SYM1541);
							adaptor.addChild(root_0, COLLATE_SYM1541_tree);
							}

							// MySQL.g:2212:75: ( EQ_SYM )?
							int alt540=2;
							int LA540_0 = input.LA(1);
							if ( (LA540_0==EQ_SYM) ) {
								alt540=1;
							}
							switch (alt540) {
								case 1 :
									// MySQL.g:2212:76: EQ_SYM
									{
									EQ_SYM1542=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_alter_table_specification27800); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									EQ_SYM1542_tree = (Object)adaptor.create(EQ_SYM1542);
									adaptor.addChild(root_0, EQ_SYM1542_tree);
									}

									}
									break;

							}

							pushFollow(FOLLOW_collation_name_in_alter_table_specification27804);
							collation_name1543=collation_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, collation_name1543.getTree());

							}
							break;

					}

					}

					}
					break;
				case 25 :
					// MySQL.g:2213:4: ( DISCARD TABLESPACE )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2213:4: ( DISCARD TABLESPACE )
					// MySQL.g:2213:6: DISCARD TABLESPACE
					{
					DISCARD1544=(Token)match(input,DISCARD,FOLLOW_DISCARD_in_alter_table_specification27815); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DISCARD1544_tree = (Object)adaptor.create(DISCARD1544);
					adaptor.addChild(root_0, DISCARD1544_tree);
					}

					TABLESPACE1545=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification27817); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLESPACE1545_tree = (Object)adaptor.create(TABLESPACE1545);
					adaptor.addChild(root_0, TABLESPACE1545_tree);
					}

					}

					}
					break;
				case 26 :
					// MySQL.g:2214:4: ( IMPORT TABLESPACE )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2214:4: ( IMPORT TABLESPACE )
					// MySQL.g:2214:6: IMPORT TABLESPACE
					{
					IMPORT1546=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_alter_table_specification27826); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMPORT1546_tree = (Object)adaptor.create(IMPORT1546);
					adaptor.addChild(root_0, IMPORT1546_tree);
					}

					TABLESPACE1547=(Token)match(input,TABLESPACE,FOLLOW_TABLESPACE_in_alter_table_specification27828); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLESPACE1547_tree = (Object)adaptor.create(TABLESPACE1547);
					adaptor.addChild(root_0, TABLESPACE1547_tree);
					}

					}

					}
					break;
				case 27 :
					// MySQL.g:2215:4: ( FORCE_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2215:4: ( FORCE_SYM )
					// MySQL.g:2215:6: FORCE_SYM
					{
					FORCE_SYM1548=(Token)match(input,FORCE_SYM,FOLLOW_FORCE_SYM_in_alter_table_specification27837); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FORCE_SYM1548_tree = (Object)adaptor.create(FORCE_SYM1548);
					adaptor.addChild(root_0, FORCE_SYM1548_tree);
					}

					}

					}
					break;
				case 28 :
					// MySQL.g:2216:4: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2216:4: ( ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN )
					// MySQL.g:2216:6: ADD_SYM PARTITION_SYM LPAREN partition_definition RPAREN
					{
					ADD_SYM1549=(Token)match(input,ADD_SYM,FOLLOW_ADD_SYM_in_alter_table_specification27846); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ADD_SYM1549_tree = (Object)adaptor.create(ADD_SYM1549);
					adaptor.addChild(root_0, ADD_SYM1549_tree);
					}

					PARTITION_SYM1550=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27848); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1550_tree = (Object)adaptor.create(PARTITION_SYM1550);
					adaptor.addChild(root_0, PARTITION_SYM1550_tree);
					}

					LPAREN1551=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27850); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1551_tree = (Object)adaptor.create(LPAREN1551);
					adaptor.addChild(root_0, LPAREN1551_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_alter_table_specification27852);
					partition_definition1552=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1552.getTree());

					RPAREN1553=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27854); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1553_tree = (Object)adaptor.create(RPAREN1553);
					adaptor.addChild(root_0, RPAREN1553_tree);
					}

					}

					}
					break;
				case 29 :
					// MySQL.g:2217:4: ( DROP PARTITION_SYM partition_names )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2217:4: ( DROP PARTITION_SYM partition_names )
					// MySQL.g:2217:6: DROP PARTITION_SYM partition_names
					{
					DROP1554=(Token)match(input,DROP,FOLLOW_DROP_in_alter_table_specification27863); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DROP1554_tree = (Object)adaptor.create(DROP1554);
					adaptor.addChild(root_0, DROP1554_tree);
					}

					PARTITION_SYM1555=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27865); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1555_tree = (Object)adaptor.create(PARTITION_SYM1555);
					adaptor.addChild(root_0, PARTITION_SYM1555_tree);
					}

					pushFollow(FOLLOW_partition_names_in_alter_table_specification27867);
					partition_names1556=partition_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1556.getTree());

					}

					}
					break;
				case 30 :
					// MySQL.g:2218:4: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2218:4: ( TRUNCATE PARTITION_SYM ( partition_names | ALL ) )
					// MySQL.g:2218:6: TRUNCATE PARTITION_SYM ( partition_names | ALL )
					{
					TRUNCATE1557=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_alter_table_specification27876); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TRUNCATE1557_tree = (Object)adaptor.create(TRUNCATE1557);
					adaptor.addChild(root_0, TRUNCATE1557_tree);
					}

					PARTITION_SYM1558=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27878); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1558_tree = (Object)adaptor.create(PARTITION_SYM1558);
					adaptor.addChild(root_0, PARTITION_SYM1558_tree);
					}

					// MySQL.g:2218:29: ( partition_names | ALL )
					int alt542=2;
					int LA542_0 = input.LA(1);
					if ( (LA542_0==ID) ) {
						alt542=1;
					}
					else if ( (LA542_0==ALL) ) {
						alt542=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 542, 0, input);
						throw nvae;
					}

					switch (alt542) {
						case 1 :
							// MySQL.g:2218:30: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification27881);
							partition_names1559=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1559.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2218:48: ALL
							{
							ALL1560=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification27885); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1560_tree = (Object)adaptor.create(ALL1560);
							adaptor.addChild(root_0, ALL1560_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 31 :
					// MySQL.g:2219:4: ( COALESCE PARTITION_SYM INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2219:4: ( COALESCE PARTITION_SYM INTEGER_NUM )
					// MySQL.g:2219:6: COALESCE PARTITION_SYM INTEGER_NUM
					{
					COALESCE1561=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_alter_table_specification27895); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COALESCE1561_tree = (Object)adaptor.create(COALESCE1561);
					adaptor.addChild(root_0, COALESCE1561_tree);
					}

					PARTITION_SYM1562=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27897); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1562_tree = (Object)adaptor.create(PARTITION_SYM1562);
					adaptor.addChild(root_0, PARTITION_SYM1562_tree);
					}

					INTEGER_NUM1563=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_alter_table_specification27899); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1563_tree = (Object)adaptor.create(INTEGER_NUM1563);
					adaptor.addChild(root_0, INTEGER_NUM1563_tree);
					}

					}

					}
					break;
				case 32 :
					// MySQL.g:2220:4: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2220:4: ( REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN )
					// MySQL.g:2220:6: REORGANIZE_SYM PARTITION_SYM partition_names INTO LPAREN partition_definition ( COMMA partition_definition )* RPAREN
					{
					REORGANIZE_SYM1564=(Token)match(input,REORGANIZE_SYM,FOLLOW_REORGANIZE_SYM_in_alter_table_specification27908); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REORGANIZE_SYM1564_tree = (Object)adaptor.create(REORGANIZE_SYM1564);
					adaptor.addChild(root_0, REORGANIZE_SYM1564_tree);
					}

					PARTITION_SYM1565=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27910); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1565_tree = (Object)adaptor.create(PARTITION_SYM1565);
					adaptor.addChild(root_0, PARTITION_SYM1565_tree);
					}

					pushFollow(FOLLOW_partition_names_in_alter_table_specification27912);
					partition_names1566=partition_names();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1566.getTree());

					INTO1567=(Token)match(input,INTO,FOLLOW_INTO_in_alter_table_specification27914); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTO1567_tree = (Object)adaptor.create(INTO1567);
					adaptor.addChild(root_0, INTO1567_tree);
					}

					LPAREN1568=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alter_table_specification27916); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1568_tree = (Object)adaptor.create(LPAREN1568);
					adaptor.addChild(root_0, LPAREN1568_tree);
					}

					pushFollow(FOLLOW_partition_definition_in_alter_table_specification27918);
					partition_definition1569=partition_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1569.getTree());

					// MySQL.g:2220:84: ( COMMA partition_definition )*
					loop543:
					while (true) {
						int alt543=2;
						int LA543_0 = input.LA(1);
						if ( (LA543_0==COMMA) ) {
							alt543=1;
						}

						switch (alt543) {
						case 1 :
							// MySQL.g:2220:85: COMMA partition_definition
							{
							COMMA1570=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_table_specification27921); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							COMMA1570_tree = (Object)adaptor.create(COMMA1570);
							adaptor.addChild(root_0, COMMA1570_tree);
							}

							pushFollow(FOLLOW_partition_definition_in_alter_table_specification27923);
							partition_definition1571=partition_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_definition1571.getTree());

							}
							break;

						default :
							break loop543;
						}
					}

					RPAREN1572=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alter_table_specification27927); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1572_tree = (Object)adaptor.create(RPAREN1572);
					adaptor.addChild(root_0, RPAREN1572_tree);
					}

					}

					}
					break;
				case 33 :
					// MySQL.g:2221:4: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2221:4: ( EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name )
					// MySQL.g:2221:6: EXCHANGE_SYM PARTITION_SYM partition_name WITH TABLE table_name
					{
					EXCHANGE_SYM1573=(Token)match(input,EXCHANGE_SYM,FOLLOW_EXCHANGE_SYM_in_alter_table_specification27936); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXCHANGE_SYM1573_tree = (Object)adaptor.create(EXCHANGE_SYM1573);
					adaptor.addChild(root_0, EXCHANGE_SYM1573_tree);
					}

					PARTITION_SYM1574=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27938); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1574_tree = (Object)adaptor.create(PARTITION_SYM1574);
					adaptor.addChild(root_0, PARTITION_SYM1574_tree);
					}

					pushFollow(FOLLOW_partition_name_in_alter_table_specification27940);
					partition_name1575=partition_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_name1575.getTree());

					WITH1576=(Token)match(input,WITH,FOLLOW_WITH_in_alter_table_specification27942); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1576_tree = (Object)adaptor.create(WITH1576);
					adaptor.addChild(root_0, WITH1576_tree);
					}

					TABLE1577=(Token)match(input,TABLE,FOLLOW_TABLE_in_alter_table_specification27944); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLE1577_tree = (Object)adaptor.create(TABLE1577);
					adaptor.addChild(root_0, TABLE1577_tree);
					}

					pushFollow(FOLLOW_table_name_in_alter_table_specification27946);
					table_name1578=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1578.getTree());

					}

					}
					break;
				case 34 :
					// MySQL.g:2222:4: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2222:4: ( ANALYZE_SYM PARTITION_SYM ( partition_names | ALL ) )
					// MySQL.g:2222:6: ANALYZE_SYM PARTITION_SYM ( partition_names | ALL )
					{
					ANALYZE_SYM1579=(Token)match(input,ANALYZE_SYM,FOLLOW_ANALYZE_SYM_in_alter_table_specification27955); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ANALYZE_SYM1579_tree = (Object)adaptor.create(ANALYZE_SYM1579);
					adaptor.addChild(root_0, ANALYZE_SYM1579_tree);
					}

					PARTITION_SYM1580=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27957); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1580_tree = (Object)adaptor.create(PARTITION_SYM1580);
					adaptor.addChild(root_0, PARTITION_SYM1580_tree);
					}

					// MySQL.g:2222:32: ( partition_names | ALL )
					int alt544=2;
					int LA544_0 = input.LA(1);
					if ( (LA544_0==ID) ) {
						alt544=1;
					}
					else if ( (LA544_0==ALL) ) {
						alt544=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 544, 0, input);
						throw nvae;
					}

					switch (alt544) {
						case 1 :
							// MySQL.g:2222:33: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification27960);
							partition_names1581=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1581.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2222:51: ALL
							{
							ALL1582=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification27964); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1582_tree = (Object)adaptor.create(ALL1582);
							adaptor.addChild(root_0, ALL1582_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 35 :
					// MySQL.g:2223:4: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2223:4: ( CHECK_SYM PARTITION_SYM ( partition_names | ALL ) )
					// MySQL.g:2223:6: CHECK_SYM PARTITION_SYM ( partition_names | ALL )
					{
					CHECK_SYM1583=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_alter_table_specification27974); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM1583_tree = (Object)adaptor.create(CHECK_SYM1583);
					adaptor.addChild(root_0, CHECK_SYM1583_tree);
					}

					PARTITION_SYM1584=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27976); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1584_tree = (Object)adaptor.create(PARTITION_SYM1584);
					adaptor.addChild(root_0, PARTITION_SYM1584_tree);
					}

					// MySQL.g:2223:30: ( partition_names | ALL )
					int alt545=2;
					int LA545_0 = input.LA(1);
					if ( (LA545_0==ID) ) {
						alt545=1;
					}
					else if ( (LA545_0==ALL) ) {
						alt545=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 545, 0, input);
						throw nvae;
					}

					switch (alt545) {
						case 1 :
							// MySQL.g:2223:31: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification27979);
							partition_names1585=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1585.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2223:49: ALL
							{
							ALL1586=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification27983); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1586_tree = (Object)adaptor.create(ALL1586);
							adaptor.addChild(root_0, ALL1586_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 36 :
					// MySQL.g:2224:4: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2224:4: ( OPTIMIZE PARTITION_SYM ( partition_names | ALL ) )
					// MySQL.g:2224:6: OPTIMIZE PARTITION_SYM ( partition_names | ALL )
					{
					OPTIMIZE1587=(Token)match(input,OPTIMIZE,FOLLOW_OPTIMIZE_in_alter_table_specification27993); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OPTIMIZE1587_tree = (Object)adaptor.create(OPTIMIZE1587);
					adaptor.addChild(root_0, OPTIMIZE1587_tree);
					}

					PARTITION_SYM1588=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification27995); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1588_tree = (Object)adaptor.create(PARTITION_SYM1588);
					adaptor.addChild(root_0, PARTITION_SYM1588_tree);
					}

					// MySQL.g:2224:29: ( partition_names | ALL )
					int alt546=2;
					int LA546_0 = input.LA(1);
					if ( (LA546_0==ID) ) {
						alt546=1;
					}
					else if ( (LA546_0==ALL) ) {
						alt546=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 546, 0, input);
						throw nvae;
					}

					switch (alt546) {
						case 1 :
							// MySQL.g:2224:30: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification27998);
							partition_names1589=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1589.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2224:48: ALL
							{
							ALL1590=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification28002); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1590_tree = (Object)adaptor.create(ALL1590);
							adaptor.addChild(root_0, ALL1590_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 37 :
					// MySQL.g:2225:4: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2225:4: ( REBUILD_SYM PARTITION_SYM ( partition_names | ALL ) )
					// MySQL.g:2225:6: REBUILD_SYM PARTITION_SYM ( partition_names | ALL )
					{
					REBUILD_SYM1591=(Token)match(input,REBUILD_SYM,FOLLOW_REBUILD_SYM_in_alter_table_specification28012); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REBUILD_SYM1591_tree = (Object)adaptor.create(REBUILD_SYM1591);
					adaptor.addChild(root_0, REBUILD_SYM1591_tree);
					}

					PARTITION_SYM1592=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification28014); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1592_tree = (Object)adaptor.create(PARTITION_SYM1592);
					adaptor.addChild(root_0, PARTITION_SYM1592_tree);
					}

					// MySQL.g:2225:32: ( partition_names | ALL )
					int alt547=2;
					int LA547_0 = input.LA(1);
					if ( (LA547_0==ID) ) {
						alt547=1;
					}
					else if ( (LA547_0==ALL) ) {
						alt547=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 547, 0, input);
						throw nvae;
					}

					switch (alt547) {
						case 1 :
							// MySQL.g:2225:33: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification28017);
							partition_names1593=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1593.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2225:51: ALL
							{
							ALL1594=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification28021); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1594_tree = (Object)adaptor.create(ALL1594);
							adaptor.addChild(root_0, ALL1594_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 38 :
					// MySQL.g:2226:4: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2226:4: ( REPAIR PARTITION_SYM ( partition_names | ALL ) )
					// MySQL.g:2226:6: REPAIR PARTITION_SYM ( partition_names | ALL )
					{
					REPAIR1595=(Token)match(input,REPAIR,FOLLOW_REPAIR_in_alter_table_specification28031); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REPAIR1595_tree = (Object)adaptor.create(REPAIR1595);
					adaptor.addChild(root_0, REPAIR1595_tree);
					}

					PARTITION_SYM1596=(Token)match(input,PARTITION_SYM,FOLLOW_PARTITION_SYM_in_alter_table_specification28033); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITION_SYM1596_tree = (Object)adaptor.create(PARTITION_SYM1596);
					adaptor.addChild(root_0, PARTITION_SYM1596_tree);
					}

					// MySQL.g:2226:27: ( partition_names | ALL )
					int alt548=2;
					int LA548_0 = input.LA(1);
					if ( (LA548_0==ID) ) {
						alt548=1;
					}
					else if ( (LA548_0==ALL) ) {
						alt548=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 548, 0, input);
						throw nvae;
					}

					switch (alt548) {
						case 1 :
							// MySQL.g:2226:28: partition_names
							{
							pushFollow(FOLLOW_partition_names_in_alter_table_specification28036);
							partition_names1597=partition_names();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_names1597.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2226:46: ALL
							{
							ALL1598=(Token)match(input,ALL,FOLLOW_ALL_in_alter_table_specification28040); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							ALL1598_tree = (Object)adaptor.create(ALL1598);
							adaptor.addChild(root_0, ALL1598_tree);
							}

							}
							break;

					}

					}

					}
					break;
				case 39 :
					// MySQL.g:2227:4: ( REMOVE_SYM PARTITIONING_SYM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2227:4: ( REMOVE_SYM PARTITIONING_SYM )
					// MySQL.g:2227:6: REMOVE_SYM PARTITIONING_SYM
					{
					REMOVE_SYM1599=(Token)match(input,REMOVE_SYM,FOLLOW_REMOVE_SYM_in_alter_table_specification28050); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REMOVE_SYM1599_tree = (Object)adaptor.create(REMOVE_SYM1599);
					adaptor.addChild(root_0, REMOVE_SYM1599_tree);
					}

					PARTITIONING_SYM1600=(Token)match(input,PARTITIONING_SYM,FOLLOW_PARTITIONING_SYM_in_alter_table_specification28052); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARTITIONING_SYM1600_tree = (Object)adaptor.create(PARTITIONING_SYM1600);
					adaptor.addChild(root_0, PARTITIONING_SYM1600_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_table_specification"


	public static class index_column_names_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_column_names"
	// MySQL.g:2229:1: index_column_names : index_column_name ( COMMA index_column_name )* ;
	public final MySQLParser.index_column_names_return index_column_names() throws RecognitionException {
		MySQLParser.index_column_names_return retval = new MySQLParser.index_column_names_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1602=null;
		ParserRuleReturnScope index_column_name1601 =null;
		ParserRuleReturnScope index_column_name1603 =null;

		Object COMMA1602_tree=null;

		try {
			// MySQL.g:2229:19: ( index_column_name ( COMMA index_column_name )* )
			// MySQL.g:2230:2: index_column_name ( COMMA index_column_name )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_index_column_name_in_index_column_names28062);
			index_column_name1601=index_column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1601.getTree());

			// MySQL.g:2230:20: ( COMMA index_column_name )*
			loop550:
			while (true) {
				int alt550=2;
				int LA550_0 = input.LA(1);
				if ( (LA550_0==COMMA) ) {
					alt550=1;
				}

				switch (alt550) {
				case 1 :
					// MySQL.g:2230:21: COMMA index_column_name
					{
					COMMA1602=(Token)match(input,COMMA,FOLLOW_COMMA_in_index_column_names28065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1602_tree = (Object)adaptor.create(COMMA1602);
					adaptor.addChild(root_0, COMMA1602_tree);
					}

					pushFollow(FOLLOW_index_column_name_in_index_column_names28067);
					index_column_name1603=index_column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_column_name1603.getTree());

					}
					break;

				default :
					break loop550;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_column_names"


	public static class index_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_type"
	// MySQL.g:2231:1: index_type : USING_SYM ( BTREE_SYM | HASH_SYM ) ;
	public final MySQLParser.index_type_return index_type() throws RecognitionException {
		MySQLParser.index_type_return retval = new MySQLParser.index_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token USING_SYM1604=null;
		Token set1605=null;

		Object USING_SYM1604_tree=null;
		Object set1605_tree=null;

		try {
			// MySQL.g:2231:11: ( USING_SYM ( BTREE_SYM | HASH_SYM ) )
			// MySQL.g:2232:2: USING_SYM ( BTREE_SYM | HASH_SYM )
			{
			root_0 = (Object)adaptor.nil();


			USING_SYM1604=(Token)match(input,USING_SYM,FOLLOW_USING_SYM_in_index_type28076); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			USING_SYM1604_tree = (Object)adaptor.create(USING_SYM1604);
			adaptor.addChild(root_0, USING_SYM1604_tree);
			}

			set1605=input.LT(1);
			if ( input.LA(1)==BTREE_SYM||input.LA(1)==HASH_SYM ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1605));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_type"


	public static class index_option_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "index_option"
	// MySQL.g:2234:1: index_option : ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) );
	public final MySQLParser.index_option_return index_option() throws RecognitionException {
		MySQLParser.index_option_return retval = new MySQLParser.index_option_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token KEY_BLOCK_SIZE1606=null;
		Token EQ_SYM1607=null;
		Token INTEGER_NUM1608=null;
		Token WITH1610=null;
		Token PARSER_SYM1611=null;
		Token COMMENT_SYM1613=null;
		Token TEXT_STRING1614=null;
		ParserRuleReturnScope index_type1609 =null;
		ParserRuleReturnScope parser_name1612 =null;

		Object KEY_BLOCK_SIZE1606_tree=null;
		Object EQ_SYM1607_tree=null;
		Object INTEGER_NUM1608_tree=null;
		Object WITH1610_tree=null;
		Object PARSER_SYM1611_tree=null;
		Object COMMENT_SYM1613_tree=null;
		Object TEXT_STRING1614_tree=null;

		try {
			// MySQL.g:2234:13: ( ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM ) | index_type | ( WITH PARSER_SYM parser_name ) | ( COMMENT_SYM TEXT_STRING ) )
			int alt552=4;
			switch ( input.LA(1) ) {
			case KEY_BLOCK_SIZE:
				{
				alt552=1;
				}
				break;
			case USING_SYM:
				{
				alt552=2;
				}
				break;
			case WITH:
				{
				alt552=3;
				}
				break;
			case COMMENT_SYM:
				{
				alt552=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 552, 0, input);
				throw nvae;
			}
			switch (alt552) {
				case 1 :
					// MySQL.g:2235:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2235:4: ( KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM )
					// MySQL.g:2235:6: KEY_BLOCK_SIZE ( EQ_SYM )? INTEGER_NUM
					{
					KEY_BLOCK_SIZE1606=(Token)match(input,KEY_BLOCK_SIZE,FOLLOW_KEY_BLOCK_SIZE_in_index_option28096); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KEY_BLOCK_SIZE1606_tree = (Object)adaptor.create(KEY_BLOCK_SIZE1606);
					adaptor.addChild(root_0, KEY_BLOCK_SIZE1606_tree);
					}

					// MySQL.g:2235:21: ( EQ_SYM )?
					int alt551=2;
					int LA551_0 = input.LA(1);
					if ( (LA551_0==EQ_SYM) ) {
						alt551=1;
					}
					switch (alt551) {
						case 1 :
							// MySQL.g:2235:22: EQ_SYM
							{
							EQ_SYM1607=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_index_option28099); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							EQ_SYM1607_tree = (Object)adaptor.create(EQ_SYM1607);
							adaptor.addChild(root_0, EQ_SYM1607_tree);
							}

							}
							break;

					}

					INTEGER_NUM1608=(Token)match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_index_option28103); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTEGER_NUM1608_tree = (Object)adaptor.create(INTEGER_NUM1608);
					adaptor.addChild(root_0, INTEGER_NUM1608_tree);
					}

					}

					}
					break;
				case 2 :
					// MySQL.g:2236:4: index_type
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_index_type_in_index_option28110);
					index_type1609=index_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, index_type1609.getTree());

					}
					break;
				case 3 :
					// MySQL.g:2237:4: ( WITH PARSER_SYM parser_name )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2237:4: ( WITH PARSER_SYM parser_name )
					// MySQL.g:2237:6: WITH PARSER_SYM parser_name
					{
					WITH1610=(Token)match(input,WITH,FOLLOW_WITH_in_index_option28117); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1610_tree = (Object)adaptor.create(WITH1610);
					adaptor.addChild(root_0, WITH1610_tree);
					}

					PARSER_SYM1611=(Token)match(input,PARSER_SYM,FOLLOW_PARSER_SYM_in_index_option28119); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					PARSER_SYM1611_tree = (Object)adaptor.create(PARSER_SYM1611);
					adaptor.addChild(root_0, PARSER_SYM1611_tree);
					}

					pushFollow(FOLLOW_parser_name_in_index_option28121);
					parser_name1612=parser_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, parser_name1612.getTree());

					}

					}
					break;
				case 4 :
					// MySQL.g:2238:4: ( COMMENT_SYM TEXT_STRING )
					{
					root_0 = (Object)adaptor.nil();


					// MySQL.g:2238:4: ( COMMENT_SYM TEXT_STRING )
					// MySQL.g:2238:6: COMMENT_SYM TEXT_STRING
					{
					COMMENT_SYM1613=(Token)match(input,COMMENT_SYM,FOLLOW_COMMENT_SYM_in_index_option28130); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMENT_SYM1613_tree = (Object)adaptor.create(COMMENT_SYM1613);
					adaptor.addChild(root_0, COMMENT_SYM1613_tree);
					}

					TEXT_STRING1614=(Token)match(input,TEXT_STRING,FOLLOW_TEXT_STRING_in_index_option28132); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEXT_STRING1614_tree = (Object)adaptor.create(TEXT_STRING1614);
					adaptor.addChild(root_0, TEXT_STRING1614_tree);
					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_option"


	public static class column_definitions_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "column_definitions"
	// MySQL.g:2240:1: column_definitions : column_name column_definition ( COMMA column_name column_definition )* ;
	public final MySQLParser.column_definitions_return column_definitions() throws RecognitionException {
		MySQLParser.column_definitions_return retval = new MySQLParser.column_definitions_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1617=null;
		ParserRuleReturnScope column_name1615 =null;
		ParserRuleReturnScope column_definition1616 =null;
		ParserRuleReturnScope column_name1618 =null;
		ParserRuleReturnScope column_definition1619 =null;

		Object COMMA1617_tree=null;

		try {
			// MySQL.g:2240:19: ( column_name column_definition ( COMMA column_name column_definition )* )
			// MySQL.g:2241:2: column_name column_definition ( COMMA column_name column_definition )*
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_column_name_in_column_definitions28142);
			column_name1615=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1615.getTree());

			pushFollow(FOLLOW_column_definition_in_column_definitions28144);
			column_definition1616=column_definition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1616.getTree());

			// MySQL.g:2241:32: ( COMMA column_name column_definition )*
			loop553:
			while (true) {
				int alt553=2;
				int LA553_0 = input.LA(1);
				if ( (LA553_0==COMMA) ) {
					alt553=1;
				}

				switch (alt553) {
				case 1 :
					// MySQL.g:2241:33: COMMA column_name column_definition
					{
					COMMA1617=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_definitions28147); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1617_tree = (Object)adaptor.create(COMMA1617);
					adaptor.addChild(root_0, COMMA1617_tree);
					}

					pushFollow(FOLLOW_column_name_in_column_definitions28149);
					column_name1618=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1618.getTree());

					pushFollow(FOLLOW_column_definition_in_column_definitions28151);
					column_definition1619=column_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_definition1619.getTree());

					}
					break;

				default :
					break loop553;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_definitions"


	public static class rename_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "rename_table_statement"
	// MySQL.g:2246:1: rename_table_statement : RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* ;
	public final MySQLParser.rename_table_statement_return rename_table_statement() throws RecognitionException {
		MySQLParser.rename_table_statement_return retval = new MySQLParser.rename_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token RENAME1620=null;
		Token TABLE1621=null;
		Token TO_SYM1623=null;
		Token COMMA1625=null;
		Token TO_SYM1627=null;
		ParserRuleReturnScope table_name1622 =null;
		ParserRuleReturnScope table_name1624 =null;
		ParserRuleReturnScope table_name1626 =null;
		ParserRuleReturnScope table_name1628 =null;

		Object RENAME1620_tree=null;
		Object TABLE1621_tree=null;
		Object TO_SYM1623_tree=null;
		Object COMMA1625_tree=null;
		Object TO_SYM1627_tree=null;

		try {
			// MySQL.g:2246:23: ( RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )* )
			// MySQL.g:2247:2: RENAME TABLE table_name TO_SYM table_name ( COMMA table_name TO_SYM table_name )*
			{
			root_0 = (Object)adaptor.nil();


			RENAME1620=(Token)match(input,RENAME,FOLLOW_RENAME_in_rename_table_statement28164); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			RENAME1620_tree = (Object)adaptor.create(RENAME1620);
			adaptor.addChild(root_0, RENAME1620_tree);
			}

			TABLE1621=(Token)match(input,TABLE,FOLLOW_TABLE_in_rename_table_statement28166); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1621_tree = (Object)adaptor.create(TABLE1621);
			adaptor.addChild(root_0, TABLE1621_tree);
			}

			pushFollow(FOLLOW_table_name_in_rename_table_statement28170);
			table_name1622=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1622.getTree());

			TO_SYM1623=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement28172); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TO_SYM1623_tree = (Object)adaptor.create(TO_SYM1623);
			adaptor.addChild(root_0, TO_SYM1623_tree);
			}

			pushFollow(FOLLOW_table_name_in_rename_table_statement28174);
			table_name1624=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1624.getTree());

			// MySQL.g:2249:2: ( COMMA table_name TO_SYM table_name )*
			loop554:
			while (true) {
				int alt554=2;
				int LA554_0 = input.LA(1);
				if ( (LA554_0==COMMA) ) {
					int LA554_2 = input.LA(2);
					if ( (LA554_2==ID) ) {
						alt554=1;
					}

				}

				switch (alt554) {
				case 1 :
					// MySQL.g:2249:3: COMMA table_name TO_SYM table_name
					{
					COMMA1625=(Token)match(input,COMMA,FOLLOW_COMMA_in_rename_table_statement28178); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1625_tree = (Object)adaptor.create(COMMA1625);
					adaptor.addChild(root_0, COMMA1625_tree);
					}

					pushFollow(FOLLOW_table_name_in_rename_table_statement28180);
					table_name1626=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1626.getTree());

					TO_SYM1627=(Token)match(input,TO_SYM,FOLLOW_TO_SYM_in_rename_table_statement28182); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TO_SYM1627_tree = (Object)adaptor.create(TO_SYM1627);
					adaptor.addChild(root_0, TO_SYM1627_tree);
					}

					pushFollow(FOLLOW_table_name_in_rename_table_statement28184);
					table_name1628=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1628.getTree());

					}
					break;

				default :
					break loop554;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rename_table_statement"


	public static class drop_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_table_statement"
	// MySQL.g:2254:1: drop_table_statement : DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? ;
	public final MySQLParser.drop_table_statement_return drop_table_statement() throws RecognitionException {
		MySQLParser.drop_table_statement_return retval = new MySQLParser.drop_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP1629=null;
		Token TEMPORARY1630=null;
		Token TABLE1631=null;
		Token IF1632=null;
		Token EXISTS1633=null;
		Token COMMA1635=null;
		Token set1637=null;
		ParserRuleReturnScope table_name1634 =null;
		ParserRuleReturnScope table_name1636 =null;

		Object DROP1629_tree=null;
		Object TEMPORARY1630_tree=null;
		Object TABLE1631_tree=null;
		Object IF1632_tree=null;
		Object EXISTS1633_tree=null;
		Object COMMA1635_tree=null;
		Object set1637_tree=null;

		try {
			// MySQL.g:2254:21: ( DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )? )
			// MySQL.g:2255:2: DROP ( TEMPORARY )? TABLE ( IF EXISTS )? table_name ( COMMA table_name )* ( RESTRICT | CASCADE )?
			{
			root_0 = (Object)adaptor.nil();


			DROP1629=(Token)match(input,DROP,FOLLOW_DROP_in_drop_table_statement28197); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP1629_tree = (Object)adaptor.create(DROP1629);
			adaptor.addChild(root_0, DROP1629_tree);
			}

			// MySQL.g:2255:7: ( TEMPORARY )?
			int alt555=2;
			int LA555_0 = input.LA(1);
			if ( (LA555_0==TEMPORARY) ) {
				alt555=1;
			}
			switch (alt555) {
				case 1 :
					// MySQL.g:2255:8: TEMPORARY
					{
					TEMPORARY1630=(Token)match(input,TEMPORARY,FOLLOW_TEMPORARY_in_drop_table_statement28200); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TEMPORARY1630_tree = (Object)adaptor.create(TEMPORARY1630);
					adaptor.addChild(root_0, TEMPORARY1630_tree);
					}

					}
					break;

			}

			TABLE1631=(Token)match(input,TABLE,FOLLOW_TABLE_in_drop_table_statement28204); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TABLE1631_tree = (Object)adaptor.create(TABLE1631);
			adaptor.addChild(root_0, TABLE1631_tree);
			}

			// MySQL.g:2255:26: ( IF EXISTS )?
			int alt556=2;
			int LA556_0 = input.LA(1);
			if ( (LA556_0==IF) ) {
				alt556=1;
			}
			switch (alt556) {
				case 1 :
					// MySQL.g:2255:27: IF EXISTS
					{
					IF1632=(Token)match(input,IF,FOLLOW_IF_in_drop_table_statement28207); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF1632_tree = (Object)adaptor.create(IF1632);
					adaptor.addChild(root_0, IF1632_tree);
					}

					EXISTS1633=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_table_statement28209); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS1633_tree = (Object)adaptor.create(EXISTS1633);
					adaptor.addChild(root_0, EXISTS1633_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_drop_table_statement28214);
			table_name1634=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1634.getTree());

			// MySQL.g:2256:13: ( COMMA table_name )*
			loop557:
			while (true) {
				int alt557=2;
				int LA557_0 = input.LA(1);
				if ( (LA557_0==COMMA) ) {
					int LA557_2 = input.LA(2);
					if ( (LA557_2==ID) ) {
						alt557=1;
					}

				}

				switch (alt557) {
				case 1 :
					// MySQL.g:2256:14: COMMA table_name
					{
					COMMA1635=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_table_statement28217); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1635_tree = (Object)adaptor.create(COMMA1635);
					adaptor.addChild(root_0, COMMA1635_tree);
					}

					pushFollow(FOLLOW_table_name_in_drop_table_statement28219);
					table_name1636=table_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1636.getTree());

					}
					break;

				default :
					break loop557;
				}
			}

			// MySQL.g:2257:2: ( RESTRICT | CASCADE )?
			int alt558=2;
			int LA558_0 = input.LA(1);
			if ( (LA558_0==CASCADE||LA558_0==RESTRICT) ) {
				alt558=1;
			}
			switch (alt558) {
				case 1 :
					// MySQL.g:
					{
					set1637=input.LT(1);
					if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1637));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_table_statement"


	public static class truncate_table_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "truncate_table_statement"
	// MySQL.g:2262:1: truncate_table_statement : TRUNCATE ( TABLE )? table_name ;
	public final MySQLParser.truncate_table_statement_return truncate_table_statement() throws RecognitionException {
		MySQLParser.truncate_table_statement_return retval = new MySQLParser.truncate_table_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token TRUNCATE1638=null;
		Token TABLE1639=null;
		ParserRuleReturnScope table_name1640 =null;

		Object TRUNCATE1638_tree=null;
		Object TABLE1639_tree=null;

		try {
			// MySQL.g:2262:25: ( TRUNCATE ( TABLE )? table_name )
			// MySQL.g:2263:2: TRUNCATE ( TABLE )? table_name
			{
			root_0 = (Object)adaptor.nil();


			TRUNCATE1638=(Token)match(input,TRUNCATE,FOLLOW_TRUNCATE_in_truncate_table_statement28242); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			TRUNCATE1638_tree = (Object)adaptor.create(TRUNCATE1638);
			adaptor.addChild(root_0, TRUNCATE1638_tree);
			}

			// MySQL.g:2263:11: ( TABLE )?
			int alt559=2;
			int LA559_0 = input.LA(1);
			if ( (LA559_0==TABLE) ) {
				alt559=1;
			}
			switch (alt559) {
				case 1 :
					// MySQL.g:2263:12: TABLE
					{
					TABLE1639=(Token)match(input,TABLE,FOLLOW_TABLE_in_truncate_table_statement28245); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					TABLE1639_tree = (Object)adaptor.create(TABLE1639);
					adaptor.addChild(root_0, TABLE1639_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_table_name_in_truncate_table_statement28249);
			table_name1640=table_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1640.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncate_table_statement"


	public static class create_view_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_view_statement"
	// MySQL.g:2288:1: create_view_statement : CREATE ( OR_SYM REPLACE )? create_view_body ;
	public final MySQLParser.create_view_statement_return create_view_statement() throws RecognitionException {
		MySQLParser.create_view_statement_return retval = new MySQLParser.create_view_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CREATE1641=null;
		Token OR_SYM1642=null;
		Token REPLACE1643=null;
		ParserRuleReturnScope create_view_body1644 =null;

		Object CREATE1641_tree=null;
		Object OR_SYM1642_tree=null;
		Object REPLACE1643_tree=null;

		try {
			// MySQL.g:2288:22: ( CREATE ( OR_SYM REPLACE )? create_view_body )
			// MySQL.g:2289:2: CREATE ( OR_SYM REPLACE )? create_view_body
			{
			root_0 = (Object)adaptor.nil();


			CREATE1641=(Token)match(input,CREATE,FOLLOW_CREATE_in_create_view_statement28269); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CREATE1641_tree = (Object)adaptor.create(CREATE1641);
			adaptor.addChild(root_0, CREATE1641_tree);
			}

			// MySQL.g:2289:9: ( OR_SYM REPLACE )?
			int alt560=2;
			int LA560_0 = input.LA(1);
			if ( (LA560_0==OR_SYM) ) {
				alt560=1;
			}
			switch (alt560) {
				case 1 :
					// MySQL.g:2289:10: OR_SYM REPLACE
					{
					OR_SYM1642=(Token)match(input,OR_SYM,FOLLOW_OR_SYM_in_create_view_statement28272); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OR_SYM1642_tree = (Object)adaptor.create(OR_SYM1642);
					adaptor.addChild(root_0, OR_SYM1642_tree);
					}

					REPLACE1643=(Token)match(input,REPLACE,FOLLOW_REPLACE_in_create_view_statement28274); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					REPLACE1643_tree = (Object)adaptor.create(REPLACE1643);
					adaptor.addChild(root_0, REPLACE1643_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_create_view_body_in_create_view_statement28279);
			create_view_body1644=create_view_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body1644.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_statement"


	public static class create_view_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_view_body"
	// MySQL.g:2292:1: create_view_body : ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? ;
	public final MySQLParser.create_view_body_return create_view_body() throws RecognitionException {
		MySQLParser.create_view_body_return retval = new MySQLParser.create_view_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALGORITHM_SYM1645=null;
		Token EQ_SYM1646=null;
		Token set1647=null;
		Token DEFINER1648=null;
		Token EQ_SYM1649=null;
		Token CURRENT_USER1651=null;
		Token SQL_SYM1652=null;
		Token SECURITY_SYM1653=null;
		Token set1654=null;
		Token VIEW_SYM1655=null;
		Token LPAREN1657=null;
		Token RPAREN1659=null;
		Token AS_SYM1660=null;
		Token WITH1662=null;
		Token set1663=null;
		Token CHECK_SYM1664=null;
		Token OPTION1665=null;
		ParserRuleReturnScope user_name1650 =null;
		ParserRuleReturnScope view_name1656 =null;
		ParserRuleReturnScope column_list1658 =null;
		ParserRuleReturnScope select_statement1661 =null;

		Object ALGORITHM_SYM1645_tree=null;
		Object EQ_SYM1646_tree=null;
		Object set1647_tree=null;
		Object DEFINER1648_tree=null;
		Object EQ_SYM1649_tree=null;
		Object CURRENT_USER1651_tree=null;
		Object SQL_SYM1652_tree=null;
		Object SECURITY_SYM1653_tree=null;
		Object set1654_tree=null;
		Object VIEW_SYM1655_tree=null;
		Object LPAREN1657_tree=null;
		Object RPAREN1659_tree=null;
		Object AS_SYM1660_tree=null;
		Object WITH1662_tree=null;
		Object set1663_tree=null;
		Object CHECK_SYM1664_tree=null;
		Object OPTION1665_tree=null;

		try {
			// MySQL.g:2292:17: ( ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )? )
			// MySQL.g:2293:2: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )? ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )? ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )? VIEW_SYM view_name ( LPAREN column_list RPAREN )? AS_SYM select_statement ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
			{
			root_0 = (Object)adaptor.nil();


			// MySQL.g:2293:2: ( ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM ) )?
			int alt561=2;
			int LA561_0 = input.LA(1);
			if ( (LA561_0==ALGORITHM_SYM) ) {
				alt561=1;
			}
			switch (alt561) {
				case 1 :
					// MySQL.g:2293:3: ALGORITHM_SYM EQ_SYM ( UNDEFINED_SYM | MERGE_SYM | TEMPTABLE_SYM )
					{
					ALGORITHM_SYM1645=(Token)match(input,ALGORITHM_SYM,FOLLOW_ALGORITHM_SYM_in_create_view_body28288); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					ALGORITHM_SYM1645_tree = (Object)adaptor.create(ALGORITHM_SYM1645);
					adaptor.addChild(root_0, ALGORITHM_SYM1645_tree);
					}

					EQ_SYM1646=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body28290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM1646_tree = (Object)adaptor.create(EQ_SYM1646);
					adaptor.addChild(root_0, EQ_SYM1646_tree);
					}

					set1647=input.LT(1);
					if ( input.LA(1)==MERGE_SYM||input.LA(1)==TEMPTABLE_SYM||input.LA(1)==UNDEFINED_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1647));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// MySQL.g:2294:2: ( DEFINER EQ_SYM ( user_name | CURRENT_USER ) )?
			int alt563=2;
			int LA563_0 = input.LA(1);
			if ( (LA563_0==DEFINER) ) {
				alt563=1;
			}
			switch (alt563) {
				case 1 :
					// MySQL.g:2294:3: DEFINER EQ_SYM ( user_name | CURRENT_USER )
					{
					DEFINER1648=(Token)match(input,DEFINER,FOLLOW_DEFINER_in_create_view_body28308); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DEFINER1648_tree = (Object)adaptor.create(DEFINER1648);
					adaptor.addChild(root_0, DEFINER1648_tree);
					}

					EQ_SYM1649=(Token)match(input,EQ_SYM,FOLLOW_EQ_SYM_in_create_view_body28310); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EQ_SYM1649_tree = (Object)adaptor.create(EQ_SYM1649);
					adaptor.addChild(root_0, EQ_SYM1649_tree);
					}

					// MySQL.g:2294:18: ( user_name | CURRENT_USER )
					int alt562=2;
					int LA562_0 = input.LA(1);
					if ( (LA562_0==ID) ) {
						alt562=1;
					}
					else if ( (LA562_0==CURRENT_USER) ) {
						alt562=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 562, 0, input);
						throw nvae;
					}

					switch (alt562) {
						case 1 :
							// MySQL.g:2294:19: user_name
							{
							pushFollow(FOLLOW_user_name_in_create_view_body28313);
							user_name1650=user_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, user_name1650.getTree());

							}
							break;
						case 2 :
							// MySQL.g:2294:31: CURRENT_USER
							{
							CURRENT_USER1651=(Token)match(input,CURRENT_USER,FOLLOW_CURRENT_USER_in_create_view_body28317); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							CURRENT_USER1651_tree = (Object)adaptor.create(CURRENT_USER1651);
							adaptor.addChild(root_0, CURRENT_USER1651_tree);
							}

							}
							break;

					}

					}
					break;

			}

			// MySQL.g:2295:2: ( SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM ) )?
			int alt564=2;
			int LA564_0 = input.LA(1);
			if ( (LA564_0==SQL_SYM) ) {
				alt564=1;
			}
			switch (alt564) {
				case 1 :
					// MySQL.g:2295:3: SQL_SYM SECURITY_SYM ( DEFINER | INVOKER_SYM )
					{
					SQL_SYM1652=(Token)match(input,SQL_SYM,FOLLOW_SQL_SYM_in_create_view_body28325); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SQL_SYM1652_tree = (Object)adaptor.create(SQL_SYM1652);
					adaptor.addChild(root_0, SQL_SYM1652_tree);
					}

					SECURITY_SYM1653=(Token)match(input,SECURITY_SYM,FOLLOW_SECURITY_SYM_in_create_view_body28327); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SECURITY_SYM1653_tree = (Object)adaptor.create(SECURITY_SYM1653);
					adaptor.addChild(root_0, SECURITY_SYM1653_tree);
					}

					set1654=input.LT(1);
					if ( input.LA(1)==DEFINER||input.LA(1)==INVOKER_SYM ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1654));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			VIEW_SYM1655=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_create_view_body28342); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			VIEW_SYM1655_tree = (Object)adaptor.create(VIEW_SYM1655);
			adaptor.addChild(root_0, VIEW_SYM1655_tree);
			}

			pushFollow(FOLLOW_view_name_in_create_view_body28344);
			view_name1656=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1656.getTree());

			// MySQL.g:2296:21: ( LPAREN column_list RPAREN )?
			int alt565=2;
			int LA565_0 = input.LA(1);
			if ( (LA565_0==LPAREN) ) {
				alt565=1;
			}
			switch (alt565) {
				case 1 :
					// MySQL.g:2296:22: LPAREN column_list RPAREN
					{
					LPAREN1657=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_create_view_body28347); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LPAREN1657_tree = (Object)adaptor.create(LPAREN1657);
					adaptor.addChild(root_0, LPAREN1657_tree);
					}

					pushFollow(FOLLOW_column_list_in_create_view_body28349);
					column_list1658=column_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, column_list1658.getTree());

					RPAREN1659=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_create_view_body28351); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					RPAREN1659_tree = (Object)adaptor.create(RPAREN1659);
					adaptor.addChild(root_0, RPAREN1659_tree);
					}

					}
					break;

			}

			AS_SYM1660=(Token)match(input,AS_SYM,FOLLOW_AS_SYM_in_create_view_body28356); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			AS_SYM1660_tree = (Object)adaptor.create(AS_SYM1660);
			adaptor.addChild(root_0, AS_SYM1660_tree);
			}

			pushFollow(FOLLOW_select_statement_in_create_view_body28358);
			select_statement1661=select_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1661.getTree());

			// MySQL.g:2298:2: ( WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION )?
			int alt567=2;
			int LA567_0 = input.LA(1);
			if ( (LA567_0==WITH) ) {
				alt567=1;
			}
			switch (alt567) {
				case 1 :
					// MySQL.g:2298:3: WITH ( CASCADED | LOCAL_SYM )? CHECK_SYM OPTION
					{
					WITH1662=(Token)match(input,WITH,FOLLOW_WITH_in_create_view_body28362); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					WITH1662_tree = (Object)adaptor.create(WITH1662);
					adaptor.addChild(root_0, WITH1662_tree);
					}

					// MySQL.g:2298:8: ( CASCADED | LOCAL_SYM )?
					int alt566=2;
					int LA566_0 = input.LA(1);
					if ( (LA566_0==CASCADED||LA566_0==LOCAL_SYM) ) {
						alt566=1;
					}
					switch (alt566) {
						case 1 :
							// MySQL.g:
							{
							set1663=input.LT(1);
							if ( input.LA(1)==CASCADED||input.LA(1)==LOCAL_SYM ) {
								input.consume();
								if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1663));
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					CHECK_SYM1664=(Token)match(input,CHECK_SYM,FOLLOW_CHECK_SYM_in_create_view_body28373); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHECK_SYM1664_tree = (Object)adaptor.create(CHECK_SYM1664);
					adaptor.addChild(root_0, CHECK_SYM1664_tree);
					}

					OPTION1665=(Token)match(input,OPTION,FOLLOW_OPTION_in_create_view_body28375); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					OPTION1665_tree = (Object)adaptor.create(OPTION1665);
					adaptor.addChild(root_0, OPTION1665_tree);
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_body"


	public static class alter_view_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_view_statement"
	// MySQL.g:2303:1: alter_view_statement : ALTER create_view_body ;
	public final MySQLParser.alter_view_statement_return alter_view_statement() throws RecognitionException {
		MySQLParser.alter_view_statement_return retval = new MySQLParser.alter_view_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ALTER1666=null;
		ParserRuleReturnScope create_view_body1667 =null;

		Object ALTER1666_tree=null;

		try {
			// MySQL.g:2303:21: ( ALTER create_view_body )
			// MySQL.g:2304:2: ALTER create_view_body
			{
			root_0 = (Object)adaptor.nil();


			ALTER1666=(Token)match(input,ALTER,FOLLOW_ALTER_in_alter_view_statement28388); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			ALTER1666_tree = (Object)adaptor.create(ALTER1666);
			adaptor.addChild(root_0, ALTER1666_tree);
			}

			pushFollow(FOLLOW_create_view_body_in_alter_view_statement28391);
			create_view_body1667=create_view_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view_body1667.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_view_statement"


	public static class drop_view_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_view_statement"
	// MySQL.g:2310:1: drop_view_statement : DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? ;
	public final MySQLParser.drop_view_statement_return drop_view_statement() throws RecognitionException {
		MySQLParser.drop_view_statement_return retval = new MySQLParser.drop_view_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DROP1668=null;
		Token VIEW_SYM1669=null;
		Token IF1670=null;
		Token EXISTS1671=null;
		Token COMMA1673=null;
		Token set1675=null;
		ParserRuleReturnScope view_name1672 =null;
		ParserRuleReturnScope view_name1674 =null;

		Object DROP1668_tree=null;
		Object VIEW_SYM1669_tree=null;
		Object IF1670_tree=null;
		Object EXISTS1671_tree=null;
		Object COMMA1673_tree=null;
		Object set1675_tree=null;

		try {
			// MySQL.g:2310:20: ( DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )? )
			// MySQL.g:2311:2: DROP VIEW_SYM ( IF EXISTS )? view_name ( COMMA view_name )* ( RESTRICT | CASCADE )?
			{
			root_0 = (Object)adaptor.nil();


			DROP1668=(Token)match(input,DROP,FOLLOW_DROP_in_drop_view_statement28402); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			DROP1668_tree = (Object)adaptor.create(DROP1668);
			adaptor.addChild(root_0, DROP1668_tree);
			}

			VIEW_SYM1669=(Token)match(input,VIEW_SYM,FOLLOW_VIEW_SYM_in_drop_view_statement28404); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			VIEW_SYM1669_tree = (Object)adaptor.create(VIEW_SYM1669);
			adaptor.addChild(root_0, VIEW_SYM1669_tree);
			}

			// MySQL.g:2311:16: ( IF EXISTS )?
			int alt568=2;
			int LA568_0 = input.LA(1);
			if ( (LA568_0==IF) ) {
				alt568=1;
			}
			switch (alt568) {
				case 1 :
					// MySQL.g:2311:17: IF EXISTS
					{
					IF1670=(Token)match(input,IF,FOLLOW_IF_in_drop_view_statement28407); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IF1670_tree = (Object)adaptor.create(IF1670);
					adaptor.addChild(root_0, IF1670_tree);
					}

					EXISTS1671=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_drop_view_statement28409); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EXISTS1671_tree = (Object)adaptor.create(EXISTS1671);
					adaptor.addChild(root_0, EXISTS1671_tree);
					}

					}
					break;

			}

			pushFollow(FOLLOW_view_name_in_drop_view_statement28414);
			view_name1672=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1672.getTree());

			// MySQL.g:2312:12: ( COMMA view_name )*
			loop569:
			while (true) {
				int alt569=2;
				int LA569_0 = input.LA(1);
				if ( (LA569_0==COMMA) ) {
					int LA569_2 = input.LA(2);
					if ( (LA569_2==ID) ) {
						alt569=1;
					}

				}

				switch (alt569) {
				case 1 :
					// MySQL.g:2312:13: COMMA view_name
					{
					COMMA1673=(Token)match(input,COMMA,FOLLOW_COMMA_in_drop_view_statement28417); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMMA1673_tree = (Object)adaptor.create(COMMA1673);
					adaptor.addChild(root_0, COMMA1673_tree);
					}

					pushFollow(FOLLOW_view_name_in_drop_view_statement28419);
					view_name1674=view_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, view_name1674.getTree());

					}
					break;

				default :
					break loop569;
				}
			}

			// MySQL.g:2313:2: ( RESTRICT | CASCADE )?
			int alt570=2;
			int LA570_0 = input.LA(1);
			if ( (LA570_0==CASCADE||LA570_0==RESTRICT) ) {
				alt570=1;
			}
			switch (alt570) {
				case 1 :
					// MySQL.g:
					{
					set1675=input.LT(1);
					if ( input.LA(1)==CASCADE||input.LA(1)==RESTRICT ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1675));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_view_statement"

	// $ANTLR start synpred54_MySQL
	public final void synpred54_MySQL_fragment() throws RecognitionException {
		// MySQL.g:975:2: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM ) )
		// MySQL.g:975:2: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
		{
		// MySQL.g:975:2: ( IN_SYM NATURAL LANGUAGE MODE_SYM )
		// MySQL.g:975:3: IN_SYM NATURAL LANGUAGE MODE_SYM
		{
		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred54_MySQL18665); if (state.failed) return;

		match(input,NATURAL,FOLLOW_NATURAL_in_synpred54_MySQL18667); if (state.failed) return;

		match(input,LANGUAGE,FOLLOW_LANGUAGE_in_synpred54_MySQL18669); if (state.failed) return;

		match(input,MODE_SYM,FOLLOW_MODE_SYM_in_synpred54_MySQL18671); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred54_MySQL

	// $ANTLR start synpred55_MySQL
	public final void synpred55_MySQL_fragment() throws RecognitionException {
		// MySQL.g:976:4: ( ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM ) )
		// MySQL.g:976:4: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
		{
		// MySQL.g:976:4: ( IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM )
		// MySQL.g:976:5: IN_SYM NATURAL LANGUAGE MODE_SYM WITH QUERY_SYM EXPANSION_SYM
		{
		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred55_MySQL18678); if (state.failed) return;

		match(input,NATURAL,FOLLOW_NATURAL_in_synpred55_MySQL18680); if (state.failed) return;

		match(input,LANGUAGE,FOLLOW_LANGUAGE_in_synpred55_MySQL18682); if (state.failed) return;

		match(input,MODE_SYM,FOLLOW_MODE_SYM_in_synpred55_MySQL18684); if (state.failed) return;

		match(input,WITH,FOLLOW_WITH_in_synpred55_MySQL18686); if (state.failed) return;

		match(input,QUERY_SYM,FOLLOW_QUERY_SYM_in_synpred55_MySQL18688); if (state.failed) return;

		match(input,EXPANSION_SYM,FOLLOW_EXPANSION_SYM_in_synpred55_MySQL18690); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred55_MySQL

	// $ANTLR start synpred87_MySQL
	public final void synpred87_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1036:4: ( char_functions )
		// MySQL.g:1036:4: char_functions
		{
		pushFollow(FOLLOW_char_functions_in_synpred87_MySQL18970);
		char_functions();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred87_MySQL

	// $ANTLR start synpred268_MySQL
	public final void synpred268_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1237:27: ( OR_SYM exp_factor1 )
		// MySQL.g:1237:27: OR_SYM exp_factor1
		{
		match(input,OR_SYM,FOLLOW_OR_SYM_in_synpred268_MySQL20206); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor1_in_synpred268_MySQL20208);
		exp_factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred268_MySQL

	// $ANTLR start synpred269_MySQL
	public final void synpred269_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1238:28: ( XOR exp_factor2 )
		// MySQL.g:1238:28: XOR exp_factor2
		{
		match(input,XOR,FOLLOW_XOR_in_synpred269_MySQL20222); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor2_in_synpred269_MySQL20224);
		exp_factor2();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred269_MySQL

	// $ANTLR start synpred270_MySQL
	public final void synpred270_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1239:28: ( AND_SYM exp_factor3 )
		// MySQL.g:1239:28: AND_SYM exp_factor3
		{
		match(input,AND_SYM,FOLLOW_AND_SYM_in_synpred270_MySQL20238); if (state.failed) return;

		pushFollow(FOLLOW_exp_factor3_in_synpred270_MySQL20240);
		exp_factor3();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred270_MySQL

	// $ANTLR start synpred271_MySQL
	public final void synpred271_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1240:15: ( NOT_SYM )
		// MySQL.g:1240:15: NOT_SYM
		{
		match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred271_MySQL20251); if (state.failed) return;

		}

	}
	// $ANTLR end synpred271_MySQL

	// $ANTLR start synpred274_MySQL
	public final void synpred274_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1241:29: ( IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM ) )
		// MySQL.g:1241:29: IS_SYM ( NOT_SYM )? ( boolean_literal | NULL_SYM )
		{
		match(input,IS_SYM,FOLLOW_IS_SYM_in_synpred274_MySQL20266); if (state.failed) return;

		// MySQL.g:1241:36: ( NOT_SYM )?
		int alt577=2;
		int LA577_0 = input.LA(1);
		if ( (LA577_0==NOT_SYM) ) {
			alt577=1;
		}
		switch (alt577) {
			case 1 :
				// MySQL.g:1241:37: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred274_MySQL20269); if (state.failed) return;

				}
				break;

		}

		// MySQL.g:1241:47: ( boolean_literal | NULL_SYM )
		int alt578=2;
		int LA578_0 = input.LA(1);
		if ( (LA578_0==FALSE_SYM||LA578_0==TRUE_SYM) ) {
			alt578=1;
		}
		else if ( (LA578_0==NULL_SYM) ) {
			alt578=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 578, 0, input);
			throw nvae;
		}

		switch (alt578) {
			case 1 :
				// MySQL.g:1241:48: boolean_literal
				{
				pushFollow(FOLLOW_boolean_literal_in_synpred274_MySQL20274);
				boolean_literal();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// MySQL.g:1241:64: NULL_SYM
				{
				match(input,NULL_SYM,FOLLOW_NULL_SYM_in_synpred274_MySQL20276); if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred274_MySQL

	// $ANTLR start synpred275_MySQL
	public final void synpred275_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1243:4: ( ( predicate relational_op predicate ) )
		// MySQL.g:1243:4: ( predicate relational_op predicate )
		{
		// MySQL.g:1243:4: ( predicate relational_op predicate )
		// MySQL.g:1243:6: predicate relational_op predicate
		{
		pushFollow(FOLLOW_predicate_in_synpred275_MySQL20292);
		predicate();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_relational_op_in_synpred275_MySQL20294);
		relational_op();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_predicate_in_synpred275_MySQL20296);
		predicate();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred275_MySQL

	// $ANTLR start synpred278_MySQL
	public final void synpred278_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1244:4: ( ( predicate relational_op ( ALL | ANY )? subquery ) )
		// MySQL.g:1244:4: ( predicate relational_op ( ALL | ANY )? subquery )
		{
		// MySQL.g:1244:4: ( predicate relational_op ( ALL | ANY )? subquery )
		// MySQL.g:1244:6: predicate relational_op ( ALL | ANY )? subquery
		{
		pushFollow(FOLLOW_predicate_in_synpred278_MySQL20306);
		predicate();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_relational_op_in_synpred278_MySQL20308);
		relational_op();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1244:30: ( ALL | ANY )?
		int alt579=2;
		int LA579_0 = input.LA(1);
		if ( (LA579_0==ALL||LA579_0==ANY) ) {
			alt579=1;
		}
		switch (alt579) {
			case 1 :
				// MySQL.g:
				{
				if ( input.LA(1)==ALL||input.LA(1)==ANY ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					throw mse;
				}
				}
				break;

		}

		pushFollow(FOLLOW_subquery_in_synpred278_MySQL20321);
		subquery();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred278_MySQL

	// $ANTLR start synpred280_MySQL
	public final void synpred280_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1245:4: ( ( ( NOT_SYM )? EXISTS subquery ) )
		// MySQL.g:1245:4: ( ( NOT_SYM )? EXISTS subquery )
		{
		// MySQL.g:1245:4: ( ( NOT_SYM )? EXISTS subquery )
		// MySQL.g:1245:6: ( NOT_SYM )? EXISTS subquery
		{
		// MySQL.g:1245:6: ( NOT_SYM )?
		int alt580=2;
		int LA580_0 = input.LA(1);
		if ( (LA580_0==NOT_SYM) ) {
			alt580=1;
		}
		switch (alt580) {
			case 1 :
				// MySQL.g:1245:6: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred280_MySQL20330); if (state.failed) return;

				}
				break;

		}

		match(input,EXISTS,FOLLOW_EXISTS_in_synpred280_MySQL20333); if (state.failed) return;

		pushFollow(FOLLOW_subquery_in_synpred280_MySQL20335);
		subquery();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred280_MySQL

	// $ANTLR start synpred283_MySQL
	public final void synpred283_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1249:4: ( ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) ) )
		// MySQL.g:1249:4: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
		{
		// MySQL.g:1249:4: ( bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list ) )
		// MySQL.g:1249:6: bit_expr ( NOT_SYM )? IN_SYM ( subquery | expression_list )
		{
		pushFollow(FOLLOW_bit_expr_in_synpred283_MySQL20355);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1249:15: ( NOT_SYM )?
		int alt581=2;
		int LA581_0 = input.LA(1);
		if ( (LA581_0==NOT_SYM) ) {
			alt581=1;
		}
		switch (alt581) {
			case 1 :
				// MySQL.g:1249:16: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred283_MySQL20358); if (state.failed) return;

				}
				break;

		}

		match(input,IN_SYM,FOLLOW_IN_SYM_in_synpred283_MySQL20362); if (state.failed) return;

		// MySQL.g:1249:33: ( subquery | expression_list )
		int alt582=2;
		int LA582_0 = input.LA(1);
		if ( (LA582_0==LPAREN) ) {
			int LA582_1 = input.LA(2);
			if ( (LA582_1==SELECT) ) {
				alt582=1;
			}
			else if ( (LA582_1==ABS||LA582_1==ACOS||(LA582_1 >= ADDDATE && LA582_1 <= ADDTIME)||(LA582_1 >= AES_DECRYPT && LA582_1 <= AES_ENCRYPT)||LA582_1==ASCII_SYM||LA582_1==ASIN||(LA582_1 >= ATAN && LA582_1 <= ATAN2)||LA582_1==AVG||LA582_1==BENCHMARK||(LA582_1 >= BIN && LA582_1 <= BINARY)||(LA582_1 >= BIT_AND && LA582_1 <= BIT_OR)||LA582_1==BIT_XOR||(LA582_1 >= CASE_SYM && LA582_1 <= CEILING)||LA582_1==CHAR||(LA582_1 >= CHARSET && LA582_1 <= CHAR_LENGTH)||LA582_1==COERCIBILITY||LA582_1==COLLATION||(LA582_1 >= CONCAT && LA582_1 <= CONCAT_WS)||LA582_1==CONNECTION_ID||(LA582_1 >= CONV && LA582_1 <= CONVERT_TZ)||(LA582_1 >= COS && LA582_1 <= COUNT)||LA582_1==CRC32||LA582_1==CURDATE||LA582_1==CURRENT_USER||LA582_1==CURTIME||LA582_1==DATABASE||LA582_1==DATEDIFF||(LA582_1 >= DATE_ADD && LA582_1 <= DAYOFYEAR)||(LA582_1 >= DECODE && LA582_1 <= DEFAULT)||LA582_1==DEGREES||(LA582_1 >= DES_DECRYPT && LA582_1 <= DES_ENCRYPT)||LA582_1==ELT||(LA582_1 >= ENCODE && LA582_1 <= ENCRYPT)||LA582_1==EXISTS||LA582_1==EXP||LA582_1==EXPORT_SET||LA582_1==EXTRACT||LA582_1==FALSE_SYM||LA582_1==FIELD||LA582_1==FIND_IN_SET||LA582_1==FLOOR||LA582_1==FORMAT||LA582_1==FOUND_ROWS||(LA582_1 >= FROM_BASE64 && LA582_1 <= FROM_UNIXTIME)||(LA582_1 >= GET_FORMAT && LA582_1 <= GET_LOCK)||LA582_1==GROUP_CONCAT||(LA582_1 >= HEX && LA582_1 <= HEX_DIGIT)||LA582_1==HOUR||LA582_1==ID||(LA582_1 >= IF && LA582_1 <= IFNULL)||(LA582_1 >= INET_ATON && LA582_1 <= INET_NTOA)||LA582_1==INSERT||(LA582_1 >= INSTR && LA582_1 <= INTEGER_NUM)||LA582_1==INTERVAL_SYM||LA582_1==IS_FREE_LOCK||LA582_1==IS_USED_LOCK||(LA582_1 >= LAST_DAY && LA582_1 <= LAST_INSERT_ID)||(LA582_1 >= LEFT && LA582_1 <= LENGTH)||LA582_1==LN||LA582_1==LOAD_FILE||LA582_1==LOCATE||(LA582_1 >= LOG && LA582_1 <= LOG2)||LA582_1==LOWER||(LA582_1 >= LPAD && LA582_1 <= LPAREN)||LA582_1==LTRIM||(LA582_1 >= MAKEDATE && LA582_1 <= MAKE_SET)||LA582_1==MASTER_POS_WAIT||LA582_1==MATCH||LA582_1==MAX_SYM||LA582_1==MD5||(LA582_1 >= MICROSECOND && LA582_1 <= MID)||(LA582_1 >= MINUS && LA582_1 <= MINUTE)||LA582_1==MIN_SYM||LA582_1==MOD||(LA582_1 >= MONTH && LA582_1 <= MONTHNAME)||LA582_1==NAME_CONST||LA582_1==NEGATION||(LA582_1 >= NOT_SYM && LA582_1 <= NOW)||LA582_1==NULL_SYM||LA582_1==OCT||LA582_1==OLD_PASSWORD||LA582_1==ORD||(LA582_1 >= PASSWORD && LA582_1 <= PERIOD_DIFF)||LA582_1==PI||LA582_1==PLUS||(LA582_1 >= POW && LA582_1 <= POWER)||LA582_1==QUARTER||LA582_1==QUOTE||(LA582_1 >= RADIANS && LA582_1 <= RAND)||LA582_1==REAL_NUMBER||LA582_1==RELEASE_LOCK||LA582_1==REPEAT||LA582_1==REPLACE||LA582_1==REVERSE||LA582_1==RIGHT||LA582_1==ROUND||(LA582_1 >= ROW_SYM && LA582_1 <= RPAD)||LA582_1==RTRIM||(LA582_1 >= SCHEMA && LA582_1 <= SECOND)||LA582_1==SEC_TO_TIME||LA582_1==SESSION_USER||LA582_1==SIGN||LA582_1==SIN||LA582_1==SLEEP||LA582_1==SOUNDEX||LA582_1==SPACE||LA582_1==SQRT||(LA582_1 >= STD && LA582_1 <= STDDEV_SAMP)||LA582_1==STRCMP||LA582_1==STR_TO_DATE||(LA582_1 >= SUBSTRING && LA582_1 <= SUM)||(LA582_1 >= SYSDATE && LA582_1 <= SYSTEM_USER)||LA582_1==TAN||LA582_1==TEXT_STRING||(LA582_1 >= TIMEDIFF && LA582_1 <= TIME_TO_SEC)||(LA582_1 >= TO_BASE64 && LA582_1 <= TO_SECONDS)||(LA582_1 >= TRIM && LA582_1 <= TRUNCATE)||LA582_1==UNHEX||LA582_1==UNIX_TIMESTAMP||LA582_1==UPPER||(LA582_1 >= USER && LA582_1 <= USER_VAR)||(LA582_1 >= UTC_DATE && LA582_1 <= UTC_TIMESTAMP)||LA582_1==UUID||LA582_1==VALUES||LA582_1==VARIANCE||(LA582_1 >= VAR_POP && LA582_1 <= VERSION_SYM)||(LA582_1 >= WEEK && LA582_1 <= WEIGHT_STRING)||(LA582_1 >= YEAR && LA582_1 <= YEARWEEK)) ) {
				alt582=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				int nvaeMark = input.mark();
				try {
					input.consume();
					NoViableAltException nvae =
						new NoViableAltException("", 582, 1, input);
					throw nvae;
				} finally {
					input.rewind(nvaeMark);
				}
			}

		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 582, 0, input);
			throw nvae;
		}

		switch (alt582) {
			case 1 :
				// MySQL.g:1249:34: subquery
				{
				pushFollow(FOLLOW_subquery_in_synpred283_MySQL20365);
				subquery();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// MySQL.g:1249:45: expression_list
				{
				pushFollow(FOLLOW_expression_list_in_synpred283_MySQL20369);
				expression_list();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred283_MySQL

	// $ANTLR start synpred285_MySQL
	public final void synpred285_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1250:4: ( ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate ) )
		// MySQL.g:1250:4: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
		{
		// MySQL.g:1250:4: ( bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate )
		// MySQL.g:1250:6: bit_expr ( NOT_SYM )? BETWEEN bit_expr AND_SYM predicate
		{
		pushFollow(FOLLOW_bit_expr_in_synpred285_MySQL20379);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1250:15: ( NOT_SYM )?
		int alt583=2;
		int LA583_0 = input.LA(1);
		if ( (LA583_0==NOT_SYM) ) {
			alt583=1;
		}
		switch (alt583) {
			case 1 :
				// MySQL.g:1250:16: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred285_MySQL20382); if (state.failed) return;

				}
				break;

		}

		match(input,BETWEEN,FOLLOW_BETWEEN_in_synpred285_MySQL20386); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred285_MySQL20388);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		match(input,AND_SYM,FOLLOW_AND_SYM_in_synpred285_MySQL20390); if (state.failed) return;

		pushFollow(FOLLOW_predicate_in_synpred285_MySQL20392);
		predicate();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred285_MySQL

	// $ANTLR start synpred286_MySQL
	public final void synpred286_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1251:4: ( ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr ) )
		// MySQL.g:1251:4: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
		{
		// MySQL.g:1251:4: ( bit_expr SOUNDS_SYM LIKE_SYM bit_expr )
		// MySQL.g:1251:6: bit_expr SOUNDS_SYM LIKE_SYM bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred286_MySQL20402);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		match(input,SOUNDS_SYM,FOLLOW_SOUNDS_SYM_in_synpred286_MySQL20404); if (state.failed) return;

		match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_synpred286_MySQL20406); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred286_MySQL20408);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred286_MySQL

	// $ANTLR start synpred288_MySQL
	public final void synpred288_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1252:48: ( ESCAPE_SYM simple_expr )
		// MySQL.g:1252:48: ESCAPE_SYM simple_expr
		{
		match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_synpred288_MySQL20430); if (state.failed) return;

		pushFollow(FOLLOW_simple_expr_in_synpred288_MySQL20432);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred288_MySQL

	// $ANTLR start synpred289_MySQL
	public final void synpred289_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1252:4: ( ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? ) )
		// MySQL.g:1252:4: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
		{
		// MySQL.g:1252:4: ( bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )? )
		// MySQL.g:1252:6: bit_expr ( NOT_SYM )? LIKE_SYM simple_expr ( ESCAPE_SYM simple_expr )?
		{
		pushFollow(FOLLOW_bit_expr_in_synpred289_MySQL20418);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1252:15: ( NOT_SYM )?
		int alt584=2;
		int LA584_0 = input.LA(1);
		if ( (LA584_0==NOT_SYM) ) {
			alt584=1;
		}
		switch (alt584) {
			case 1 :
				// MySQL.g:1252:16: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred289_MySQL20421); if (state.failed) return;

				}
				break;

		}

		match(input,LIKE_SYM,FOLLOW_LIKE_SYM_in_synpred289_MySQL20425); if (state.failed) return;

		pushFollow(FOLLOW_simple_expr_in_synpred289_MySQL20427);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1252:47: ( ESCAPE_SYM simple_expr )?
		int alt585=2;
		int LA585_0 = input.LA(1);
		if ( (LA585_0==ESCAPE_SYM) ) {
			alt585=1;
		}
		switch (alt585) {
			case 1 :
				// MySQL.g:1252:48: ESCAPE_SYM simple_expr
				{
				match(input,ESCAPE_SYM,FOLLOW_ESCAPE_SYM_in_synpred289_MySQL20430); if (state.failed) return;

				pushFollow(FOLLOW_simple_expr_in_synpred289_MySQL20432);
				simple_expr();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred289_MySQL

	// $ANTLR start synpred291_MySQL
	public final void synpred291_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1253:4: ( ( bit_expr ( NOT_SYM )? REGEXP bit_expr ) )
		// MySQL.g:1253:4: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
		{
		// MySQL.g:1253:4: ( bit_expr ( NOT_SYM )? REGEXP bit_expr )
		// MySQL.g:1253:6: bit_expr ( NOT_SYM )? REGEXP bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred291_MySQL20443);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1253:15: ( NOT_SYM )?
		int alt586=2;
		int LA586_0 = input.LA(1);
		if ( (LA586_0==NOT_SYM) ) {
			alt586=1;
		}
		switch (alt586) {
			case 1 :
				// MySQL.g:1253:16: NOT_SYM
				{
				match(input,NOT_SYM,FOLLOW_NOT_SYM_in_synpred291_MySQL20446); if (state.failed) return;

				}
				break;

		}

		match(input,REGEXP,FOLLOW_REGEXP_in_synpred291_MySQL20450); if (state.failed) return;

		pushFollow(FOLLOW_bit_expr_in_synpred291_MySQL20452);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred291_MySQL

	// $ANTLR start synpred292_MySQL
	public final void synpred292_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1257:12: ( VERTBAR factor1 )
		// MySQL.g:1257:12: VERTBAR factor1
		{
		match(input,VERTBAR,FOLLOW_VERTBAR_in_synpred292_MySQL20478); if (state.failed) return;

		pushFollow(FOLLOW_factor1_in_synpred292_MySQL20480);
		factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred292_MySQL

	// $ANTLR start synpred293_MySQL
	public final void synpred293_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1259:12: ( BITAND factor2 )
		// MySQL.g:1259:12: BITAND factor2
		{
		match(input,BITAND,FOLLOW_BITAND_in_synpred293_MySQL20495); if (state.failed) return;

		pushFollow(FOLLOW_factor2_in_synpred293_MySQL20497);
		factor2();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred293_MySQL

	// $ANTLR start synpred295_MySQL
	public final void synpred295_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1261:12: ( ( SHIFT_LEFT | SHIFT_RIGHT ) factor3 )
		// MySQL.g:1261:12: ( SHIFT_LEFT | SHIFT_RIGHT ) factor3
		{
		if ( (input.LA(1) >= SHIFT_LEFT && input.LA(1) <= SHIFT_RIGHT) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor3_in_synpred295_MySQL20518);
		factor3();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred295_MySQL

	// $ANTLR start synpred297_MySQL
	public final void synpred297_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1263:12: ( ( PLUS | MINUS ) factor4 )
		// MySQL.g:1263:12: ( PLUS | MINUS ) factor4
		{
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor4_in_synpred297_MySQL20539);
		factor4();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred297_MySQL

	// $ANTLR start synpred301_MySQL
	public final void synpred301_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1265:12: ( ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5 )
		// MySQL.g:1265:12: ( ASTERISK | DIVIDE | MOD_SYM | POWER_OP ) factor5
		{
		if ( input.LA(1)==ASTERISK||input.LA(1)==DIVIDE||input.LA(1)==MOD_SYM||input.LA(1)==POWER_OP ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_factor5_in_synpred301_MySQL20564);
		factor5();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred301_MySQL

	// $ANTLR start synpred303_MySQL
	public final void synpred303_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1267:12: ( ( PLUS | MINUS ) interval_expr )
		// MySQL.g:1267:12: ( PLUS | MINUS ) interval_expr
		{
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_interval_expr_in_synpred303_MySQL20585);
		interval_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred303_MySQL

	// $ANTLR start synpred307_MySQL
	public final void synpred307_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1269:2: ( ( PLUS | MINUS | NEGATION | BINARY ) simple_expr )
		// MySQL.g:1269:2: ( PLUS | MINUS | NEGATION | BINARY ) simple_expr
		{
		if ( input.LA(1)==BINARY||input.LA(1)==MINUS||input.LA(1)==NEGATION||input.LA(1)==PLUS ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		pushFollow(FOLLOW_simple_expr_in_synpred307_MySQL20612);
		simple_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred307_MySQL

	// $ANTLR start synpred324_MySQL
	public final void synpred324_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1293:4: ( ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN ) )
		// MySQL.g:1293:4: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
		{
		// MySQL.g:1293:4: ( CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN )
		// MySQL.g:1293:7: CONVERT_SYM LPAREN expression COMMA cast_data_type RPAREN
		{
		match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_synpred324_MySQL20769); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred324_MySQL20771); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred324_MySQL20773);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,COMMA,FOLLOW_COMMA_in_synpred324_MySQL20775); if (state.failed) return;

		pushFollow(FOLLOW_cast_data_type_in_synpred324_MySQL20777);
		cast_data_type();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred324_MySQL20779); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred324_MySQL

	// $ANTLR start synpred325_MySQL
	public final void synpred325_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1294:4: ( ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN ) )
		// MySQL.g:1294:4: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
		{
		// MySQL.g:1294:4: ( CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN )
		// MySQL.g:1294:7: CONVERT_SYM LPAREN expression USING_SYM transcoding_name RPAREN
		{
		match(input,CONVERT_SYM,FOLLOW_CONVERT_SYM_in_synpred325_MySQL20790); if (state.failed) return;

		match(input,LPAREN,FOLLOW_LPAREN_in_synpred325_MySQL20792); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred325_MySQL20794);
		expression();
		state._fsp--;
		if (state.failed) return;

		match(input,USING_SYM,FOLLOW_USING_SYM_in_synpred325_MySQL20796); if (state.failed) return;

		pushFollow(FOLLOW_transcoding_name_in_synpred325_MySQL20798);
		transcoding_name();
		state._fsp--;
		if (state.failed) return;

		match(input,RPAREN,FOLLOW_RPAREN_in_synpred325_MySQL20800); if (state.failed) return;

		}

		}

	}
	// $ANTLR end synpred325_MySQL

	// $ANTLR start synpred335_MySQL
	public final void synpred335_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1315:65: ( search_modifier )
		// MySQL.g:1315:65: search_modifier
		{
		pushFollow(FOLLOW_search_modifier_in_synpred335_MySQL21013);
		search_modifier();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred335_MySQL

	// $ANTLR start synpred340_MySQL
	public final void synpred340_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1338:2: ( table_factor1 )
		// MySQL.g:1338:2: table_factor1
		{
		pushFollow(FOLLOW_table_factor1_in_synpred340_MySQL21119);
		table_factor1();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred340_MySQL

	// $ANTLR start synpred343_MySQL
	public final void synpred343_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1341:61: ( join_condition )
		// MySQL.g:1341:61: join_condition
		{
		pushFollow(FOLLOW_join_condition_in_synpred343_MySQL21150);
		join_condition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred343_MySQL

	// $ANTLR start synpred345_MySQL
	public final void synpred345_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1344:45: ( ON expression )
		// MySQL.g:1344:45: ON expression
		{
		match(input,ON,FOLLOW_ON_in_synpred345_MySQL21174); if (state.failed) return;

		pushFollow(FOLLOW_expression_in_synpred345_MySQL21176);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred345_MySQL

	// $ANTLR start synpred349_MySQL
	public final void synpred349_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1347:19: ( ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition )
		// MySQL.g:1347:19: ( LEFT | RIGHT ) ( OUTER )? JOIN_SYM table_factor4 join_condition
		{
		if ( input.LA(1)==LEFT||input.LA(1)==RIGHT ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		// MySQL.g:1347:32: ( OUTER )?
		int alt597=2;
		int LA597_0 = input.LA(1);
		if ( (LA597_0==OUTER) ) {
			alt597=1;
		}
		switch (alt597) {
			case 1 :
				// MySQL.g:1347:33: OUTER
				{
				match(input,OUTER,FOLLOW_OUTER_in_synpred349_MySQL21202); if (state.failed) return;

				}
				break;

		}

		match(input,JOIN_SYM,FOLLOW_JOIN_SYM_in_synpred349_MySQL21206); if (state.failed) return;

		pushFollow(FOLLOW_table_factor4_in_synpred349_MySQL21208);
		table_factor4();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_join_condition_in_synpred349_MySQL21210);
		join_condition();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred349_MySQL

	// $ANTLR start synpred354_MySQL
	public final void synpred354_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1353:18: ( partition_clause )
		// MySQL.g:1353:18: partition_clause
		{
		pushFollow(FOLLOW_partition_clause_in_synpred354_MySQL21265);
		partition_clause();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred354_MySQL

	// $ANTLR start synpred373_MySQL
	public final void synpred373_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1389:3: ( SEMI )
		// MySQL.g:1389:3: SEMI
		{
		match(input,SEMI,FOLLOW_SEMI_in_synpred373_MySQL21541); if (state.failed) return;

		}

	}
	// $ANTLR end synpred373_MySQL

	// $ANTLR start synpred425_MySQL
	public final void synpred425_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1509:15: ( column_spec )
		// MySQL.g:1509:15: column_spec
		{
		pushFollow(FOLLOW_column_spec_in_synpred425_MySQL21997);
		column_spec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred425_MySQL

	// $ANTLR start synpred426_MySQL
	public final void synpred426_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1509:29: ( INTEGER_NUM )
		// MySQL.g:1509:29: INTEGER_NUM
		{
		match(input,INTEGER_NUM,FOLLOW_INTEGER_NUM_in_synpred426_MySQL22001); if (state.failed) return;

		}

	}
	// $ANTLR end synpred426_MySQL

	// $ANTLR start synpred432_MySQL
	public final void synpred432_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1527:25: ( COMMA displayed_column )
		// MySQL.g:1527:25: COMMA displayed_column
		{
		match(input,COMMA,FOLLOW_COMMA_in_synpred432_MySQL22114); if (state.failed) return;

		pushFollow(FOLLOW_displayed_column_in_synpred432_MySQL22116);
		displayed_column();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred432_MySQL

	// $ANTLR start synpred438_MySQL
	public final void synpred438_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1546:2: ( ( column_spec ( alias )? ) )
		// MySQL.g:1546:2: ( column_spec ( alias )? )
		{
		// MySQL.g:1546:2: ( column_spec ( alias )? )
		// MySQL.g:1546:4: column_spec ( alias )?
		{
		pushFollow(FOLLOW_column_spec_in_synpred438_MySQL22205);
		column_spec();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:1546:16: ( alias )?
		int alt613=2;
		int LA613_0 = input.LA(1);
		if ( (LA613_0==AS_SYM||LA613_0==ID) ) {
			alt613=1;
		}
		switch (alt613) {
			case 1 :
				// MySQL.g:1546:17: alias
				{
				pushFollow(FOLLOW_alias_in_synpred438_MySQL22208);
				alias();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred438_MySQL

	// $ANTLR start synpred469_MySQL
	public final void synpred469_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1606:28: ( bit_expr )
		// MySQL.g:1606:28: bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred469_MySQL22533);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred469_MySQL

	// $ANTLR start synpred470_MySQL
	public final void synpred470_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1606:54: ( bit_expr )
		// MySQL.g:1606:54: bit_expr
		{
		pushFollow(FOLLOW_bit_expr_in_synpred470_MySQL22542);
		bit_expr();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred470_MySQL

	// $ANTLR start synpred474_MySQL
	public final void synpred474_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1614:40: ( expression )
		// MySQL.g:1614:40: expression
		{
		pushFollow(FOLLOW_expression_in_synpred474_MySQL22599);
		expression();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred474_MySQL

	// $ANTLR start synpred477_MySQL
	public final void synpred477_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1631:2: ( single_table_update_statement )
		// MySQL.g:1631:2: single_table_update_statement
		{
		pushFollow(FOLLOW_single_table_update_statement_in_synpred477_MySQL22646);
		single_table_update_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred477_MySQL

	// $ANTLR start synpred489_MySQL
	public final void synpred489_MySQL_fragment() throws RecognitionException {
		// MySQL.g:1665:25: ( COMMA root_statement )
		// MySQL.g:1665:25: COMMA root_statement
		{
		match(input,COMMA,FOLLOW_COMMA_in_synpred489_MySQL22781); if (state.failed) return;

		pushFollow(FOLLOW_root_statement_in_synpred489_MySQL22783);
		root_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred489_MySQL

	// $ANTLR start synpred858_MySQL
	public final void synpred858_MySQL_fragment() throws RecognitionException {
		// MySQL.g:2098:16: ( ( COMMA )? table_option )
		// MySQL.g:2098:16: ( COMMA )? table_option
		{
		// MySQL.g:2098:16: ( COMMA )?
		int alt786=2;
		int LA786_0 = input.LA(1);
		if ( (LA786_0==COMMA) ) {
			alt786=1;
		}
		switch (alt786) {
			case 1 :
				// MySQL.g:2098:18: COMMA
				{
				match(input,COMMA,FOLLOW_COMMA_in_synpred858_MySQL26178); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_table_option_in_synpred858_MySQL26183);
		table_option();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred858_MySQL

	// $ANTLR start synpred963_MySQL
	public final void synpred963_MySQL_fragment() throws RecognitionException {
		// MySQL.g:2185:4: ( table_options )
		// MySQL.g:2185:4: table_options
		{
		pushFollow(FOLLOW_table_options_in_synpred963_MySQL27193);
		table_options();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred963_MySQL

	// $ANTLR start synpred1042_MySQL
	public final void synpred1042_MySQL_fragment() throws RecognitionException {
		// MySQL.g:2212:4: ( ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? ) )
		// MySQL.g:2212:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
		{
		// MySQL.g:2212:4: ( ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )? )
		// MySQL.g:2212:6: ( DEFAULT )? CHARACTER_SYM SET_SYM ( EQ_SYM )? charset_name ( COLLATE_SYM ( EQ_SYM )? collation_name )?
		{
		// MySQL.g:2212:6: ( DEFAULT )?
		int alt879=2;
		int LA879_0 = input.LA(1);
		if ( (LA879_0==DEFAULT) ) {
			alt879=1;
		}
		switch (alt879) {
			case 1 :
				// MySQL.g:2212:7: DEFAULT
				{
				match(input,DEFAULT,FOLLOW_DEFAULT_in_synpred1042_MySQL27781); if (state.failed) return;

				}
				break;

		}

		match(input,CHARACTER_SYM,FOLLOW_CHARACTER_SYM_in_synpred1042_MySQL27785); if (state.failed) return;

		match(input,SET_SYM,FOLLOW_SET_SYM_in_synpred1042_MySQL27787); if (state.failed) return;

		// MySQL.g:2212:39: ( EQ_SYM )?
		int alt880=2;
		int LA880_0 = input.LA(1);
		if ( (LA880_0==EQ_SYM) ) {
			alt880=1;
		}
		switch (alt880) {
			case 1 :
				// MySQL.g:2212:40: EQ_SYM
				{
				match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred1042_MySQL27790); if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_charset_name_in_synpred1042_MySQL27794);
		charset_name();
		state._fsp--;
		if (state.failed) return;

		// MySQL.g:2212:62: ( COLLATE_SYM ( EQ_SYM )? collation_name )?
		int alt882=2;
		int LA882_0 = input.LA(1);
		if ( (LA882_0==COLLATE_SYM) ) {
			alt882=1;
		}
		switch (alt882) {
			case 1 :
				// MySQL.g:2212:63: COLLATE_SYM ( EQ_SYM )? collation_name
				{
				match(input,COLLATE_SYM,FOLLOW_COLLATE_SYM_in_synpred1042_MySQL27797); if (state.failed) return;

				// MySQL.g:2212:75: ( EQ_SYM )?
				int alt881=2;
				int LA881_0 = input.LA(1);
				if ( (LA881_0==EQ_SYM) ) {
					alt881=1;
				}
				switch (alt881) {
					case 1 :
						// MySQL.g:2212:76: EQ_SYM
						{
						match(input,EQ_SYM,FOLLOW_EQ_SYM_in_synpred1042_MySQL27800); if (state.failed) return;

						}
						break;

				}

				pushFollow(FOLLOW_collation_name_in_synpred1042_MySQL27804);
				collation_name();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

		}

	}
	// $ANTLR end synpred1042_MySQL

	// Delegated rules

	public final boolean synpred297_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred297_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred432_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred432_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred470_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred470_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred349_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred349_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred87_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred87_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred469_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred469_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred292_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred292_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred307_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred307_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred301_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred301_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred489_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred489_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred858_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred858_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred474_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred474_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1042_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1042_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred289_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred289_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred324_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred324_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred354_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred354_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred269_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred269_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred274_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred274_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred963_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred963_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred477_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred477_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred291_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred291_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred438_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred438_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred268_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred268_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred278_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred278_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred288_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred288_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred271_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred271_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred286_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred286_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred325_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred325_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred425_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred425_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred345_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred345_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred285_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred285_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred335_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred335_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred340_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred340_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred275_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred275_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred295_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred295_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred283_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred283_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred293_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred293_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred426_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred426_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred270_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred270_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred280_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred280_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred373_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred373_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred303_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred303_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred343_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred343_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_MySQL() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred55_MySQL_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA66 dfa66 = new DFA66(this);
	protected DFA131 dfa131 = new DFA131(this);
	protected DFA201 dfa201 = new DFA201(this);
	protected DFA426 dfa426 = new DFA426(this);
	static final String DFA66_eotS =
		"\12\uffff";
	static final String DFA66_eofS =
		"\1\2\11\uffff";
	static final String DFA66_minS =
		"\1\36\1\u0178\1\uffff\1\u011e\1\137\1\u011e\1\0\1\137\1\uffff\1\0";
	static final String DFA66_maxS =
		"\1\u02fa\1\u0178\1\uffff\1\u011e\1\u023a\1\u011e\1\0\1\u023a\1\uffff\1"+
		"\0";
	static final String DFA66_acceptS =
		"\2\uffff\1\2\5\uffff\1\1\1\uffff";
	static final String DFA66_specialS =
		"\6\uffff\1\0\2\uffff\1\1}>";
	static final String[] DFA66_transitionS = {
			"\1\2\100\uffff\1\2\46\uffff\1\2\150\uffff\1\2\2\uffff\1\2\27\uffff\1"+
			"\2\4\uffff\1\2\16\uffff\1\2\3\uffff\1\2\7\uffff\1\2\7\uffff\1\2\17\uffff"+
			"\1\2\27\uffff\1\2\5\uffff\1\2\11\uffff\1\2\121\uffff\1\2\24\uffff\1\2"+
			"\10\uffff\1\2\15\uffff\1\1\110\uffff\1\2\10\uffff\1\2\13\uffff\1\2\7"+
			"\uffff\1\2\62\uffff\1\2\104\uffff\1\2\21\uffff\2\2\35\uffff\1\2\2\uffff"+
			"\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5\u01da\uffff\1\6",
			"\1\7",
			"\1\uffff",
			"\1\5\u01da\uffff\1\11",
			"",
			"\1\uffff"
	};

	static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
	static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
	static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
	static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
	static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
	static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
	static final short[][] DFA66_transition;

	static {
		int numStates = DFA66_transitionS.length;
		DFA66_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
		}
	}

	protected class DFA66 extends DFA {

		public DFA66(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}
		@Override
		public String getDescription() {
			return "1353:17: ( partition_clause )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA66_6 = input.LA(1);
						 
						int index66_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred354_MySQL()) ) {s = 8;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index66_6);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA66_9 = input.LA(1);
						 
						int index66_9 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred354_MySQL()) ) {s = 8;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index66_9);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 66, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA131_eotS =
		"\36\uffff";
	static final String DFA131_eofS =
		"\36\uffff";
	static final String DFA131_minS =
		"\1\u012e\1\u0115\3\u011e\1\u00b7\1\u011e\1\u0178\1\u011e\3\uffff\1\u0178"+
		"\1\u011e\2\137\2\u011e\1\u0245\1\u011e\1\u0178\3\137\2\u011e\2\137\1\u011e"+
		"\1\137";
	static final String DFA131_maxS =
		"\1\u012e\1\u0176\2\u0135\1\u011e\1\u02e4\1\u011e\1\u0178\1\u011e\3\uffff"+
		"\1\u02e4\1\u011e\2\u023a\2\u011e\1\u02e4\1\u011e\1\u02e4\3\u023a\2\u011e"+
		"\2\u023a\1\u011e\1\u023a";
	static final String DFA131_acceptS =
		"\11\uffff\1\1\1\2\1\3\22\uffff";
	static final String DFA131_specialS =
		"\36\uffff}>";
	static final String[] DFA131_transitionS = {
			"\1\1",
			"\1\2\10\uffff\1\5\3\uffff\1\3\22\uffff\1\4\100\uffff\1\2",
			"\1\5\3\uffff\1\3\22\uffff\1\4",
			"\1\5\26\uffff\1\4",
			"\1\5",
			"\1\6\u00c0\uffff\1\10\157\uffff\1\7\134\uffff\1\13\10\uffff\1\12\u0094"+
			"\uffff\2\11",
			"\1\14",
			"\1\15",
			"\1\16",
			"",
			"",
			"",
			"\1\10\157\uffff\1\7\134\uffff\1\13\10\uffff\1\12\u0094\uffff\2\11",
			"\1\17",
			"\1\21\127\uffff\1\20\u0182\uffff\1\22",
			"\1\23\u01da\uffff\1\24",
			"\1\25",
			"\1\26",
			"\1\13\u009d\uffff\2\11",
			"\1\27",
			"\1\10\u00cc\uffff\1\13\10\uffff\1\12\u0094\uffff\2\11",
			"\1\21\127\uffff\1\30\u0182\uffff\1\22",
			"\1\21\127\uffff\1\31\u0182\uffff\1\22",
			"\1\23\u01da\uffff\1\24",
			"\1\32",
			"\1\33",
			"\1\21\u01da\uffff\1\22",
			"\1\21\127\uffff\1\34\u0182\uffff\1\22",
			"\1\35",
			"\1\21\u01da\uffff\1\22"
	};

	static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
	static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
	static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
	static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
	static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
	static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
	static final short[][] DFA131_transition;

	static {
		int numStates = DFA131_transitionS.length;
		DFA131_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
		}
	}

	protected class DFA131 extends DFA {

		public DFA131(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 131;
			this.eot = DFA131_eot;
			this.eof = DFA131_eof;
			this.min = DFA131_min;
			this.max = DFA131_max;
			this.accept = DFA131_accept;
			this.special = DFA131_special;
			this.transition = DFA131_transition;
		}
		@Override
		public String getDescription() {
			return "1585:1: insert_statements : ( insert_statement1 | insert_statement2 | insert_statement3 );";
		}
	}

	static final String DFA201_eotS =
		"\21\uffff";
	static final String DFA201_eofS =
		"\21\uffff";
	static final String DFA201_minS =
		"\1\u0178\1\u011e\3\uffff\1\137\2\u011e\1\u0245\2\137\2\u011e\2\137\1\u011e"+
		"\1\137";
	static final String DFA201_maxS =
		"\1\u02e4\1\u011e\3\uffff\1\u023a\2\u011e\1\u02e4\2\u023a\2\u011e\2\u023a"+
		"\1\u011e\1\u023a";
	static final String DFA201_acceptS =
		"\2\uffff\1\1\1\2\1\3\14\uffff";
	static final String DFA201_specialS =
		"\21\uffff}>";
	static final String[] DFA201_transitionS = {
			"\1\1\u00cc\uffff\1\4\10\uffff\1\3\u0094\uffff\2\2",
			"\1\5",
			"",
			"",
			"",
			"\1\7\127\uffff\1\6\u0182\uffff\1\10",
			"\1\11",
			"\1\12",
			"\1\4\u009d\uffff\2\2",
			"\1\7\127\uffff\1\13\u0182\uffff\1\10",
			"\1\7\127\uffff\1\14\u0182\uffff\1\10",
			"\1\15",
			"\1\16",
			"\1\7\u01da\uffff\1\10",
			"\1\7\127\uffff\1\17\u0182\uffff\1\10",
			"\1\20",
			"\1\7\u01da\uffff\1\10"
	};

	static final short[] DFA201_eot = DFA.unpackEncodedString(DFA201_eotS);
	static final short[] DFA201_eof = DFA.unpackEncodedString(DFA201_eofS);
	static final char[] DFA201_min = DFA.unpackEncodedStringToUnsignedChars(DFA201_minS);
	static final char[] DFA201_max = DFA.unpackEncodedStringToUnsignedChars(DFA201_maxS);
	static final short[] DFA201_accept = DFA.unpackEncodedString(DFA201_acceptS);
	static final short[] DFA201_special = DFA.unpackEncodedString(DFA201_specialS);
	static final short[][] DFA201_transition;

	static {
		int numStates = DFA201_transitionS.length;
		DFA201_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA201_transition[i] = DFA.unpackEncodedString(DFA201_transitionS[i]);
		}
	}

	protected class DFA201 extends DFA {

		public DFA201(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}
		@Override
		public String getDescription() {
			return "1757:2: ( replace_statement1 | replace_statement2 | replace_statement3 )";
		}
	}

	static final String DFA426_eotS =
		"\140\uffff";
	static final String DFA426_eofS =
		"\1\1\137\uffff";
	static final String DFA426_minS =
		"\1\44\1\uffff\1\12\1\uffff\3\u00cd\1\116\1\u024e\4\u00cd\1\u00b0\1\u00cd"+
		"\1\u00b0\4\u00cd\1\u00a5\1\u00cd\1\143\2\u00a5\1\u00cd\1\u011e\1\0\1\u0132"+
		"\1\0\1\u0132\1\0\1\27\1\u0132\1\0\1\u011e\1\0\1\u029c\1\0\1\u029c\1\0"+
		"\1\u00cd\1\u0132\1\0\1\u00cd\1\u00ea\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132"+
		"\1\0\1\u00a5\1\0\1\u029c\1\0\1\143\1\0\1\u00a5\1\0\1\u00a5\1\0\1\u0178"+
		"\1\u011e\3\0\1\27\5\0\1\u029c\2\0\1\u029c\12\0\1\137\3\0\1\u011e\1\0\1"+
		"\137\1\0";
	static final String DFA426_maxS =
		"\1\u02c6\1\uffff\1\u02cd\1\uffff\1\u011e\2\u0132\1\131\1\u024e\1\u0132"+
		"\1\u011e\2\u029c\1\u00b0\1\u0132\1\u00b0\1\u01c6\4\u0132\1\u029c\1\u0217"+
		"\2\u0132\1\u0178\1\u011e\1\0\1\u0132\1\0\1\u0132\1\0\1\u02e0\1\u0132\1"+
		"\0\1\u011e\1\0\1\u029c\1\0\1\u029c\1\0\1\u029c\1\u0132\1\0\1\u029c\1\u01c6"+
		"\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132\1\0\1\u0132\1\0\1\u029c\1\0\1\u0217"+
		"\1\0\1\u0132\1\0\1\u0132\1\0\1\u0178\1\u011e\3\0\1\u02e0\5\0\1\u029c\2"+
		"\0\1\u029c\12\0\1\u023a\3\0\1\u011e\1\0\1\u023a\1\0";
	static final String DFA426_acceptS =
		"\1\uffff\1\2\1\uffff\1\1\134\uffff";
	static final String DFA426_specialS =
		"\33\uffff\1\30\1\uffff\1\10\1\uffff\1\36\2\uffff\1\32\1\uffff\1\12\1\uffff"+
		"\1\14\1\uffff\1\40\2\uffff\1\20\2\uffff\1\6\1\uffff\1\26\1\uffff\1\46"+
		"\1\uffff\1\4\1\uffff\1\24\1\uffff\1\44\1\uffff\1\0\1\uffff\1\21\1\uffff"+
		"\1\42\2\uffff\1\31\1\11\1\37\1\uffff\1\34\1\33\1\13\1\15\1\41\1\uffff"+
		"\1\1\1\22\1\uffff\1\50\1\7\1\27\1\47\1\5\1\25\1\45\1\2\1\23\1\43\1\uffff"+
		"\1\35\1\3\1\51\1\uffff\1\16\1\uffff\1\17}>";
	static final String[] DFA426_transitionS = {
			"\1\3\1\uffff\1\3\47\uffff\1\3\2\uffff\1\3\7\uffff\1\3\5\uffff\1\2\1\3"+
			"\13\uffff\1\3\43\uffff\1\3\24\uffff\1\3\3\uffff\1\3\41\uffff\1\3\131"+
			"\uffff\1\3\11\uffff\1\3\26\uffff\1\3\117\uffff\1\3\22\uffff\1\3\67\uffff"+
			"\1\3\6\uffff\1\1\1\3\115\uffff\1\3\15\uffff\2\1\61\uffff\2\3\114\uffff"+
			"\1\3",
			"",
			"\1\1\5\uffff\1\1\2\uffff\2\1\17\uffff\1\5\1\uffff\1\6\34\uffff\1\1\7"+
			"\uffff\1\1\2\uffff\1\10\2\uffff\1\11\1\1\3\uffff\1\1\2\uffff\1\12\6\uffff"+
			"\1\13\13\uffff\1\14\7\uffff\1\1\17\uffff\1\1\13\uffff\1\15\24\uffff\1"+
			"\7\3\uffff\1\16\1\1\6\uffff\2\1\6\uffff\2\1\11\uffff\1\1\6\uffff\1\4"+
			"\12\uffff\1\1\30\uffff\1\1\35\uffff\1\1\25\uffff\1\1\1\uffff\1\17\10"+
			"\uffff\1\1\1\20\26\uffff\1\21\37\uffff\1\1\3\uffff\1\1\53\uffff\1\22"+
			"\22\uffff\1\23\5\uffff\1\1\45\uffff\1\1\4\uffff\1\1\6\uffff\1\24\7\uffff"+
			"\1\25\51\uffff\1\1\13\uffff\4\1\2\uffff\1\1\21\uffff\1\26\15\uffff\1"+
			"\1\14\uffff\1\1\45\uffff\1\27\1\30\74\uffff\1\1\17\uffff\1\31\6\uffff"+
			"\1\1",
			"",
			"\1\32\120\uffff\1\33",
			"\1\34\144\uffff\1\35",
			"\1\36\144\uffff\1\37",
			"\1\10\12\uffff\1\12",
			"\1\40",
			"\1\41\144\uffff\1\42",
			"\1\43\120\uffff\1\44",
			"\1\45\u01ce\uffff\1\46",
			"\1\47\u01ce\uffff\1\50",
			"\1\51",
			"\1\52\144\uffff\1\53",
			"\1\54",
			"\1\55\34\uffff\1\56\144\uffff\1\56\166\uffff\1\56",
			"\1\57\144\uffff\1\60",
			"\1\61\144\uffff\1\62",
			"\1\63\144\uffff\1\64",
			"\1\66\47\uffff\1\65\144\uffff\1\66",
			"\1\67\u01ce\uffff\1\70",
			"\1\72\2\uffff\1\72\76\uffff\1\72\30\uffff\1\72\16\uffff\1\71\35\uffff"+
			"\1\72\u012b\uffff\1\72",
			"\1\74\47\uffff\1\73\144\uffff\1\74",
			"\1\76\47\uffff\1\75\144\uffff\1\76",
			"\1\77\u00aa\uffff\1\100",
			"\1\101",
			"\1\uffff",
			"\1\102",
			"\1\uffff",
			"\1\103",
			"\1\uffff",
			"\1\105\2\uffff\1\105\22\uffff\1\105\2\uffff\1\105\111\uffff\10\105\37"+
			"\uffff\1\105\53\uffff\1\104\3\uffff\2\105\52\uffff\2\105\2\uffff\1\105"+
			"\6\uffff\1\105\7\uffff\1\105\13\uffff\1\105\47\uffff\1\105\4\uffff\2"+
			"\105\5\uffff\1\105\2\uffff\3\105\46\uffff\2\105\u00dc\uffff\1\105\64"+
			"\uffff\1\105\32\uffff\1\105\17\uffff\2\105\44\uffff\1\105",
			"\1\106",
			"\1\uffff",
			"\1\107",
			"\1\uffff",
			"\1\110",
			"\1\uffff",
			"\1\111",
			"\1\uffff",
			"\1\112\u01ce\uffff\1\113",
			"\1\114",
			"\1\uffff",
			"\1\115\u01ce\uffff\1\116",
			"\1\117\144\uffff\1\117\166\uffff\1\117",
			"\1\uffff",
			"\1\120",
			"\1\uffff",
			"\1\121",
			"\1\uffff",
			"\1\122",
			"\1\uffff",
			"\1\123\u008c\uffff\1\123",
			"\1\uffff",
			"\1\124",
			"\1\uffff",
			"\1\125\2\uffff\1\125\76\uffff\1\125\30\uffff\1\125\54\uffff\1\125\u012b"+
			"\uffff\1\125",
			"\1\uffff",
			"\1\126\u008c\uffff\1\126",
			"\1\uffff",
			"\1\127\u008c\uffff\1\127",
			"\1\uffff",
			"\1\100",
			"\1\130",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\131\2\uffff\1\131\22\uffff\1\131\2\uffff\1\131\111\uffff\10\131\37"+
			"\uffff\1\131\57\uffff\2\131\52\uffff\2\131\2\uffff\1\131\6\uffff\1\131"+
			"\7\uffff\1\131\13\uffff\1\131\47\uffff\1\131\4\uffff\2\131\5\uffff\1"+
			"\131\2\uffff\3\131\46\uffff\2\131\u00dc\uffff\1\131\64\uffff\1\131\32"+
			"\uffff\1\131\17\uffff\2\131\44\uffff\1\131",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\132",
			"\1\uffff",
			"\1\uffff",
			"\1\133",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\134\u01da\uffff\1\135",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\136",
			"\1\uffff",
			"\1\134\u01da\uffff\1\137",
			"\1\uffff"
	};

	static final short[] DFA426_eot = DFA.unpackEncodedString(DFA426_eotS);
	static final short[] DFA426_eof = DFA.unpackEncodedString(DFA426_eofS);
	static final char[] DFA426_min = DFA.unpackEncodedStringToUnsignedChars(DFA426_minS);
	static final char[] DFA426_max = DFA.unpackEncodedStringToUnsignedChars(DFA426_maxS);
	static final short[] DFA426_accept = DFA.unpackEncodedString(DFA426_acceptS);
	static final short[] DFA426_special = DFA.unpackEncodedString(DFA426_specialS);
	static final short[][] DFA426_transition;

	static {
		int numStates = DFA426_transitionS.length;
		DFA426_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA426_transition[i] = DFA.unpackEncodedString(DFA426_transitionS[i]);
		}
	}

	protected class DFA426 extends DFA {

		public DFA426(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 426;
			this.eot = DFA426_eot;
			this.eof = DFA426_eof;
			this.min = DFA426_min;
			this.max = DFA426_max;
			this.accept = DFA426_accept;
			this.special = DFA426_special;
			this.transition = DFA426_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 2098:15: ( ( COMMA )? table_option )*";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA426_58 = input.LA(1);
						 
						int index426_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_58);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA426_75 = input.LA(1);
						 
						int index426_75 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_75);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA426_85 = input.LA(1);
						 
						int index426_85 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_85);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA426_90 = input.LA(1);
						 
						int index426_90 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_90);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA426_52 = input.LA(1);
						 
						int index426_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_52);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA426_82 = input.LA(1);
						 
						int index426_82 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_82);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA426_46 = input.LA(1);
						 
						int index426_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_46);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA426_79 = input.LA(1);
						 
						int index426_79 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_79);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA426_29 = input.LA(1);
						 
						int index426_29 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_29);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA426_66 = input.LA(1);
						 
						int index426_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_66);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA426_36 = input.LA(1);
						 
						int index426_36 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_36);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA426_71 = input.LA(1);
						 
						int index426_71 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_71);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA426_38 = input.LA(1);
						 
						int index426_38 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_38);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA426_72 = input.LA(1);
						 
						int index426_72 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_72);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA426_93 = input.LA(1);
						 
						int index426_93 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_93);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA426_95 = input.LA(1);
						 
						int index426_95 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_95);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA426_43 = input.LA(1);
						 
						int index426_43 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_43);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA426_60 = input.LA(1);
						 
						int index426_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_60);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA426_76 = input.LA(1);
						 
						int index426_76 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_76);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA426_86 = input.LA(1);
						 
						int index426_86 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_86);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA426_54 = input.LA(1);
						 
						int index426_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_54);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA426_83 = input.LA(1);
						 
						int index426_83 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_83);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA426_48 = input.LA(1);
						 
						int index426_48 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_48);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA426_80 = input.LA(1);
						 
						int index426_80 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_80);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA426_27 = input.LA(1);
						 
						int index426_27 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_27);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA426_65 = input.LA(1);
						 
						int index426_65 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_65);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA426_34 = input.LA(1);
						 
						int index426_34 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_34);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA426_70 = input.LA(1);
						 
						int index426_70 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_70);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA426_69 = input.LA(1);
						 
						int index426_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_69);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA426_89 = input.LA(1);
						 
						int index426_89 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_89);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA426_31 = input.LA(1);
						 
						int index426_31 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_31);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA426_67 = input.LA(1);
						 
						int index426_67 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_67);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA426_40 = input.LA(1);
						 
						int index426_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_40);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA426_73 = input.LA(1);
						 
						int index426_73 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_73);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA426_62 = input.LA(1);
						 
						int index426_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_62);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA426_87 = input.LA(1);
						 
						int index426_87 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_87);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA426_56 = input.LA(1);
						 
						int index426_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_56);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA426_84 = input.LA(1);
						 
						int index426_84 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_84);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA426_50 = input.LA(1);
						 
						int index426_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_50);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA426_81 = input.LA(1);
						 
						int index426_81 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_81);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA426_78 = input.LA(1);
						 
						int index426_78 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_78);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA426_91 = input.LA(1);
						 
						int index426_91 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred858_MySQL()) ) {s = 3;}
						else if ( (true) ) {s = 1;}
						 
						input.seek(index426_91);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 426, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_BINARY_in_cast_data_type18582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type18585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_in_cast_data_type18593 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type18596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_SYM_in_cast_data_type18604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATETIME_in_cast_data_type18609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SYM_in_cast_data_type18615 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type18619 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_cast_data_type18622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_cast_data_type18624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIGNED_SYM_in_cast_data_type18634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_cast_data_type18637 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_SYM_in_cast_data_type18644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_cast_data_type18649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_cast_data_type18652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier18665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_search_modifier18667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_search_modifier18669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier18671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier18678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_search_modifier18680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_search_modifier18682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier18684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_search_modifier18686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_search_modifier18688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_search_modifier18690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_search_modifier18697 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_BOOLEAN_SYM_in_search_modifier18699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_search_modifier18701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_search_modifier18708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_search_modifier18710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_search_modifier18712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_STRING_in_string_literal18858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_number_literal18875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HEX_DIGIT_in_hex_literal18890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIT_NUM_in_bit_literal18908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_string_literal_in_literal_value18926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_literal_in_literal_value18930 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hex_literal_in_literal_value18934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_boolean_literal_in_literal_value18938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_literal_in_literal_value18942 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_literal_value18946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_number_functions_in_functionList18964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_functions_in_functionList18970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_time_functions_in_functionList18976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_other_functions_in_functionList18981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_schema_name19910 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_table_name19925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_engine_name19940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_column_name19955 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_view_name19970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_parser_name19985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_index_name20000 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_partition_name20015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_partition_logical_name20029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_constraint_symbol_name20043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_foreign_key_symbol_name20057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_collation_name20072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_event_name20087 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_user_name20102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_function_name20117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_procedure_name20132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_server_name20147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_wrapper_name20162 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AS_SYM_in_alias20178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_ID_in_alias20185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exp_factor1_in_expression20202 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_OR_SYM_in_expression20206 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor1_in_expression20208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_exp_factor2_in_exp_factor120218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_XOR_in_exp_factor120222 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor2_in_exp_factor120224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_exp_factor3_in_exp_factor220234 = new BitSet(new long[]{0x0000000000200002L});
	public static final BitSet FOLLOW_AND_SYM_in_exp_factor220238 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor3_in_exp_factor220240 = new BitSet(new long[]{0x0000000000200002L});
	public static final BitSet FOLLOW_NOT_SYM_in_exp_factor320251 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor4_in_exp_factor320255 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bool_primary_in_exp_factor420262 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_IS_SYM_in_exp_factor420266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_exp_factor420269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_boolean_literal_in_exp_factor420274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_exp_factor420276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary20292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_bool_primary20294 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_bool_primary20296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary20306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_bool_primary20308 = new BitSet(new long[]{0x0000000000420000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_bool_primary20321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_bool_primary20330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_bool_primary20333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_bool_primary20335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_bool_primary20342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate20358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_predicate20362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_predicate20365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_predicate20369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20379 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate20382 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_predicate20386 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20388 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_AND_SYM_in_predicate20390 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_predicate20392 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SOUNDS_SYM_in_predicate20404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_predicate20406 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate20421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_predicate20425 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_predicate20427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_predicate20430 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_predicate20432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_predicate20446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REGEXP_in_predicate20450 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_predicate20462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor1_in_bit_expr20474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_VERTBAR_in_bit_expr20478 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor1_in_bit_expr20480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor2_in_factor120491 = new BitSet(new long[]{0x0004000000000002L});
	public static final BitSet FOLLOW_BITAND_in_factor120495 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor2_in_factor120497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor3_in_factor220508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
	public static final BitSet FOLLOW_set_in_factor220512 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor3_in_factor220518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor4_in_factor320529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_set_in_factor320533 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor4_in_factor320539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor5_in_factor420550 = new BitSet(new long[]{0x0000000020000002L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_factor420554 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor5_in_factor420564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_factor6_in_factor520575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_set_in_factor520579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_interval_expr_in_factor520585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_factor620596 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_factor620612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_expr_in_factor620617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_simple_expr_in_factor720625 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_factor720628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_collation_names_in_factor720630 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_literal_value_in_simple_expr20639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_simple_expr20645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_call_in_simple_expr20650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_VAR_in_simple_expr20657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_simple_expr20662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_SYM_in_simple_expr20668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_simple_expr20670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_simple_expr20676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXISTS_in_simple_expr20681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_simple_expr20683 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_match_against_statement_in_simple_expr20690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement_in_simple_expr20695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_interval_expr_in_simple_expr20700 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionList_in_function_call20715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call20719 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1712802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call20722 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_function_call20725 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call20727 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call20733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CAST_SYM_in_function_call20748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call20750 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call20752 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_AS_SYM_in_function_call20754 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_function_call20756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call20758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_function_call20769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call20771 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call20773 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_function_call20775 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_function_call20777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call20779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_function_call20790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call20792 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_function_call20794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_function_call20796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_transcoding_name_in_function_call20798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call20800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_group_functions_in_function_call20811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_function_call20813 = new BitSet(new long[]{0x01798821B4021B50L,0x03B809800501A3C0L,0x001030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_function_call20830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function_call20832 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement1_in_case_when_statement20851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_when_statement2_in_case_when_statement20855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_SYM_in_case_when_statement120870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_WHEN_SYM_in_case_when_statement120882 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_case_when_statement120884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_THEN_SYM_in_case_when_statement120886 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement120888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_ELSE_SYM_in_case_when_statement120903 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement120905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_END_SYM_in_case_when_statement120918 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASE_SYM_in_case_when_statement220933 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement220935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_WHEN_SYM_in_case_when_statement220947 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement220949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_THEN_SYM_in_case_when_statement220951 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement220953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_ELSE_SYM_in_case_when_statement220968 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_case_when_statement220970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_END_SYM_in_case_when_statement220983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MATCH_in_match_against_statement20993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_match_against_statement20996 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_match_against_statement20999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_match_against_statement21001 = new BitSet(new long[]{0x0000000000004000L,0x0000000080000000L});
	public static final BitSet FOLLOW_AGAINST_in_match_against_statement21007 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_match_against_statement21010 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_search_modifier_in_match_against_statement21013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_column_spec21031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_column_spec21033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_column_spec21038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_column_spec21040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_column_spec21045 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_expression_list21054 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_expression_list21056 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_expression_list21060 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_expression_list21062 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_expression_list21067 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_interval_expr21076 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_interval_expr21078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000F8000000L,0x0000000000000000L,0x000000000F000000L,0x0000000000000000L,0x000201C000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000006L,0x0000000000000000L,0x0004000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_interval_unit_in_interval_expr21080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_reference_in_table_references21102 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_table_references21106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_references21108 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_table_factor1_in_table_reference21119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_atom_in_table_reference21123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor2_in_table_factor121131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000040000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor121145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor121147 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_table_factor121150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor3_in_table_factor221164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_STRAIGHT_JOIN_in_table_factor221169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor221171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_table_factor221174 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_table_factor221176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor4_in_table_factor321190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_set_in_table_factor321195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_factor321202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor321206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_factor4_in_table_factor321208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_table_factor321210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_atom_in_table_factor421222 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_table_factor421227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000004L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_set_in_table_factor421231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_factor421238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_factor421245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_atom_in_table_factor421247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_table_atom21262 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_partition_clause_in_table_atom21265 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_alias_in_table_atom21270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_index_hint_list_in_table_atom21275 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_table_atom21286 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_table_atom21288 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_table_atom21297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_table_atom21299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_table_atom21301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OJ_SYM_in_table_atom21310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_atom21312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_LEFT_in_table_atom21314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_table_atom21316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_table_atom21318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_table_atom21320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_table_atom21322 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_table_atom21324 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_join_condition21337 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_join_condition21339 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USING_SYM_in_join_condition21345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_join_condition21347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_hint_in_index_hint_list21356 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_hint_list21359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_index_hint_in_index_hint_list21361 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_set_in_index_options21371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_FOR_SYM_in_index_options21382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000004L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_JOIN_SYM_in_index_options21386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_index_options21392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_index_options21394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_SYM_in_index_options21400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_index_options21402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USE_SYM_in_index_hint21418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint21423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint21425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint21428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint21432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_index_hint21437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint21439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint21441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint21443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint21445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_SYM_in_index_hint21450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_index_options_in_index_hint21453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_hint21455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_list_in_index_hint21457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_hint21459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_name_in_index_list21467 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_list21470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_index_list21472 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_clause21482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_clause21484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_partition_clause21486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_clause21488 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partition_name_in_partition_names21495 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_names21498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_partition_names21500 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_SHIFT_LEFT_in_root_statement21518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SHIFT_RIGHT_in_root_statement21520 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000000020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_data_manipulation_statements_in_root_statement21529 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_data_definition_statements_in_root_statement21533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SEMI_in_root_statement21541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_statements21554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statements_in_data_manipulation_statements21559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statements_in_data_manipulation_statements21564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statements_in_data_manipulation_statements21569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_call_statement_in_data_manipulation_statements21575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_do_statement_in_data_manipulation_statements21580 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statements_in_data_manipulation_statements21585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_load_data_statement_in_data_manipulation_statements21590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_load_xml_statement_in_data_manipulation_statements21595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement_in_data_manipulation_statements21600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_database_statement_in_data_definition_statements21612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statements_in_data_definition_statements21617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_database_statement_in_data_definition_statements21622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_event_statement_in_data_definition_statements21629 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_event_statement_in_data_definition_statements21634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_event_statement_in_data_definition_statements21639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_server_statement_in_data_definition_statements21668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_server_statement_in_data_definition_statements21673 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_server_statement_in_data_definition_statements21678 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement_in_data_definition_statements21685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_table_statement_in_data_definition_statements21690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_table_statement_in_data_definition_statements21695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_view_statement_in_data_definition_statements21702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_view_statement_in_data_definition_statements21707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rename_table_statement_in_data_definition_statements21712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_view_statement_in_data_definition_statements21717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncate_table_statement_in_data_definition_statements21722 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_index_statement_in_data_definition_statements21729 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_index_statement_in_data_definition_statements21734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_expression_in_select_statement21760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_UNION_SYM_in_select_statement21765 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ALL_in_select_statement21768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_expression_in_select_statement21773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SELECT_in_select_expression21786 = new BitSet(new long[]{0x01798821B4021B50L,0x03B809800501A3C0L,0x003030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3412C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F16L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_HIGH_PRIORITY_in_select_expression21810 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F16L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_STRAIGHT_JOIN_in_select_expression21816 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7809F82412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_SMALL_RESULT_in_select_expression21822 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808F82412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_BIG_RESULT_in_select_expression21827 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808F02412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_BUFFER_RESULT_in_select_expression21832 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808E02412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_SQL_CALC_FOUND_ROWS_in_select_expression21847 = new BitSet(new long[]{0x01798821B4001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_select_list_in_select_expression21853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0024000000000000L,0x0004000000000000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_FROM_in_select_expression21863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_select_expression21865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000010004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_partition_clause_in_select_expression21872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_select_expression21881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008400L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_groupby_clause_in_select_expression21891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000008000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_having_clause_in_select_expression21900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000000000L,0x0000040100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_select_expression21915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0004000000000000L,0x0000040100000000L});
	public static final BitSet FOLLOW_limit_clause_in_select_expression21923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FOR_SYM_in_select_expression21933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_select_expression21935 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_select_expression21941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_select_expression21943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_SHARE_SYM_in_select_expression21945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_select_expression21947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHERE_in_where_clause21961 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_where_clause21963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUP_SYM_in_groupby_clause21972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_groupby_clause21974 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_groupby_item_in_groupby_clause21976 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_groupby_clause21979 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_groupby_item_in_groupby_clause21981 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_groupby_clause21986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_ROLLUP_SYM_in_groupby_clause21988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_groupby_item21997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_groupby_item22001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_groupby_item22005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HAVING_in_having_clause22014 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_having_clause22016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_orderby_clause22025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_orderby_clause22027 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_orderby_item_in_orderby_clause22029 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_orderby_clause22032 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_orderby_item_in_orderby_clause22034 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_groupby_item_in_orderby_item22043 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_LIMIT_in_limit_clause22061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_offset_in_limit_clause22065 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_limit_clause22067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_row_count_in_limit_clause22071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_row_count_in_limit_clause22077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_OFFSET_SYM_in_limit_clause22079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_offset_in_limit_clause22081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_offset22090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_row_count22097 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_displayed_column_in_select_list22110 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_select_list22114 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_displayed_column_in_select_list22116 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_ASTERISK_in_select_list22125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_column_list22137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_column_list22139 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_list22142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_column_list22144 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_list22148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_subquery22157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_subquery22159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_subquery22161 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_table_spec22172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_table_spec22174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_spec22179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_displayed_column22191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DOT_in_displayed_column22193 = new BitSet(new long[]{0x0000000020000000L});
	public static final BitSet FOLLOW_ASTERISK_in_displayed_column22195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_displayed_column22205 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_displayed_column22208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_displayed_column22221 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_displayed_column22224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELETE_SYM_in_delete_statements22244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_delete_statements22247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_QUICK_in_delete_statements22252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000440000000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_delete_statements22257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_delete_single_table_statement_in_delete_statements22264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_multiple_table_statement1_in_delete_statements22268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_multiple_table_statement2_in_delete_statements22272 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_delete_single_table_statement22282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_single_table_statement22284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000010004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_partition_clause_in_delete_single_table_statement22288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_single_table_statement22294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_delete_single_table_statement22300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_delete_single_table_statement22306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement122316 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement122319 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_COMMA_in_delete_multiple_table_statement122324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement122326 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement122329 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_FROM_in_delete_multiple_table_statement122336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_delete_multiple_table_statement122338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_multiple_table_statement122342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FROM_in_delete_multiple_table_statement222352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement222354 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement222357 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COMMA_in_delete_multiple_table_statement222362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_delete_multiple_table_statement222364 = new BitSet(new long[]{0x0000000000040000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_ALL_FIELDS_in_delete_multiple_table_statement222367 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_delete_multiple_table_statement222374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_delete_multiple_table_statement222376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_delete_multiple_table_statement222380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement1_in_insert_statements22397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement2_in_insert_statements22401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement3_in_insert_statements22405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_in_insert_header22414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000440200000L,0x0040000000000000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_insert_header22426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000040000000L});
	public static final BitSet FOLLOW_INTO_in_insert_header22432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_insert_header22436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_clause_in_insert_header22441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_insert_subfix22452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DUPLICATE_SYM_in_insert_subfix22454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_insert_subfix22456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_insert_subfix22458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_insert_subfix22460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_insert_subfix22462 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_insert_subfix22464 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_insert_subfix22467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_spec_in_insert_subfix22469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_insert_subfix22471 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_insert_subfix22473 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement122484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_column_list_in_insert_statement122488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_value_list_clause_in_insert_statement122494 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement122499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_value_list_clause22509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_value_list_in_value_list_clause22517 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_value_list_clause22520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_value_list_in_value_list_clause22522 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_value_list22530 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_column_value_list22533 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_value_list22535 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_value_list22539 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_column_value_list22542 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_value_list22544 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_value_list22550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement222559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_insert_statement222562 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement222567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_set_columns_cluase22577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_set_column_cluase_in_set_columns_cluase22579 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_set_columns_cluase22583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_set_column_cluase_in_set_columns_cluase22585 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_column_spec_in_set_column_cluase22594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_set_column_cluase22596 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_set_column_cluase22599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_set_column_cluase22601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_header_in_insert_statement322611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_column_list_in_insert_statement322615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_expression_in_insert_statement322621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_insert_subfix_in_insert_statement322626 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_single_table_update_statement_in_update_statements22646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_multiple_table_update_statement_in_update_statements22650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_single_table_update_statement22659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0140000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_single_table_update_statement22662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_single_table_update_statement22667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_reference_in_single_table_update_statement22671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_single_table_update_statement22674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_single_table_update_statement22678 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_orderby_clause_in_single_table_update_statement22684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_single_table_update_statement22690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UPDATE_in_multiple_table_update_statement22702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0140000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LOW_PRIORITY_in_multiple_table_update_statement22705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_multiple_table_update_statement22710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_references_in_multiple_table_update_statement22714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_multiple_table_update_statement22717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_multiple_table_update_statement22721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CALL_SYM_in_call_statement22738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_procedure_name_in_call_statement22740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_call_statement22743 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1712802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_call_statement22747 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_call_statement22750 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_call_statement22752 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_call_statement22759 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DO_SYM_in_do_statement22776 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_do_statement22778 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_do_statement22781 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_do_statement22783 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_HANDLER_SYM_in_handler_statements22800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_handler_statements22802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000008000L});
	public static final BitSet FOLLOW_open_handler_statement_in_handler_statements22806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement1_in_handler_statements22810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement2_in_handler_statements22814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_handler_statement3_in_handler_statements22818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_close_handler_statement_in_handler_statements22822 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPEN_SYM_in_open_handler_statement22832 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_open_handler_statement22835 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement122846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_handler_statement122848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_handler_statement122850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_handler_statement122852 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_handler_statement122854 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_handler_statement122857 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_handler_statement122859 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_handler_statement122863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement122867 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement122872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement222883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_handler_statement222885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0400000000000001L});
	public static final BitSet FOLLOW_set_in_handler_statement222887 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement222905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement222910 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_READ_SYM_in_handler_statement322921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_handler_statement322923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_where_clause_in_handler_statement322933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_limit_clause_in_handler_statement322938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_SYM_in_close_handler_statement22949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOAD_in_load_data_statement22965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_load_data_statement22967 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040010000000000L});
	public static final BitSet FOLLOW_LOCAL_SYM_in_load_data_statement22979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_INFILE_in_load_data_statement22983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement22985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INTO_in_load_data_statement22998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_load_data_statement23000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_load_data_statement23002 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_partition_clause_in_load_data_statement23006 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_load_data_statement23012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_load_data_statement23014 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_load_data_statement23016 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000000000L,0x0000008000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_load_data_statement23025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_TERMINATED_in_load_data_statement23036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement23038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement23040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_OPTIONALLY_in_load_data_statement23048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_ENCLOSED_in_load_data_statement23052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement23054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement23056 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ESCAPED_in_load_data_statement23063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement23065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement23067 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LINES_in_load_data_statement23080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_STARTING_in_load_data_statement23085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement23087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement23089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000008000000L});
	public static final BitSet FOLLOW_TERMINATED_in_load_data_statement23096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_data_statement23098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_data_statement23100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_load_data_statement23110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_load_data_statement23112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_load_data_statement23114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_load_data_statement23126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_data_statement23129 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_data_statement23131 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_load_data_statement23135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_data_statement23138 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_data_statement23140 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_load_data_statement23145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_load_data_statement23151 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOAD_in_load_xml_statement23168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_XML_SYM_in_load_xml_statement23170 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040010000000000L});
	public static final BitSet FOLLOW_LOCAL_SYM_in_load_xml_statement23182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_INFILE_in_load_xml_statement23186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_xml_statement23188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INTO_in_load_xml_statement23201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_load_xml_statement23203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_spec_in_load_xml_statement23205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000010000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_partition_clause_in_load_xml_statement23209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_load_xml_statement23215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_load_xml_statement23217 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_load_xml_statement23219 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ROWS_SYM_in_load_xml_statement23225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_IDENTIFIED_SYM_in_load_xml_statement23227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_load_xml_statement23229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_load_xml_statement23231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_load_xml_statement23237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_load_xml_statement23239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_load_xml_statement23241 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LPAREN_in_load_xml_statement23253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_xml_statement23256 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_xml_statement23258 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_load_xml_statement23262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_column_spec_in_load_xml_statement23265 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_USER_VAR_in_load_xml_statement23267 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_load_xml_statement23272 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_columns_cluase_in_load_xml_statement23278 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement_header_in_replace_statement23295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004020L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_replace_statement1_in_replace_statement23300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement2_in_replace_statement23304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_statement3_in_replace_statement23308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPLACE_in_replace_statement_header23319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0020000040000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_INTO_in_replace_statement_header23332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_replace_statement_header23336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_clause_in_replace_statement_header23340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_list_in_replace_statement123352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
	public static final BitSet FOLLOW_value_list_clause_in_replace_statement123357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_columns_cluase_in_replace_statement223366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_list_in_replace_statement323376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_replace_statement323381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_database_statement23397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_create_database_statement23399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_database_statement23408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_database_statement23410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_database_statement23412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_create_database_statement23416 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_create_specification_in_create_database_statement23421 = new BitSet(new long[]{0x0000000000000002L,0x0000000082004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_database_statement23424 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_create_specification_in_create_database_statement23426 = new BitSet(new long[]{0x0000000000000002L,0x0000000082004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_create_specification23440 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_create_specification23453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_create_specification23455 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_specification23458 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_create_specification23462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_create_specification23476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_specification23479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_create_specification23483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statement1_in_alter_database_statements23500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_database_statement2_in_alter_database_statements23504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_database_statement123512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_alter_database_statement123514 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_alter_database_statement123523 = new BitSet(new long[]{0x0000000000000000L,0x0000000002004000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alter_database_specification_in_alter_database_statement123528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_database_statement223536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_alter_database_statement223538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_alter_database_statement223546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_UPGRADE_SYM_in_alter_database_statement223549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_alter_database_statement223551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_alter_database_statement223553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_NAME_SYM_in_alter_database_statement223555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_database_specification23564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_database_specification23568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_database_specification23570 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_database_specification23573 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_database_specification23577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_database_specification23585 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_database_specification23589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_database_specification23592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_collation_names_in_alter_database_specification23596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_database_statement23608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_set_in_drop_database_statement23610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_database_statement23619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_database_statement23621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_schema_name_in_drop_database_statement23625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_event_statement23640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DEFINER_in_create_event_statement23644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_event_statement23646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_create_event_statement23650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_create_event_statement23654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_create_event_statement23661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_event_statement23665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_event_statement23667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_event_statement23669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_create_event_statement23674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement23677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEDULE_SYM_in_create_event_statement23679 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_schedule_definition_in_create_event_statement23681 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement23685 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMPLETION_SYM_in_create_event_statement23687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_event_statement23690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PRESERVE_SYM_in_create_event_statement23694 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_create_event_statement23701 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_create_event_statement23705 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_create_event_statement23710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_event_statement23712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SLAVE_in_create_event_statement23714 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_create_event_statement23722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_create_event_statement23724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_do_statement_in_create_event_statement23729 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SYM_in_schedule_definition23739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition23741 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition23744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition23746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition23748 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_EVERY_SYM_in_schedule_definition23761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition23763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_STARTS_SYM_in_schedule_definition23770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition23772 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition23775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition23777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition23779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_ENDS_SYM_in_schedule_definition23789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_timestamp_in_schedule_definition23791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PLUS_in_schedule_definition23794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_INTERVAL_SYM_in_schedule_definition23796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_interval_in_schedule_definition23798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_interval23811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000E8000000L,0x0000000000000000L,0x000000000D000000L,0x0000000000000000L,0x0002014000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000002L,0x0000000000000000L,0x0004000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_set_in_interval23813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_timestamp23902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_event_statement23918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DEFINER_in_alter_event_statement23922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_event_statement23924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_alter_event_statement23928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_alter_event_statement23932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_alter_event_statement23939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_alter_event_statement23941 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement23945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SCHEDULE_SYM_in_alter_event_statement23947 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_schedule_definition_in_alter_event_statement23949 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement23955 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_COMPLETION_SYM_in_alter_event_statement23957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_alter_event_statement23960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PRESERVE_SYM_in_alter_event_statement23964 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_RENAME_in_alter_event_statement23970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_alter_event_statement23972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_alter_event_statement23974 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0202000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_alter_event_statement23981 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_event_statement23985 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_event_statement23990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_alter_event_statement23992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SLAVE_in_alter_event_statement23994 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_alter_event_statement24002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_alter_event_statement24004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_do_statement_in_alter_event_statement24010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_event_statement24023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_EVENT_SYM_in_drop_event_statement24025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_event_statement24028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_event_statement24030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_event_name_in_drop_event_statement24034 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_index_statement24056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_INDEX_SYM_in_create_index_statement24067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_create_index_statement24069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_index_statement24073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_create_index_statement24078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_index_statement24080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_index_statement24082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_index_statement24084 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_index_statement24087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_index_statement24089 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_index_statement24093 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_algorithm_option_in_create_index_statement24097 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_lock_option_in_create_index_statement24101 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_algorithm_option24111 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000002000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_algorithm_option24114 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_algorithm_option24118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_lock_option24132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000802000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EQ_SYM_in_lock_option24135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_lock_option24139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_index_statement24158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_drop_index_statement24160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_drop_index_statement24162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_drop_index_statement24164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_index_statement24166 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_algorithm_option_in_drop_index_statement24170 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_lock_option_in_drop_index_statement24174 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_CREATE_in_create_server_statement24200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_create_server_statement24202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_create_server_statement24204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_create_server_statement24207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_DATA_SYM_in_create_server_statement24209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_WRAPPER_SYM_in_create_server_statement24211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_wrapper_name_in_create_server_statement24213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPTIONS_SYM_in_create_server_statement24216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_server_statement24218 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008020080000000L,0x0400000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_create_server_option_in_create_server_statement24220 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_server_statement24223 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008020080000000L,0x0400000000000000L,0x0000000100000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_create_server_option_in_create_server_statement24225 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_server_statement24229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOST_SYM_in_create_server_option24241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option24243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_in_create_server_option24252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option24254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_create_server_option24263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option24265 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASSWORD_in_create_server_option24274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option24276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SOCKET_SYM_in_create_server_option24285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option24287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OWNER_SYM_in_create_server_option24296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_string_literal_in_create_server_option24298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PORT_SYM_in_create_server_option24307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_create_server_option24309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_server_statement24322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_alter_server_statement24324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_alter_server_statement24326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_OPTIONS_SYM_in_alter_server_statement24329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_server_statement24331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_alter_server_option_in_alter_server_statement24333 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_server_statement24336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_alter_server_option_in_alter_server_statement24338 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_server_statement24342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_USER_in_alter_server_option24351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_alter_server_option24354 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_server_statement24369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_SERVER_SYM_in_drop_server_statement24371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_server_statement24374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_server_statement24376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_server_name_in_drop_server_statement24380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement1_in_create_table_statement24395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement2_in_create_table_statement24399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_table_statement3_in_create_table_statement24403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement124413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement124416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement124420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement124423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement124425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement124427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement124431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_table_statement124434 = new BitSet(new long[]{0x0000000000000000L,0x0000400000040000L,0x0000000000000000L,0x0401000000000000L,0x0000002040000000L,0x0000000000000080L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_create_definition_in_create_table_statement124436 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_table_statement124439 = new BitSet(new long[]{0x0000000000000000L,0x0000400000040000L,0x0000000000000000L,0x0401000000000000L,0x0000002040000000L,0x0000000000000080L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_create_definition_in_create_table_statement124441 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_table_statement124445 = new BitSet(new long[]{0x0000005000000002L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000030200000000L,0x0080000000000000L,0x0300000000000020L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_options_in_create_table_statement124449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partition_options_in_create_table_statement124455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_table_statement124461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement224472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement224475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement224479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement224482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement224484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement224486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement224490 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000030200000000L,0x0080000000000000L,0x0300000000000020L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_options_in_create_table_statement224494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partition_options_in_create_table_statement224500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_table_statement224505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_table_statement324514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_create_table_statement324517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_create_table_statement324521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_create_table_statement324524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_create_table_statement324526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_create_table_statement324528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement324532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_create_table_statement324538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement324540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_create_table_statement324546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_create_table_statement324548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_create_table_statement324550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_table_statement324552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_create_definition24569 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_create_definition24571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition24583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition24586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_create_definition24592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_create_definition24594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition24597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition24601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24603 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition24606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24608 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition24612 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition24615 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_set_in_create_definition24628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition24635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition24640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition24644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24646 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition24649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24651 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition24655 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition24658 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition24672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition24675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_create_definition24681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition24691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_create_definition24696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition24700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24702 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition24705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24707 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition24711 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition24714 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_set_in_create_definition24727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_create_definition24741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition24745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24747 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition24750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24752 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition24756 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_create_definition24759 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_create_definition24773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_create_definition24776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_create_definition24782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_create_definition24784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_index_name_in_create_definition24787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition24791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24793 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_create_definition24796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_create_definition24798 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition24802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_create_definition24804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECK_SYM_in_create_definition24815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_definition24817 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_create_definition24819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_definition24821 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_data_type_header_in_column_definition24833 = new BitSet(new long[]{0x0000001000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_AUTO_INCREMENT_in_column_definition24837 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_column_definition24844 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KEY_SYM_in_column_definition24847 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_column_definition24855 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KEY_SYM_in_column_definition24858 = new BitSet(new long[]{0x0000000000000002L,0x0000000120000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_column_definition24868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_definition24870 = new BitSet(new long[]{0x0000000000000002L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_COLUMN_FORMAT_in_column_definition24876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000002000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_set_in_column_definition24878 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_column_definition24890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_null_or_notnull24902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull24904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_null_or_notnull24909 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIT_SYM_in_column_data_type_header24923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header24925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header24927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header24929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header24934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header24939 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_bit_literal_in_column_data_type_header24941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYINT_in_column_data_type_header24954 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header24956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header24958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header24960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header24965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header24970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header24975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header24980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header24982 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLINT_in_column_data_type_header24995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header24997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header24999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMINT_in_column_data_type_header25036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25064 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INT_SYM_in_column_data_type_header25077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25088 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_SYM_in_column_data_type_header25118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25139 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BIGINT_in_column_data_type_header25159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25187 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REAL_in_column_data_type_header25200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25204 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25215 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_SYM_in_column_data_type_header25245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25249 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25255 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FLOAT_SYM_in_column_data_type_header25290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25294 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25310 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_SYM_in_column_data_type_header25335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25339 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25363 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMERIC_SYM_in_column_data_type_header25383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25387 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000100L});
	public static final BitSet FOLLOW_UNSIGNED_SYM_in_column_data_type_header25401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ZEROFILL_in_column_data_type_header25406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_number_literal_in_column_data_type_header25418 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_SYM_in_column_data_type_header25431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25441 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_SYM_in_column_data_type_header25454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25464 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_in_column_data_type_header25477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25480 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_column_data_type_header25487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATETIME_in_column_data_type_header25504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_set_in_column_data_type_header25514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YEAR_in_column_data_type_header25531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_column_data_type_header25541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_in_column_data_type_header25554 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25563 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25570 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25572 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25584 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR_in_column_data_type_header25604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25610 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25617 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25619 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header25651 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARBINARY_in_column_data_type_header25685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_length_in_column_data_type_header25689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25701 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYBLOB_in_column_data_type_header25714 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_SYM_in_column_data_type_header25730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25733 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMBLOB_in_column_data_type_header25746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONGBLOB_in_column_data_type_header25762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TINYTEXT_in_column_data_type_header25778 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header25783 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25790 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25792 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TEXT_SYM_in_column_data_type_header25817 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header25822 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25829 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25831 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25843 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIUMTEXT_in_column_data_type_header25856 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header25859 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25866 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25868 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONGTEXT_in_column_data_type_header25893 = new BitSet(new long[]{0x0001000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_BINARY_in_column_data_type_header25898 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25905 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25907 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25919 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENUM_in_column_data_type_header25932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25939 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25944 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header25948 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header25951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25953 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header25955 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header25960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header25962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header25967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header25972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header25987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_column_data_type_header25989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25991 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_column_data_type_header25994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header25996 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_column_data_type_header26000 = new BitSet(new long[]{0x0000000000000002L,0x0000000002004000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_column_data_type_header26003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_column_data_type_header26005 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_column_data_type_header26007 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_column_data_type_header26012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_column_data_type_header26014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L});
	public static final BitSet FOLLOW_null_or_notnull_in_column_data_type_header26019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_column_data_type_header26024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_column_data_type_header26026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_index_column_name26042 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_index_column_name26045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_index_column_name26047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_index_column_name26049 = new BitSet(new long[]{0x0000000002000002L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_REFERENCES_in_reference_definition26069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_reference_definition26071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_reference_definition26073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_reference_definition26075 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_reference_definition26078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_reference_definition26080 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_reference_definition26084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition26090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_FULL_in_reference_definition26092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition26098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_PARTIAL_in_reference_definition26100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_MATCH_in_reference_definition26106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_SIMPLE_SYM_in_reference_definition26108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_reference_definition26116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_DELETE_SYM_in_reference_definition26118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000080000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_reference_option_in_reference_definition26120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_ON_in_reference_definition26126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_UPDATE_in_reference_definition26128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000080000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_reference_option_in_reference_definition26130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESTRICT_in_reference_option26141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASCADE_in_reference_option26147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_SYM_in_reference_option26153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_NULL_SYM_in_reference_option26155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NO_SYM_in_reference_option26161 = new BitSet(new long[]{0x0000000000000080L});
	public static final BitSet FOLLOW_ACTION_in_reference_option26163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_option_in_table_options26173 = new BitSet(new long[]{0x0000005000000002L,0x0000100182024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_COMMA_in_table_options26178 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_option_in_table_options26183 = new BitSet(new long[]{0x0000005000000002L,0x0000100182024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_table_option26198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_table_option26205 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTO_INCREMENT_in_table_option26216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26223 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AVG_ROW_LENGTH_in_table_option26234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26241 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_table_option26253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_table_option26257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_table_option26259 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26262 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_table_option26266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECKSUM_SYM_in_table_option26277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_table_option26296 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_table_option26300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_table_option26307 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_table_option26318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option26325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONNECTION_SYM_in_table_option26336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option26343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATA_SYM_in_table_option26354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option26356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option26363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DELAY_KEY_WRITE_SYM_in_table_option26374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDEX_SYM_in_table_option26392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_table_option26394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option26401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INSERT_METHOD_in_table_option26412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000002000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_set_in_table_option26419 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_table_option26442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAX_ROWS_in_table_option26460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MIN_ROWS_in_table_option26478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_table_option26485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PACK_KEYS_SYM_in_table_option26496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option26503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PASSWORD_in_table_option26520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_table_option26527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_FORMAT_SYM_in_table_option26538 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L,0x4000002000000000L,0x0000080000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26541 = new BitSet(new long[]{0x0000000000000000L,0x0000004800000000L,0x4000002000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_set_in_table_option26545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATS_AUTO_RECALC_in_table_option26568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option26575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STATS_PERSISTENT_in_table_option26592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_table_option26599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UNION_SYM_in_table_option26616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_table_option26619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_table_option26623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_option26625 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_table_option26628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_table_option26630 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_table_option26634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_options26646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_partition_options26648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000001200000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options26661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HASH_SYM_in_partition_options26665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26667 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options26669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options26682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_partition_options26686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options26690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26692 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_RANGE_SYM_in_partition_options26702 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26704 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options26706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options26712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options26716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_LIST_SYM_in_partition_options26729 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26731 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options26733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COLUMNS_SYM_in_partition_options26739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options26743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_PARTITIONS_SYM_in_partition_options26757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options26759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_SUBPARTITION_SYM_in_partition_options26770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_partition_options26772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000200000080L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options26781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_HASH_SYM_in_partition_options26785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26787 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_partition_options26789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LINEAR_SYM_in_partition_options26800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_partition_options26804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_partition_options26808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_SUBPARTITIONS_SYM_in_partition_options26819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_options26821 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_options26833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_partition_options26835 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_options26839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_partition_options26842 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_options26846 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_partition_definition26857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_partition_definition26859 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000800000000L});
	public static final BitSet FOLLOW_VALUES_in_partition_definition26868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LESS_SYM_in_partition_definition26879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_THAN_SYM_in_partition_definition26881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition26886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_partition_definition26888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition26890 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_MAXVALUE_SYM_in_partition_definition26895 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_IN_SYM_in_partition_definition26910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition26912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_expression_list_in_partition_definition26914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition26916 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_STORAGE_SYM_in_partition_definition26932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_partition_definition26936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition26939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_partition_definition26943 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_partition_definition26949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition26952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition26956 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_DATA_SYM_in_partition_definition26963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition26965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition26968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition26972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_partition_definition26978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_partition_definition26980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition26983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_partition_definition26987 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_MAX_ROWS_in_partition_definition26993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition26996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition27000 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MIN_ROWS_in_partition_definition27006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_partition_definition27009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_partition_definition27013 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_partition_definition27019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_subpartition_definition_in_partition_definition27021 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_definition27024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_subpartition_definition_in_partition_definition27027 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_partition_definition27031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUBPARTITION_SYM_in_subpartition_definition27042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_logical_name_in_subpartition_definition27044 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000800L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_STORAGE_SYM_in_subpartition_definition27049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ENGINE_SYM_in_subpartition_definition27053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition27056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_engine_name_in_subpartition_definition27060 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_subpartition_definition27066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition27069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition27073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_DATA_SYM_in_subpartition_definition27080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition27082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition27085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition27089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_INDEX_SYM_in_subpartition_definition27095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_DIRECTORY_SYM_in_subpartition_definition27097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition27100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_subpartition_definition27104 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000400000L});
	public static final BitSet FOLLOW_MAX_ROWS_in_subpartition_definition27110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition27113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition27117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_MIN_ROWS_in_subpartition_definition27123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_subpartition_definition27126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_subpartition_definition27130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_length27141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_table_statement27151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_IGNORE_SYM_in_alter_table_statement27154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_alter_table_statement27158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_statement27160 = new BitSet(new long[]{0x0000005000190402L,0x0010100102464800L,0x0406022000010000L,0x0000800000400810L,0x0000802800000000L,0x0000040000000040L,0x0000820000400000L,0x0000030204200000L,0x0080000780080000L,0x0300000000000000L,0x0040000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_alter_table_specification_in_alter_table_statement27165 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_statement27168 = new BitSet(new long[]{0x0000005000190400L,0x0010100102464800L,0x0406022000010000L,0x0000800000400810L,0x0000802800000000L,0x0000040000000040L,0x0000820000400000L,0x0000020204200000L,0x0080000780080000L,0x0300000000000000L,0x0040000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_alter_table_specification_in_alter_table_statement27170 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_options_in_alter_table_statement27180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_options_in_alter_table_specification27193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27200 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification27203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27207 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification27209 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification27213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27231 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification27234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_definitions_in_alter_table_specification27240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27242 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_alter_table_specification27253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification27260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification27265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification27271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27273 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification27276 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27287 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification27290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification27293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification27299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification27301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification27304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification27310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27312 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification27315 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27332 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification27335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification27338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_UNIQUE_SYM_in_alter_table_specification27344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification27354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_index_type_in_alter_table_specification27362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_alter_table_specification27368 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification27371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_alter_table_specification27373 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27377 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification27380 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_FULLTEXT_SYM_in_alter_table_specification27395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification27405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification27411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27413 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification27416 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_SPATIAL_SYM_in_alter_table_specification27429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002040000000L,0x0100000000000080L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification27439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification27445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27447 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_index_option_in_alter_table_specification27450 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000002000000L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27461 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CONSTRAINT_in_alter_table_specification27464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_constraint_symbol_name_in_alter_table_specification27467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification27473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification27475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification27478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_names_in_alter_table_specification27484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_reference_definition_in_alter_table_specification27488 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_alter_table_specification27497 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000002000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification27500 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification27504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_table_specification27519 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification27522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification27530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification27532 = new BitSet(new long[]{0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0004000000080000L,0x0000000000000000L,0x0000002000000000L,0x0001000000000200L,0x0000000000040000L,0x0000000000000000L,0x0020000010000000L});
	public static final BitSet FOLLOW_literal_value_in_alter_table_specification27534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification27540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification27542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHANGE_in_alter_table_specification27553 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification27556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27562 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification27564 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification27567 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification27569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27571 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_in_alter_table_specification27582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000802000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification27585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_set_in_alter_table_specification27589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MODIFY_SYM_in_alter_table_specification27606 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification27609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27613 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_alter_table_specification27615 = new BitSet(new long[]{0x0000000000002002L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_FIRST_SYM_in_alter_table_specification27618 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AFTER_SYM_in_alter_table_specification27622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27624 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification27635 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COLUMN_SYM_in_alter_table_specification27638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27642 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification27651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_PRIMARY_SYM_in_alter_table_specification27653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification27655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification27664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_alter_table_specification27666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_name_in_alter_table_specification27672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification27681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_FOREIGN_in_alter_table_specification27683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KEY_SYM_in_alter_table_specification27685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_foreign_key_symbol_name_in_alter_table_specification27687 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISABLE_SYM_in_alter_table_specification27696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KEYS_in_alter_table_specification27698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ENABLE_SYM_in_alter_table_specification27707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KEYS_in_alter_table_specification27709 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_in_alter_table_specification27718 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_specification27727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_SYM_in_alter_table_specification27736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_BY_SYM_in_alter_table_specification27738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27740 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification27743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_alter_table_specification27745 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_alter_table_specification27756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_alter_table_specification27758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification27760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification27762 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_table_specification27764 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification27767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_alter_table_specification27769 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_alter_table_specification27781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_alter_table_specification27785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_alter_table_specification27787 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification27790 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_alter_table_specification27794 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_alter_table_specification27797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_alter_table_specification27800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_alter_table_specification27804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISCARD_in_alter_table_specification27815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification27817 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_in_alter_table_specification27826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TABLESPACE_in_alter_table_specification27828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_SYM_in_alter_table_specification27837 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ADD_SYM_in_alter_table_specification27846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification27852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_alter_table_specification27863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification27867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_in_alter_table_specification27876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27878 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification27881 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification27885 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COALESCE_in_alter_table_specification27895 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_alter_table_specification27899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REORGANIZE_SYM_in_alter_table_specification27908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification27912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_INTO_in_alter_table_specification27914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_alter_table_specification27916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification27918 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_table_specification27921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_partition_definition_in_alter_table_specification27923 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_alter_table_specification27927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCHANGE_SYM_in_alter_table_specification27936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_name_in_alter_table_specification27940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_alter_table_specification27942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_alter_table_specification27944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_alter_table_specification27946 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_SYM_in_alter_table_specification27955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27957 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification27960 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification27964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHECK_SYM_in_alter_table_specification27974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27976 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification27979 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification27983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OPTIMIZE_in_alter_table_specification27993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification27995 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification27998 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification28002 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REBUILD_SYM_in_alter_table_specification28012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification28014 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification28017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification28021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REPAIR_in_alter_table_specification28031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_PARTITION_SYM_in_alter_table_specification28033 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_partition_names_in_alter_table_specification28036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALL_in_alter_table_specification28040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REMOVE_SYM_in_alter_table_specification28050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_PARTITIONING_SYM_in_alter_table_specification28052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_column_name_in_index_column_names28062 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_index_column_names28065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_index_column_name_in_index_column_names28067 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_USING_SYM_in_index_type28076 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_set_in_index_type28078 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEY_BLOCK_SIZE_in_index_option28096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0004000000000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_index_option28099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_index_option28103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_type_in_index_option28110 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WITH_in_index_option28117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_PARSER_SYM_in_index_option28119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_parser_name_in_index_option28121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_SYM_in_index_option28130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_TEXT_STRING_in_index_option28132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_column_definitions28142 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_column_definitions28144 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_column_definitions28147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_column_name_in_column_definitions28149 = new BitSet(new long[]{0x0281400000000000L,0x0000000000002000L,0x0100000400440000L,0x0000100000001000L,0x0048000000000000L,0x0006000000000000L,0x0000000070000000L,0x0000000000000400L,0x0000000000020000L,0x0000000040004000L,0x000003A220000000L,0x0000006000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_definition_in_column_definitions28151 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_RENAME_in_rename_table_statement28164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_rename_table_statement28166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement28170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement28172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement28174 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_rename_table_statement28178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement28180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_TO_SYM_in_rename_table_statement28182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_rename_table_statement28184 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
	public static final BitSet FOLLOW_DROP_in_drop_table_statement28197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002100000L});
	public static final BitSet FOLLOW_TEMPORARY_in_drop_table_statement28200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_drop_table_statement28204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_table_statement28207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_table_statement28209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_table_statement28214 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_drop_table_statement28217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_drop_table_statement28219 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_TRUNCATE_in_truncate_table_statement28242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_TABLE_in_truncate_table_statement28245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_table_name_in_truncate_table_statement28249 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CREATE_in_create_view_statement28269 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_OR_SYM_in_create_view_statement28272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_REPLACE_in_create_view_statement28274 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_create_view_body_in_create_view_statement28279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALGORITHM_SYM_in_create_view_body28288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_view_body28290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000004000000L});
	public static final BitSet FOLLOW_set_in_create_view_body28292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_DEFINER_in_create_view_body28308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_EQ_SYM_in_create_view_body28310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_user_name_in_create_view_body28313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_CURRENT_USER_in_create_view_body28317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_SQL_SYM_in_create_view_body28325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_SECURITY_SYM_in_create_view_body28327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_set_in_create_view_body28329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_VIEW_SYM_in_create_view_body28342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_create_view_body28344 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_create_view_body28347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_column_list_in_create_view_body28349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_create_view_body28351 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_AS_SYM_in_create_view_body28356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_select_statement_in_create_view_body28358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_create_view_body28362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_CHECK_SYM_in_create_view_body28373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_OPTION_in_create_view_body28375 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ALTER_in_alter_view_statement28388 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_create_view_body_in_alter_view_statement28391 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_in_drop_view_statement28402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_VIEW_SYM_in_drop_view_statement28404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000140000000L});
	public static final BitSet FOLLOW_IF_in_drop_view_statement28407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_drop_view_statement28409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_drop_view_statement28414 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_COMMA_in_drop_view_statement28417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_view_name_in_drop_view_statement28419 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred54_MySQL18665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_synpred54_MySQL18667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_synpred54_MySQL18669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_synpred54_MySQL18671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred55_MySQL18678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_NATURAL_in_synpred55_MySQL18680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LANGUAGE_in_synpred55_MySQL18682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_MODE_SYM_in_synpred55_MySQL18684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_WITH_in_synpred55_MySQL18686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_QUERY_SYM_in_synpred55_MySQL18688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_EXPANSION_SYM_in_synpred55_MySQL18690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_functions_in_synpred87_MySQL18970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OR_SYM_in_synpred268_MySQL20206 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor1_in_synpred268_MySQL20208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XOR_in_synpred269_MySQL20222 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor2_in_synpred269_MySQL20224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AND_SYM_in_synpred270_MySQL20238 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_exp_factor3_in_synpred270_MySQL20240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred271_MySQL20251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IS_SYM_in_synpred274_MySQL20266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000210L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred274_MySQL20269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_boolean_literal_in_synpred274_MySQL20274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NULL_SYM_in_synpred274_MySQL20276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_synpred275_MySQL20292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_synpred275_MySQL20294 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_synpred275_MySQL20296 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_predicate_in_synpred278_MySQL20306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000804L,0x0200000020000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_relational_op_in_synpred278_MySQL20308 = new BitSet(new long[]{0x0000000000420000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred278_MySQL20321 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred280_MySQL20330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_EXISTS_in_synpred280_MySQL20333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred280_MySQL20335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred283_MySQL20355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred283_MySQL20358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_IN_SYM_in_synpred283_MySQL20362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_subquery_in_synpred283_MySQL20365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_synpred283_MySQL20369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred285_MySQL20379 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred285_MySQL20382 = new BitSet(new long[]{0x0000100000000000L});
	public static final BitSet FOLLOW_BETWEEN_in_synpred285_MySQL20386 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred285_MySQL20388 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_AND_SYM_in_synpred285_MySQL20390 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_predicate_in_synpred285_MySQL20392 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred286_MySQL20402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_SOUNDS_SYM_in_synpred286_MySQL20404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_synpred286_MySQL20406 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred286_MySQL20408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_synpred288_MySQL20430 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred288_MySQL20432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred289_MySQL20418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred289_MySQL20421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_LIKE_SYM_in_synpred289_MySQL20425 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred289_MySQL20427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_ESCAPE_SYM_in_synpred289_MySQL20430 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred289_MySQL20432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred291_MySQL20443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000002000000L});
	public static final BitSet FOLLOW_NOT_SYM_in_synpred291_MySQL20446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_REGEXP_in_synpred291_MySQL20450 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_bit_expr_in_synpred291_MySQL20452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VERTBAR_in_synpred292_MySQL20478 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor1_in_synpred292_MySQL20480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BITAND_in_synpred293_MySQL20495 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor2_in_synpred293_MySQL20497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred295_MySQL20512 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor3_in_synpred295_MySQL20518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred297_MySQL20533 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor4_in_synpred297_MySQL20539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred301_MySQL20554 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_factor5_in_synpred301_MySQL20564 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred303_MySQL20579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_interval_expr_in_synpred303_MySQL20585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred307_MySQL20596 = new BitSet(new long[]{0x0178882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x0206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_simple_expr_in_synpred307_MySQL20612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_synpred324_MySQL20769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred324_MySQL20771 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred324_MySQL20773 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_COMMA_in_synpred324_MySQL20775 = new BitSet(new long[]{0x0001000000000000L,0x0000000000002000L,0x0000000400440000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000002000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_cast_data_type_in_synpred324_MySQL20777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred324_MySQL20779 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONVERT_SYM_in_synpred325_MySQL20790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_LPAREN_in_synpred325_MySQL20792 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred325_MySQL20794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_USING_SYM_in_synpred325_MySQL20796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_transcoding_name_in_synpred325_MySQL20798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred325_MySQL20800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_search_modifier_in_synpred335_MySQL21013 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_factor1_in_synpred340_MySQL21119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_join_condition_in_synpred343_MySQL21150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ON_in_synpred345_MySQL21174 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012230L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_expression_in_synpred345_MySQL21176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_synpred349_MySQL21195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_OUTER_in_synpred349_MySQL21202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_JOIN_SYM_in_synpred349_MySQL21206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_table_factor4_in_synpred349_MySQL21208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_join_condition_in_synpred349_MySQL21210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partition_clause_in_synpred354_MySQL21265 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_synpred373_MySQL21541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_synpred425_MySQL21997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_NUM_in_synpred426_MySQL22001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred432_MySQL22114 = new BitSet(new long[]{0x0179882194001B50L,0x03B809800501A3C0L,0x000030B007FA5508L,0x01CA22452A0000C8L,0xA01640C3410C0218L,0xC5A072A00C006000L,0x4206146C09040081L,0x00312E0002012220L,0x1312802810040690L,0x7808002412402013L,0x0070387F11060F14L,0x003C1D0A1C068108L,0x0000000000000030L});
	public static final BitSet FOLLOW_displayed_column_in_synpred432_MySQL22116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_spec_in_synpred438_MySQL22205 = new BitSet(new long[]{0x0000000040000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_alias_in_synpred438_MySQL22208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred469_MySQL22533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bit_expr_in_synpred470_MySQL22542 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_synpred474_MySQL22599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_single_table_update_statement_in_synpred477_MySQL22646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred489_MySQL22781 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000008L,0x0600040000000010L,0x0000000000000000L,0x0000400000002000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002100000000L,0x0000000000040020L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_root_statement_in_synpred489_MySQL22783 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMA_in_synpred858_MySQL26178 = new BitSet(new long[]{0x0000005000000000L,0x0000100102024000L,0x0000022000010000L,0x0000000000000800L,0x0000802000000000L,0x0000000000000040L,0x0000020000400000L,0x0000020200000000L,0x0080000000000000L,0x0300000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_table_option_in_synpred858_MySQL26183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_options_in_synpred963_MySQL27193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEFAULT_in_synpred1042_MySQL27781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CHARACTER_SYM_in_synpred1042_MySQL27785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SET_SYM_in_synpred1042_MySQL27787 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000062000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_synpred1042_MySQL27790 = new BitSet(new long[]{0x0001200004800000L,0xFC00000000000000L,0x0000000200000003L,0x6000000000060000L,0x0000000010010102L,0x3000000000390610L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0C00040000008000L,0x0000000100000000L});
	public static final BitSet FOLLOW_charset_name_in_synpred1042_MySQL27794 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
	public static final BitSet FOLLOW_COLLATE_SYM_in_synpred1042_MySQL27797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000040000000L});
	public static final BitSet FOLLOW_EQ_SYM_in_synpred1042_MySQL27800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_collation_name_in_synpred1042_MySQL27804 = new BitSet(new long[]{0x0000000000000002L});
}
